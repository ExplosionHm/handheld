
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	@ 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	@ 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	@ 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	@ 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	@ 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	@ 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	@ 0x228000
    8060:	ea000d32 	b	b530 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8074:	e24dde8d 	sub	sp, sp, #2256	@ 0x8d0
    8078:	e24dd004 	sub	sp, sp, #4
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000009 	bl	80ac <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb000021 	bl	8114 <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb000020 	bl	8120 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb000d05 	bl	b4c0 <halt>
    80a8:	eb000d17 	bl	b50c <reboot>

000080ac <CKernel::CKernel()>:
    80ac:	e92d4070 	push	{r4, r5, r6, lr}
    80b0:	e1a04000 	mov	r4, r0
    80b4:	e2846014 	add	r6, r4, #20
    80b8:	e24dd008 	sub	sp, sp, #8
    80bc:	eb0000c8 	bl	83e4 <CDeviceNameService::CDeviceNameService()>
    80c0:	e3a01000 	mov	r1, #0
    80c4:	e2840008 	add	r0, r4, #8
    80c8:	eb00004a 	bl	81f8 <CActLED::CActLED(bool)>
    80cc:	e1a00006 	mov	r0, r6
    80d0:	eb000349 	bl	8dfc <CKernelOptions::CKernelOptions()>
    80d4:	e1a00006 	mov	r0, r6
    80d8:	eb000274 	bl	8ab0 <CKernelOptions::GetWidth() const>
    80dc:	e1a05000 	mov	r5, r0
    80e0:	e1a00006 	mov	r0, r6
    80e4:	eb000273 	bl	8ab8 <CKernelOptions::GetHeight() const>
    80e8:	e1a02000 	mov	r2, r0
    80ec:	e2840e8a 	add	r0, r4, #2208	@ 0x8a0
    80f0:	e3a03000 	mov	r3, #0
    80f4:	e1a01005 	mov	r1, r5
    80f8:	e58d3000 	str	r3, [sp]
    80fc:	e280000c 	add	r0, r0, #12
    8100:	e3a03001 	mov	r3, #1
    8104:	eb001606 	bl	d924 <C2DGraphics::C2DGraphics(unsigned int, unsigned int, bool, unsigned int)>
    8108:	e1a00004 	mov	r0, r4
    810c:	e28dd008 	add	sp, sp, #8
    8110:	e8bd8070 	pop	{r4, r5, r6, pc}

00008114 <CKernel::Initialize()>:
    8114:	e2800e8a 	add	r0, r0, #2208	@ 0x8a0
    8118:	e280000c 	add	r0, r0, #12
    811c:	ea00161c 	b	d994 <C2DGraphics::Initialize()>

00008120 <CKernel::Run()>:
    8120:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8124:	e2804e8a 	add	r4, r0, #2208	@ 0x8a0
    8128:	e3058ff0 	movw	r8, #24560	@ 0x5ff0
    812c:	e3408001 	movt	r8, #1
    8130:	e24dd010 	sub	sp, sp, #16
    8134:	e3a06000 	mov	r6, #0
    8138:	e284400c 	add	r4, r4, #12
    813c:	e2807008 	add	r7, r0, #8
    8140:	e3160001 	tst	r6, #1
    8144:	e3a018ff 	mov	r1, #16711680	@ 0xff0000
    8148:	e1a00004 	mov	r0, r4
    814c:	03a010ff 	moveq	r1, #255	@ 0xff
    8150:	01a00004 	moveq	r0, r4
    8154:	e2866001 	add	r6, r6, #1
    8158:	eb0016d5 	bl	dcb4 <C2DGraphics::ClearScreen(CDisplay::TColor)>
    815c:	e1a00004 	mov	r0, r4
    8160:	eb00166a 	bl	db10 <C2DGraphics::GetWidth() const>
    8164:	e1a05000 	mov	r5, r0
    8168:	e1a00004 	mov	r0, r4
    816c:	eb001669 	bl	db18 <C2DGraphics::GetHeight() const>
    8170:	e3a0c000 	mov	ip, #0
    8174:	e3a03003 	mov	r3, #3
    8178:	e1a020a0 	lsr	r2, r0, #1
    817c:	e1a010a5 	lsr	r1, r5, #1
    8180:	e58dc008 	str	ip, [sp, #8]
    8184:	e88d1008 	stm	sp, {r3, ip}
    8188:	e1a00004 	mov	r0, r4
    818c:	e58d800c 	str	r8, [sp, #12]
    8190:	eb001ed9 	bl	fcfc <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)>
    8194:	e1a00004 	mov	r0, r4
    8198:	eb0020d5 	bl	104f4 <C2DGraphics::UpdateDisplay()>
    819c:	e1a00007 	mov	r0, r7
    81a0:	eb00004f 	bl	82e4 <CActLED::On()>
    81a4:	e3a00f7d 	mov	r0, #500	@ 0x1f4
    81a8:	eb001046 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
    81ac:	e1a00007 	mov	r0, r7
    81b0:	eb000055 	bl	830c <CActLED::Off()>
    81b4:	e3a00f7d 	mov	r0, #500	@ 0x1f4
    81b8:	eb001042 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
    81bc:	eaffffdf 	b	8140 <CKernel::Run()+0x20>

000081c0 <_GLOBAL__sub_I__ZN7CKernelC2Ev>:
    81c0:	e92d4010 	push	{r4, lr}
    81c4:	e3074aa8 	movw	r4, #31400	@ 0x7aa8
    81c8:	e3404001 	movt	r4, #1
    81cc:	e59f1020 	ldr	r1, [pc, #32]	@ 81f4 <_GLOBAL__sub_I__ZN7CKernelC2Ev+0x34>
    81d0:	e1a00004 	mov	r0, r4
    81d4:	eb0006ca 	bl	9d04 <CString::CString(char const*)>
    81d8:	e1a00004 	mov	r0, r4
    81dc:	e3072ad8 	movw	r2, #31448	@ 0x7ad8
    81e0:	e3402001 	movt	r2, #1
    81e4:	e3091c20 	movw	r1, #39968	@ 0x9c20
    81e8:	e3401000 	movt	r1, #0
    81ec:	e8bd4010 	pop	{r4, lr}
    81f0:	ea000cad 	b	b4ac <__aeabi_atexit>
    81f4:	00016014 	.word	0x00016014

000081f8 <CActLED::CActLED(bool)>:
    81f8:	e3073ab8 	movw	r3, #31416	@ 0x7ab8
    81fc:	e3403001 	movt	r3, #1
    8200:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8204:	e3a02000 	mov	r2, #0
    8208:	e1a06001 	mov	r6, r1
    820c:	e5802000 	str	r2, [r0]
    8210:	e1a05000 	mov	r5, r0
    8214:	e5802004 	str	r2, [r0, #4]
    8218:	e5830000 	str	r0, [r3]
    821c:	eb000673 	bl	9bf0 <CMachineInfo::Get()>
    8220:	eb000583 	bl	9834 <CMachineInfo::GetActLEDInfo() const>
    8224:	e1a04000 	mov	r4, r0
    8228:	e2107080 	ands	r7, r0, #128	@ 0x80
    822c:	0a000015 	beq	8288 <CActLED::CActLED(bool)+0x90>
    8230:	e3a00014 	mov	r0, #20
    8234:	eb0013b6 	bl	d114 <operator new(unsigned int)>
    8238:	e1a02006 	mov	r2, r6
    823c:	e204103f 	and	r1, r4, #63	@ 0x3f
    8240:	e1a07000 	mov	r7, r0
    8244:	eb001311 	bl	ce90 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    8248:	e5956000 	ldr	r6, [r5]
    824c:	e2144040 	ands	r4, r4, #64	@ 0x40
    8250:	e5857004 	str	r7, [r5, #4]
    8254:	03a03001 	moveq	r3, #1
    8258:	13a03000 	movne	r3, #0
    825c:	e3560000 	cmp	r6, #0
    8260:	e5c53008 	strb	r3, [r5, #8]
    8264:	1a000013 	bne	82b8 <CActLED::CActLED(bool)+0xc0>
    8268:	e3570000 	cmp	r7, #0
    826c:	0a000015 	beq	82c8 <CActLED::CActLED(bool)+0xd0>
    8270:	e2541000 	subs	r1, r4, #0
    8274:	e1a00007 	mov	r0, r7
    8278:	13a01001 	movne	r1, #1
    827c:	eb0012ba 	bl	cd6c <CVirtualGPIOPin::Write(unsigned int)>
    8280:	e1a00005 	mov	r0, r5
    8284:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8288:	e3a00028 	mov	r0, #40	@ 0x28
    828c:	eb0013a0 	bl	d114 <operator new(unsigned int)>
    8290:	e1a03007 	mov	r3, r7
    8294:	e204103f 	and	r1, r4, #63	@ 0x3f
    8298:	e3a02002 	mov	r2, #2
    829c:	e1a06000 	mov	r6, r0
    82a0:	eb002734 	bl	11f78 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    82a4:	e2144040 	ands	r4, r4, #64	@ 0x40
    82a8:	e5856000 	str	r6, [r5]
    82ac:	03a03001 	moveq	r3, #1
    82b0:	13a03000 	movne	r3, #0
    82b4:	e5c53008 	strb	r3, [r5, #8]
    82b8:	e2541000 	subs	r1, r4, #0
    82bc:	e1a00006 	mov	r0, r6
    82c0:	13a01001 	movne	r1, #1
    82c4:	eb002483 	bl	114d8 <CGPIOPin::Write(unsigned int)>
    82c8:	e1a00005 	mov	r0, r5
    82cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000082d0 <CActLED::~CActLED()>:
    82d0:	e3073ab8 	movw	r3, #31416	@ 0x7ab8
    82d4:	e3403001 	movt	r3, #1
    82d8:	e3a02000 	mov	r2, #0
    82dc:	e5832000 	str	r2, [r3]
    82e0:	e12fff1e 	bx	lr

000082e4 <CActLED::On()>:
    82e4:	e1a03000 	mov	r3, r0
    82e8:	e5900000 	ldr	r0, [r0]
    82ec:	e3500000 	cmp	r0, #0
    82f0:	e5d31008 	ldrb	r1, [r3, #8]
    82f4:	0a000000 	beq	82fc <CActLED::On()+0x18>
    82f8:	ea002476 	b	114d8 <CGPIOPin::Write(unsigned int)>
    82fc:	e5930004 	ldr	r0, [r3, #4]
    8300:	e3500000 	cmp	r0, #0
    8304:	012fff1e 	bxeq	lr
    8308:	ea001297 	b	cd6c <CVirtualGPIOPin::Write(unsigned int)>

0000830c <CActLED::Off()>:
    830c:	e1a03000 	mov	r3, r0
    8310:	e5900000 	ldr	r0, [r0]
    8314:	e3500000 	cmp	r0, #0
    8318:	e5d31008 	ldrb	r1, [r3, #8]
    831c:	0a000001 	beq	8328 <CActLED::Off()+0x1c>
    8320:	e2211001 	eor	r1, r1, #1
    8324:	ea00246b 	b	114d8 <CGPIOPin::Write(unsigned int)>
    8328:	e5930004 	ldr	r0, [r3, #4]
    832c:	e3500000 	cmp	r0, #0
    8330:	012fff1e 	bxeq	lr
    8334:	e2211001 	eor	r1, r1, #1
    8338:	ea00128b 	b	cd6c <CVirtualGPIOPin::Write(unsigned int)>

0000833c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    833c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8340:	e2516000 	subs	r6, r1, #0
    8344:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8348:	e1a04000 	mov	r4, r0
    834c:	e1a07002 	mov	r7, r2
    8350:	e1a08003 	mov	r8, r3
    8354:	e3a05001 	mov	r5, #1
    8358:	ea00000d 	b	8394 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x58>
    835c:	eb00245d 	bl	114d8 <CGPIOPin::Write(unsigned int)>
    8360:	e1a00007 	mov	r0, r7
    8364:	eb000fd7 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
    8368:	e5940000 	ldr	r0, [r4]
    836c:	e3500000 	cmp	r0, #0
    8370:	0a000010 	beq	83b8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x7c>
    8374:	e5d41008 	ldrb	r1, [r4, #8]
    8378:	e2211001 	eor	r1, r1, #1
    837c:	eb002455 	bl	114d8 <CGPIOPin::Write(unsigned int)>
    8380:	e1a00008 	mov	r0, r8
    8384:	e2855001 	add	r5, r5, #1
    8388:	eb000fce 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
    838c:	e1560005 	cmp	r6, r5
    8390:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    8394:	e5940000 	ldr	r0, [r4]
    8398:	e5d41008 	ldrb	r1, [r4, #8]
    839c:	e3500000 	cmp	r0, #0
    83a0:	1affffed 	bne	835c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    83a4:	e5940004 	ldr	r0, [r4, #4]
    83a8:	e3500000 	cmp	r0, #0
    83ac:	0affffeb 	beq	8360 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x24>
    83b0:	eb00126d 	bl	cd6c <CVirtualGPIOPin::Write(unsigned int)>
    83b4:	eaffffe9 	b	8360 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x24>
    83b8:	e5940004 	ldr	r0, [r4, #4]
    83bc:	e3500000 	cmp	r0, #0
    83c0:	0affffee 	beq	8380 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>
    83c4:	e5d41008 	ldrb	r1, [r4, #8]
    83c8:	e2211001 	eor	r1, r1, #1
    83cc:	eb001266 	bl	cd6c <CVirtualGPIOPin::Write(unsigned int)>
    83d0:	eaffffea 	b	8380 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>

000083d4 <CActLED::Get()>:
    83d4:	e3073ab8 	movw	r3, #31416	@ 0x7ab8
    83d8:	e3403001 	movt	r3, #1
    83dc:	e5930000 	ldr	r0, [r3]
    83e0:	e12fff1e 	bx	lr

000083e4 <CDeviceNameService::CDeviceNameService()>:
    83e4:	e3072abc 	movw	r2, #31420	@ 0x7abc
    83e8:	e3402001 	movt	r2, #1
    83ec:	e3a01000 	mov	r1, #0
    83f0:	e5801000 	str	r1, [r0]
    83f4:	e5801004 	str	r1, [r0, #4]
    83f8:	e592c000 	ldr	ip, [r2]
    83fc:	e15c0001 	cmp	ip, r1
    8400:	1a000001 	bne	840c <CDeviceNameService::CDeviceNameService()+0x28>
    8404:	e5820000 	str	r0, [r2]
    8408:	e12fff1e 	bx	lr
    840c:	e3061024 	movw	r1, #24612	@ 0x6024
    8410:	e3401001 	movt	r1, #1
    8414:	e306003c 	movw	r0, #24636	@ 0x603c
    8418:	e3400001 	movt	r0, #1
    841c:	e3a0201f 	mov	r2, #31
    8420:	e92d4010 	push	{r4, lr}
    8424:	eb002743 	bl	12138 <assertion_failed>

00008428 <CDeviceNameService::~CDeviceNameService()>:
    8428:	e92d4070 	push	{r4, r5, r6, lr}
    842c:	e1a05000 	mov	r5, r0
    8430:	e5904000 	ldr	r4, [r0]
    8434:	e3540000 	cmp	r4, #0
    8438:	0a00000b 	beq	846c <CDeviceNameService::~CDeviceNameService()+0x44>
    843c:	e1a03004 	mov	r3, r4
    8440:	e5944000 	ldr	r4, [r4]
    8444:	e5930004 	ldr	r0, [r3, #4]
    8448:	e3500000 	cmp	r0, #0
    844c:	0a000000 	beq	8454 <CDeviceNameService::~CDeviceNameService()+0x2c>
    8450:	eb001341 	bl	d15c <operator delete[](void*)>
    8454:	e5950000 	ldr	r0, [r5]
    8458:	e3a01010 	mov	r1, #16
    845c:	eb001344 	bl	d174 <operator delete(void*, unsigned int)>
    8460:	e3540000 	cmp	r4, #0
    8464:	e5854000 	str	r4, [r5]
    8468:	1afffff3 	bne	843c <CDeviceNameService::~CDeviceNameService()+0x14>
    846c:	e3073abc 	movw	r3, #31420	@ 0x7abc
    8470:	e3403001 	movt	r3, #1
    8474:	e3a02000 	mov	r2, #0
    8478:	e1a00005 	mov	r0, r5
    847c:	e5832000 	str	r2, [r3]
    8480:	e8bd8070 	pop	{r4, r5, r6, pc}

00008484 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    8484:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8488:	e1a05000 	mov	r5, r0
    848c:	e5900004 	ldr	r0, [r0, #4]
    8490:	e1a06001 	mov	r6, r1
    8494:	e1a07002 	mov	r7, r2
    8498:	e1a08003 	mov	r8, r3
    849c:	e3500000 	cmp	r0, #0
    84a0:	1a000016 	bne	8500 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
    84a4:	e3a00010 	mov	r0, #16
    84a8:	eb001319 	bl	d114 <operator new(unsigned int)>
    84ac:	e3560000 	cmp	r6, #0
    84b0:	e1a04000 	mov	r4, r0
    84b4:	0a000013 	beq	8508 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
    84b8:	e1a00006 	mov	r0, r6
    84bc:	eb000ff1 	bl	c488 <strlen>
    84c0:	e2800001 	add	r0, r0, #1
    84c4:	eb001318 	bl	d12c <operator new[](unsigned int)>
    84c8:	e1a01006 	mov	r1, r6
    84cc:	e5840004 	str	r0, [r4, #4]
    84d0:	eb00108c 	bl	c708 <strcpy>
    84d4:	e3570000 	cmp	r7, #0
    84d8:	0a000010 	beq	8520 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    84dc:	e895000c 	ldm	r5, {r2, r3}
    84e0:	e5842000 	str	r2, [r4]
    84e4:	e5847008 	str	r7, [r4, #8]
    84e8:	e3530000 	cmp	r3, #0
    84ec:	e5c4800c 	strb	r8, [r4, #12]
    84f0:	e5854000 	str	r4, [r5]
    84f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    84f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    84fc:	ea0021da 	b	10c6c <LeaveCritical>
    8500:	eb0021ae 	bl	10bc0 <EnterCritical>
    8504:	eaffffe6 	b	84a4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    8508:	e3061024 	movw	r1, #24612	@ 0x6024
    850c:	e3401001 	movt	r1, #1
    8510:	e3060048 	movw	r0, #24648	@ 0x6048
    8514:	e3400001 	movt	r0, #1
    8518:	e3a0203b 	mov	r2, #59	@ 0x3b
    851c:	eb002705 	bl	12138 <assertion_failed>
    8520:	e3061024 	movw	r1, #24612	@ 0x6024
    8524:	e3401001 	movt	r1, #1
    8528:	e3060054 	movw	r0, #24660	@ 0x6054
    852c:	e3400001 	movt	r0, #1
    8530:	e3a02040 	mov	r2, #64	@ 0x40
    8534:	eb0026ff 	bl	12138 <assertion_failed>

00008538 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    8538:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    853c:	e2515000 	subs	r5, r1, #0
    8540:	0a00003a 	beq	8630 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
    8544:	e1a08000 	mov	r8, r0
    8548:	e5900004 	ldr	r0, [r0, #4]
    854c:	e1a07002 	mov	r7, r2
    8550:	e3500000 	cmp	r0, #0
    8554:	1a000019 	bne	85c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x88>
    8558:	e5984000 	ldr	r4, [r8]
    855c:	e3540000 	cmp	r4, #0
    8560:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8564:	e3a06000 	mov	r6, #0
    8568:	ea00000b 	b	859c <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    856c:	e1a00005 	mov	r0, r5
    8570:	eb000fce 	bl	c4b0 <strcmp>
    8574:	e3500000 	cmp	r0, #0
    8578:	1a000002 	bne	8588 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    857c:	e5d4300c 	ldrb	r3, [r4, #12]
    8580:	e1530007 	cmp	r3, r7
    8584:	0a000016 	beq	85e4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
    8588:	e5943000 	ldr	r3, [r4]
    858c:	e1a06004 	mov	r6, r4
    8590:	e3530000 	cmp	r3, #0
    8594:	0a00000d 	beq	85d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
    8598:	e1a04003 	mov	r4, r3
    859c:	e5941004 	ldr	r1, [r4, #4]
    85a0:	e3510000 	cmp	r1, #0
    85a4:	1afffff0 	bne	856c <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    85a8:	e3061024 	movw	r1, #24612	@ 0x6024
    85ac:	e3401001 	movt	r1, #1
    85b0:	e3060064 	movw	r0, #24676	@ 0x6064
    85b4:	e3400001 	movt	r0, #1
    85b8:	e3a0205e 	mov	r2, #94	@ 0x5e
    85bc:	eb0026dd 	bl	12138 <assertion_failed>
    85c0:	eb00217e 	bl	10bc0 <EnterCritical>
    85c4:	e5984000 	ldr	r4, [r8]
    85c8:	e3540000 	cmp	r4, #0
    85cc:	1affffe4 	bne	8564 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    85d0:	e5983004 	ldr	r3, [r8, #4]
    85d4:	e3530000 	cmp	r3, #0
    85d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    85dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    85e0:	ea0021a1 	b	10c6c <LeaveCritical>
    85e4:	e5943000 	ldr	r3, [r4]
    85e8:	e3560000 	cmp	r6, #0
    85ec:	15863000 	strne	r3, [r6]
    85f0:	0a00000c 	beq	8628 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
    85f4:	e5983004 	ldr	r3, [r8, #4]
    85f8:	e3530000 	cmp	r3, #0
    85fc:	1a000007 	bne	8620 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
    8600:	e5940004 	ldr	r0, [r4, #4]
    8604:	e3500000 	cmp	r0, #0
    8608:	0a000000 	beq	8610 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
    860c:	eb0012d2 	bl	d15c <operator delete[](void*)>
    8610:	e1a00004 	mov	r0, r4
    8614:	e3a01010 	mov	r1, #16
    8618:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    861c:	ea0012d4 	b	d174 <operator delete(void*, unsigned int)>
    8620:	eb002191 	bl	10c6c <LeaveCritical>
    8624:	eafffff5 	b	8600 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
    8628:	e5883000 	str	r3, [r8]
    862c:	eafffff0 	b	85f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
    8630:	e3061024 	movw	r1, #24612	@ 0x6024
    8634:	e3401001 	movt	r1, #1
    8638:	e3060048 	movw	r0, #24648	@ 0x6048
    863c:	e3400001 	movt	r0, #1
    8640:	e3a02056 	mov	r2, #86	@ 0x56
    8644:	eb0026bb 	bl	12138 <assertion_failed>

00008648 <CDeviceNameService::GetDevice(char const*, bool)>:
    8648:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    864c:	e2515000 	subs	r5, r1, #0
    8650:	e24dd00c 	sub	sp, sp, #12
    8654:	0a000026 	beq	86f4 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    8658:	e1a07000 	mov	r7, r0
    865c:	e5900004 	ldr	r0, [r0, #4]
    8660:	e1a06002 	mov	r6, r2
    8664:	e3500000 	cmp	r0, #0
    8668:	1a000016 	bne	86c8 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
    866c:	e5974000 	ldr	r4, [r7]
    8670:	e3540000 	cmp	r4, #0
    8674:	1a00000a 	bne	86a4 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    8678:	ea00001a 	b	86e8 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
    867c:	e1a00005 	mov	r0, r5
    8680:	eb000f8a 	bl	c4b0 <strcmp>
    8684:	e3500000 	cmp	r0, #0
    8688:	1a000002 	bne	8698 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
    868c:	e5d4300c 	ldrb	r3, [r4, #12]
    8690:	e1530006 	cmp	r3, r6
    8694:	0a00001c 	beq	870c <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    8698:	e5944000 	ldr	r4, [r4]
    869c:	e3540000 	cmp	r4, #0
    86a0:	0a00000c 	beq	86d8 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
    86a4:	e5941004 	ldr	r1, [r4, #4]
    86a8:	e3510000 	cmp	r1, #0
    86ac:	1afffff2 	bne	867c <CDeviceNameService::GetDevice(char const*, bool)+0x34>
    86b0:	e3061024 	movw	r1, #24612	@ 0x6024
    86b4:	e3401001 	movt	r1, #1
    86b8:	e3060064 	movw	r0, #24676	@ 0x6064
    86bc:	e3400001 	movt	r0, #1
    86c0:	e3a02092 	mov	r2, #146	@ 0x92
    86c4:	eb00269b 	bl	12138 <assertion_failed>
    86c8:	eb00213c 	bl	10bc0 <EnterCritical>
    86cc:	e5974000 	ldr	r4, [r7]
    86d0:	e3540000 	cmp	r4, #0
    86d4:	1afffff2 	bne	86a4 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    86d8:	e5973004 	ldr	r3, [r7, #4]
    86dc:	e3530000 	cmp	r3, #0
    86e0:	0a000000 	beq	86e8 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
    86e4:	eb002160 	bl	10c6c <LeaveCritical>
    86e8:	e3a00000 	mov	r0, #0
    86ec:	e28dd00c 	add	sp, sp, #12
    86f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    86f4:	e3061024 	movw	r1, #24612	@ 0x6024
    86f8:	e3401001 	movt	r1, #1
    86fc:	e3060048 	movw	r0, #24648	@ 0x6048
    8700:	e3400001 	movt	r0, #1
    8704:	e3a0208b 	mov	r2, #139	@ 0x8b
    8708:	eb00268a 	bl	12138 <assertion_failed>
    870c:	e5973004 	ldr	r3, [r7, #4]
    8710:	e5940008 	ldr	r0, [r4, #8]
    8714:	e3530000 	cmp	r3, #0
    8718:	1a000007 	bne	873c <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
    871c:	e3500000 	cmp	r0, #0
    8720:	1afffff1 	bne	86ec <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    8724:	e3061024 	movw	r1, #24612	@ 0x6024
    8728:	e3401001 	movt	r1, #1
    872c:	e3060078 	movw	r0, #24696	@ 0x6078
    8730:	e3400001 	movt	r0, #1
    8734:	e3a0209a 	mov	r2, #154	@ 0x9a
    8738:	eb00267e 	bl	12138 <assertion_failed>
    873c:	e58d0004 	str	r0, [sp, #4]
    8740:	eb002149 	bl	10c6c <LeaveCritical>
    8744:	e59d0004 	ldr	r0, [sp, #4]
    8748:	eafffff3 	b	871c <CDeviceNameService::GetDevice(char const*, bool)+0xd4>

0000874c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
    874c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8750:	e1a07000 	mov	r7, r0
    8754:	e5900004 	ldr	r0, [r0, #4]
    8758:	e1a05001 	mov	r5, r1
    875c:	e1a06002 	mov	r6, r2
    8760:	e3500000 	cmp	r0, #0
    8764:	1a000013 	bne	87b8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x6c>
    8768:	e5974000 	ldr	r4, [r7]
    876c:	e3540000 	cmp	r4, #0
    8770:	1a000003 	bne	8784 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    8774:	ea000015 	b	87d0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x84>
    8778:	e5944000 	ldr	r4, [r4]
    877c:	e3540000 	cmp	r4, #0
    8780:	0a000010 	beq	87c8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x7c>
    8784:	e5d4200c 	ldrb	r2, [r4, #12]
    8788:	e1a03006 	mov	r3, r6
    878c:	e5941004 	ldr	r1, [r4, #4]
    8790:	e5940008 	ldr	r0, [r4, #8]
    8794:	e12fff35 	blx	r5
    8798:	e2508000 	subs	r8, r0, #0
    879c:	1afffff5 	bne	8778 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x2c>
    87a0:	e5973004 	ldr	r3, [r7, #4]
    87a4:	e3530000 	cmp	r3, #0
    87a8:	0a000000 	beq	87b0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>
    87ac:	eb00212e 	bl	10c6c <LeaveCritical>
    87b0:	e1a00008 	mov	r0, r8
    87b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    87b8:	eb002100 	bl	10bc0 <EnterCritical>
    87bc:	e5974000 	ldr	r4, [r7]
    87c0:	e3540000 	cmp	r4, #0
    87c4:	1affffee 	bne	8784 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    87c8:	e3a08001 	mov	r8, #1
    87cc:	eafffff3 	b	87a0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
    87d0:	e3a08001 	mov	r8, #1
    87d4:	eafffff5 	b	87b0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>

000087d8 <CDeviceNameService::Get()>:
    87d8:	e3073abc 	movw	r3, #31420	@ 0x7abc
    87dc:	e3403001 	movt	r3, #1
    87e0:	e5930000 	ldr	r0, [r3]
    87e4:	e3500000 	cmp	r0, #0
    87e8:	112fff1e 	bxne	lr
    87ec:	e3061024 	movw	r1, #24612	@ 0x6024
    87f0:	e3401001 	movt	r1, #1
    87f4:	e3060088 	movw	r0, #24712	@ 0x6088
    87f8:	e3400001 	movt	r0, #1
    87fc:	e3a020e5 	mov	r2, #229	@ 0xe5
    8800:	e92d4010 	push	{r4, lr}
    8804:	eb00264b 	bl	12138 <assertion_failed>

00008808 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    8808:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    880c:	e1a06001 	mov	r6, r1
    8810:	e1a07002 	mov	r7, r2
    8814:	e24dd010 	sub	sp, sp, #16
    8818:	e1a04000 	mov	r4, r0
    881c:	e1a0000d 	mov	r0, sp
    8820:	e1a05003 	mov	r5, r3
    8824:	e5dd8028 	ldrb	r8, [sp, #40]	@ 0x28
    8828:	eb00052f 	bl	9cec <CString::CString()>
    882c:	e1a03007 	mov	r3, r7
    8830:	e1a02006 	mov	r2, r6
    8834:	e1a0000d 	mov	r0, sp
    8838:	e3061094 	movw	r1, #24724	@ 0x6094
    883c:	e3401001 	movt	r1, #1
    8840:	eb000b0e 	bl	b480 <CString::Format(char const*, ...)>
    8844:	e1a0000d 	mov	r0, sp
    8848:	eb00055f 	bl	9dcc <CString::operator char const*() const>
    884c:	e1a03008 	mov	r3, r8
    8850:	e1a01000 	mov	r1, r0
    8854:	e1a02005 	mov	r2, r5
    8858:	e1a00004 	mov	r0, r4
    885c:	ebffff08 	bl	8484 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8860:	e1a0000d 	mov	r0, sp
    8864:	eb0004ed 	bl	9c20 <CString::~CString()>
    8868:	e28dd010 	add	sp, sp, #16
    886c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008870 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8870:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8874:	e1a06001 	mov	r6, r1
    8878:	e1a07002 	mov	r7, r2
    887c:	e24dd014 	sub	sp, sp, #20
    8880:	e1a04000 	mov	r4, r0
    8884:	e1a0000d 	mov	r0, sp
    8888:	e1a05003 	mov	r5, r3
    888c:	eb000516 	bl	9cec <CString::CString()>
    8890:	e1a03007 	mov	r3, r7
    8894:	e1a02006 	mov	r2, r6
    8898:	e1a0000d 	mov	r0, sp
    889c:	e3061094 	movw	r1, #24724	@ 0x6094
    88a0:	e3401001 	movt	r1, #1
    88a4:	eb000af5 	bl	b480 <CString::Format(char const*, ...)>
    88a8:	e1a0000d 	mov	r0, sp
    88ac:	eb000546 	bl	9dcc <CString::operator char const*() const>
    88b0:	e1a02005 	mov	r2, r5
    88b4:	e1a01000 	mov	r1, r0
    88b8:	e1a00004 	mov	r0, r4
    88bc:	ebffff1d 	bl	8538 <CDeviceNameService::RemoveDevice(char const*, bool)>
    88c0:	e1a0000d 	mov	r0, sp
    88c4:	eb0004d5 	bl	9c20 <CString::~CString()>
    88c8:	e28dd014 	add	sp, sp, #20
    88cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000088d0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    88d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    88d4:	e1a06001 	mov	r6, r1
    88d8:	e1a07002 	mov	r7, r2
    88dc:	e24dd014 	sub	sp, sp, #20
    88e0:	e1a04000 	mov	r4, r0
    88e4:	e1a0000d 	mov	r0, sp
    88e8:	e1a05003 	mov	r5, r3
    88ec:	eb0004fe 	bl	9cec <CString::CString()>
    88f0:	e1a03007 	mov	r3, r7
    88f4:	e1a02006 	mov	r2, r6
    88f8:	e1a0000d 	mov	r0, sp
    88fc:	e3061094 	movw	r1, #24724	@ 0x6094
    8900:	e3401001 	movt	r1, #1
    8904:	eb000add 	bl	b480 <CString::Format(char const*, ...)>
    8908:	e1a0000d 	mov	r0, sp
    890c:	eb00052e 	bl	9dcc <CString::operator char const*() const>
    8910:	e1a02005 	mov	r2, r5
    8914:	e1a01000 	mov	r1, r0
    8918:	e1a00004 	mov	r0, r4
    891c:	ebffff49 	bl	8648 <CDeviceNameService::GetDevice(char const*, bool)>
    8920:	e1a04000 	mov	r4, r0
    8924:	e1a0000d 	mov	r0, sp
    8928:	eb0004bc 	bl	9c20 <CString::~CString()>
    892c:	e1a00004 	mov	r0, r4
    8930:	e28dd014 	add	sp, sp, #20
    8934:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008938 <CDeviceNameService::ListDevices(CDevice*)>:
    8938:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    893c:	e2517000 	subs	r7, r1, #0
    8940:	e24dd018 	sub	sp, sp, #24
    8944:	0a000038 	beq	8a2c <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8948:	e5904000 	ldr	r4, [r0]
    894c:	e3540000 	cmp	r4, #0
    8950:	0a000033 	beq	8a24 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8954:	e30680ac 	movw	r8, #24748	@ 0x60ac
    8958:	e3408001 	movt	r8, #1
    895c:	e3a05000 	mov	r5, #0
    8960:	ea000019 	b	89cc <CDeviceNameService::ListDevices(CDevice*)+0x94>
    8964:	e5d4200c 	ldrb	r2, [r4, #12]
    8968:	e2855001 	add	r5, r5, #1
    896c:	e2159003 	ands	r9, r5, #3
    8970:	e1a01008 	mov	r1, r8
    8974:	13a0c020 	movne	ip, #32
    8978:	03a0c00a 	moveq	ip, #10
    897c:	e2622063 	rsb	r2, r2, #99	@ 0x63
    8980:	e58dc000 	str	ip, [sp]
    8984:	e28d0008 	add	r0, sp, #8
    8988:	eb000abc 	bl	b480 <CString::Format(char const*, ...)>
    898c:	e5973000 	ldr	r3, [r7]
    8990:	e28d0008 	add	r0, sp, #8
    8994:	e593a00c 	ldr	sl, [r3, #12]
    8998:	eb00050b 	bl	9dcc <CString::operator char const*() const>
    899c:	e1a06000 	mov	r6, r0
    89a0:	e28d0008 	add	r0, sp, #8
    89a4:	eb00054c 	bl	9edc <CString::GetLength() const>
    89a8:	e1a01006 	mov	r1, r6
    89ac:	e1a02000 	mov	r2, r0
    89b0:	e1a00007 	mov	r0, r7
    89b4:	e12fff3a 	blx	sl
    89b8:	e5944000 	ldr	r4, [r4]
    89bc:	e28d0008 	add	r0, sp, #8
    89c0:	eb000496 	bl	9c20 <CString::~CString()>
    89c4:	e3540000 	cmp	r4, #0
    89c8:	0a00000a 	beq	89f8 <CDeviceNameService::ListDevices(CDevice*)+0xc0>
    89cc:	e28d0008 	add	r0, sp, #8
    89d0:	eb0004c5 	bl	9cec <CString::CString()>
    89d4:	e5943004 	ldr	r3, [r4, #4]
    89d8:	e3530000 	cmp	r3, #0
    89dc:	1affffe0 	bne	8964 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    89e0:	e3061024 	movw	r1, #24612	@ 0x6024
    89e4:	e3401001 	movt	r1, #1
    89e8:	e3060064 	movw	r0, #24676	@ 0x6064
    89ec:	e3400001 	movt	r0, #1
    89f0:	e3a020d2 	mov	r2, #210	@ 0xd2
    89f4:	eb0025cf 	bl	12138 <assertion_failed>
    89f8:	e3590000 	cmp	r9, #0
    89fc:	0a000008 	beq	8a24 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8a00:	e5973000 	ldr	r3, [r7]
    8a04:	e3a02001 	mov	r2, #1
    8a08:	e1a00007 	mov	r0, r7
    8a0c:	e30610b8 	movw	r1, #24760	@ 0x60b8
    8a10:	e3401001 	movt	r1, #1
    8a14:	e593300c 	ldr	r3, [r3, #12]
    8a18:	e28dd018 	add	sp, sp, #24
    8a1c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8a20:	e12fff13 	bx	r3
    8a24:	e28dd018 	add	sp, sp, #24
    8a28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8a2c:	e3061024 	movw	r1, #24612	@ 0x6024
    8a30:	e3401001 	movt	r1, #1
    8a34:	e306009c 	movw	r0, #24732	@ 0x609c
    8a38:	e3400001 	movt	r0, #1
    8a3c:	e3a020c9 	mov	r2, #201	@ 0xc9
    8a40:	eb0025bc 	bl	12138 <assertion_failed>

00008a44 <CKernelOptions::~CKernelOptions()>:
    8a44:	e92d4070 	push	{r4, r5, r6, lr}
    8a48:	e1a05000 	mov	r5, r0
    8a4c:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
    8a50:	e3540000 	cmp	r4, #0
    8a54:	0a00000f 	beq	8a98 <CKernelOptions::~CKernelOptions()+0x54>
    8a58:	e5940008 	ldr	r0, [r4, #8]
    8a5c:	e5943000 	ldr	r3, [r4]
    8a60:	e3500000 	cmp	r0, #0
    8a64:	e5853890 	str	r3, [r5, #2192]	@ 0x890
    8a68:	0a000000 	beq	8a70 <CKernelOptions::~CKernelOptions()+0x2c>
    8a6c:	eb0011ba 	bl	d15c <operator delete[](void*)>
    8a70:	e5940004 	ldr	r0, [r4, #4]
    8a74:	e3500000 	cmp	r0, #0
    8a78:	0a000000 	beq	8a80 <CKernelOptions::~CKernelOptions()+0x3c>
    8a7c:	eb0011b6 	bl	d15c <operator delete[](void*)>
    8a80:	e1a00004 	mov	r0, r4
    8a84:	e3a0100c 	mov	r1, #12
    8a88:	eb0011b9 	bl	d174 <operator delete(void*, unsigned int)>
    8a8c:	e5954890 	ldr	r4, [r5, #2192]	@ 0x890
    8a90:	e3540000 	cmp	r4, #0
    8a94:	1affffef 	bne	8a58 <CKernelOptions::~CKernelOptions()+0x14>
    8a98:	e3073ac0 	movw	r3, #31424	@ 0x7ac0
    8a9c:	e3403001 	movt	r3, #1
    8aa0:	e3a02000 	mov	r2, #0
    8aa4:	e1a00005 	mov	r0, r5
    8aa8:	e5832000 	str	r2, [r3]
    8aac:	e8bd8070 	pop	{r4, r5, r6, pc}

00008ab0 <CKernelOptions::GetWidth() const>:
    8ab0:	e5900810 	ldr	r0, [r0, #2064]	@ 0x810
    8ab4:	e12fff1e 	bx	lr

00008ab8 <CKernelOptions::GetHeight() const>:
    8ab8:	e5900814 	ldr	r0, [r0, #2068]	@ 0x814
    8abc:	e12fff1e 	bx	lr

00008ac0 <CKernelOptions::GetLogDevice() const>:
    8ac0:	e2800e81 	add	r0, r0, #2064	@ 0x810
    8ac4:	e2800008 	add	r0, r0, #8
    8ac8:	e12fff1e 	bx	lr

00008acc <CKernelOptions::GetLogLevel() const>:
    8acc:	e590082c 	ldr	r0, [r0, #2092]	@ 0x82c
    8ad0:	e12fff1e 	bx	lr

00008ad4 <CKernelOptions::GetKeyMap() const>:
    8ad4:	e2800e83 	add	r0, r0, #2096	@ 0x830
    8ad8:	e12fff1e 	bx	lr

00008adc <CKernelOptions::GetUSBPowerDelay() const>:
    8adc:	e5900834 	ldr	r0, [r0, #2100]	@ 0x834
    8ae0:	e12fff1e 	bx	lr

00008ae4 <CKernelOptions::GetUSBFullSpeed() const>:
    8ae4:	e5d00838 	ldrb	r0, [r0, #2104]	@ 0x838
    8ae8:	e12fff1e 	bx	lr

00008aec <CKernelOptions::GetUSBBoost() const>:
    8aec:	e5d00839 	ldrb	r0, [r0, #2105]	@ 0x839
    8af0:	e12fff1e 	bx	lr

00008af4 <CKernelOptions::GetUSBIgnore() const>:
    8af4:	e2800e83 	add	r0, r0, #2096	@ 0x830
    8af8:	e280000a 	add	r0, r0, #10
    8afc:	e12fff1e 	bx	lr

00008b00 <CKernelOptions::GetUSBSoundChannels() const>:
    8b00:	e2800e85 	add	r0, r0, #2128	@ 0x850
    8b04:	e12fff1e 	bx	lr

00008b08 <CKernelOptions::GetSoundDevice() const>:
    8b08:	e2800e85 	add	r0, r0, #2128	@ 0x850
    8b0c:	e2800008 	add	r0, r0, #8
    8b10:	e12fff1e 	bx	lr

00008b14 <CKernelOptions::GetSoundOption() const>:
    8b14:	e590086c 	ldr	r0, [r0, #2156]	@ 0x86c
    8b18:	e12fff1e 	bx	lr

00008b1c <CKernelOptions::GetCPUSpeed() const>:
    8b1c:	e5d00870 	ldrb	r0, [r0, #2160]	@ 0x870
    8b20:	e12fff1e 	bx	lr

00008b24 <CKernelOptions::GetSoCMaxTemp() const>:
    8b24:	e5900874 	ldr	r0, [r0, #2164]	@ 0x874
    8b28:	e12fff1e 	bx	lr

00008b2c <CKernelOptions::GetGPIOFanPin() const>:
    8b2c:	e5900878 	ldr	r0, [r0, #2168]	@ 0x878
    8b30:	e12fff1e 	bx	lr

00008b34 <CKernelOptions::GetTouchScreen() const>:
    8b34:	e5d0387c 	ldrb	r3, [r0, #2172]	@ 0x87c
    8b38:	e3530000 	cmp	r3, #0
    8b3c:	12800d22 	addne	r0, r0, #2176	@ 0x880
    8b40:	01a00003 	moveq	r0, r3
    8b44:	e12fff1e 	bx	lr

00008b48 <CKernelOptions::GetBacklight() const>:
    8b48:	e5900894 	ldr	r0, [r0, #2196]	@ 0x894
    8b4c:	e12fff1e 	bx	lr

00008b50 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
    8b50:	e92d4070 	push	{r4, r5, r6, lr}
    8b54:	e1a06002 	mov	r6, r2
    8b58:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
    8b5c:	e3540000 	cmp	r4, #0
    8b60:	0a00000b 	beq	8b94 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
    8b64:	e1a05001 	mov	r5, r1
    8b68:	ea000002 	b	8b78 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x28>
    8b6c:	e5944000 	ldr	r4, [r4]
    8b70:	e3540000 	cmp	r4, #0
    8b74:	0a000006 	beq	8b94 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
    8b78:	e5940004 	ldr	r0, [r4, #4]
    8b7c:	e1a01005 	mov	r1, r5
    8b80:	eb000e4a 	bl	c4b0 <strcmp>
    8b84:	e3500000 	cmp	r0, #0
    8b88:	1afffff7 	bne	8b6c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x1c>
    8b8c:	e5940008 	ldr	r0, [r4, #8]
    8b90:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b94:	e1a00006 	mov	r0, r6
    8b98:	e8bd8070 	pop	{r4, r5, r6, pc}

00008b9c <CKernelOptions::Get()>:
    8b9c:	e3073ac0 	movw	r3, #31424	@ 0x7ac0
    8ba0:	e3403001 	movt	r3, #1
    8ba4:	e5930000 	ldr	r0, [r3]
    8ba8:	e12fff1e 	bx	lr

00008bac <CKernelOptions::GetToken()>:
    8bac:	e1a01000 	mov	r1, r0
    8bb0:	e590080c 	ldr	r0, [r0, #2060]	@ 0x80c
    8bb4:	e1d030d0 	ldrsb	r3, [r0]
    8bb8:	e3530000 	cmp	r3, #0
    8bbc:	1a000005 	bne	8bd8 <CKernelOptions::GetToken()+0x2c>
    8bc0:	ea000017 	b	8c24 <CKernelOptions::GetToken()+0x78>
    8bc4:	e2800001 	add	r0, r0, #1
    8bc8:	e581080c 	str	r0, [r1, #2060]	@ 0x80c
    8bcc:	e1d030d0 	ldrsb	r3, [r0]
    8bd0:	e3530000 	cmp	r3, #0
    8bd4:	0a000012 	beq	8c24 <CKernelOptions::GetToken()+0x78>
    8bd8:	e3530020 	cmp	r3, #32
    8bdc:	0afffff8 	beq	8bc4 <CKernelOptions::GetToken()+0x18>
    8be0:	e591380c 	ldr	r3, [r1, #2060]	@ 0x80c
    8be4:	e1d320d0 	ldrsb	r2, [r3]
    8be8:	e3520000 	cmp	r2, #0
    8bec:	1a000004 	bne	8c04 <CKernelOptions::GetToken()+0x58>
    8bf0:	e12fff1e 	bx	lr
    8bf4:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
    8bf8:	e1d320d0 	ldrsb	r2, [r3]
    8bfc:	e3520000 	cmp	r2, #0
    8c00:	012fff1e 	bxeq	lr
    8c04:	e3520020 	cmp	r2, #32
    8c08:	e1a02003 	mov	r2, r3
    8c0c:	e2833001 	add	r3, r3, #1
    8c10:	1afffff7 	bne	8bf4 <CKernelOptions::GetToken()+0x48>
    8c14:	e3a0c000 	mov	ip, #0
    8c18:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
    8c1c:	e5c2c000 	strb	ip, [r2]
    8c20:	e12fff1e 	bx	lr
    8c24:	e3a00000 	mov	r0, #0
    8c28:	e12fff1e 	bx	lr

00008c2c <CKernelOptions::GetOptionValue(char*)>:
    8c2c:	e1d030d0 	ldrsb	r3, [r0]
    8c30:	e3530000 	cmp	r3, #0
    8c34:	1a000003 	bne	8c48 <CKernelOptions::GetOptionValue(char*)+0x1c>
    8c38:	ea000007 	b	8c5c <CKernelOptions::GetOptionValue(char*)+0x30>
    8c3c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    8c40:	e3530000 	cmp	r3, #0
    8c44:	0a000004 	beq	8c5c <CKernelOptions::GetOptionValue(char*)+0x30>
    8c48:	e353003d 	cmp	r3, #61	@ 0x3d
    8c4c:	1afffffa 	bne	8c3c <CKernelOptions::GetOptionValue(char*)+0x10>
    8c50:	e3a03000 	mov	r3, #0
    8c54:	e4c03001 	strb	r3, [r0], #1
    8c58:	e12fff1e 	bx	lr
    8c5c:	e1a00003 	mov	r0, r3
    8c60:	e12fff1e 	bx	lr

00008c64 <CKernelOptions::GetDecimal(char const*)>:
    8c64:	e2501000 	subs	r1, r0, #0
    8c68:	0a000015 	beq	8cc4 <CKernelOptions::GetDecimal(char const*)+0x60>
    8c6c:	e1d130d0 	ldrsb	r3, [r1]
    8c70:	e3530000 	cmp	r3, #0
    8c74:	0a000012 	beq	8cc4 <CKernelOptions::GetDecimal(char const*)+0x60>
    8c78:	e3a00000 	mov	r0, #0
    8c7c:	e3a0c00a 	mov	ip, #10
    8c80:	ea000007 	b	8ca4 <CKernelOptions::GetDecimal(char const*)+0x40>
    8c84:	e3730001 	cmn	r3, #1
    8c88:	13a02000 	movne	r2, #0
    8c8c:	03a02001 	moveq	r2, #1
    8c90:	e1500003 	cmp	r0, r3
    8c94:	83822001 	orrhi	r2, r2, #1
    8c98:	e1a00003 	mov	r0, r3
    8c9c:	e3520000 	cmp	r2, #0
    8ca0:	1a000007 	bne	8cc4 <CKernelOptions::GetDecimal(char const*)+0x60>
    8ca4:	e0d120d1 	ldrsb	r2, [r1], #1
    8ca8:	e3520000 	cmp	r2, #0
    8cac:	e2423030 	sub	r3, r2, #48	@ 0x30
    8cb0:	012fff1e 	bxeq	lr
    8cb4:	e6ef2073 	uxtb	r2, r3
    8cb8:	e023309c 	mla	r3, ip, r0, r3
    8cbc:	e3520009 	cmp	r2, #9
    8cc0:	9affffef 	bls	8c84 <CKernelOptions::GetDecimal(char const*)+0x20>
    8cc4:	e3e00000 	mvn	r0, #0
    8cc8:	e12fff1e 	bx	lr

00008ccc <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
    8ccc:	e92d4070 	push	{r4, r5, r6, lr}
    8cd0:	e1a06002 	mov	r6, r2
    8cd4:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
    8cd8:	e3540000 	cmp	r4, #0
    8cdc:	0a00000f 	beq	8d20 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
    8ce0:	e1a05001 	mov	r5, r1
    8ce4:	ea000002 	b	8cf4 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x28>
    8ce8:	e5944000 	ldr	r4, [r4]
    8cec:	e3540000 	cmp	r4, #0
    8cf0:	0a00000a 	beq	8d20 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
    8cf4:	e5940004 	ldr	r0, [r4, #4]
    8cf8:	e1a01005 	mov	r1, r5
    8cfc:	eb000deb 	bl	c4b0 <strcmp>
    8d00:	e3500000 	cmp	r0, #0
    8d04:	1afffff7 	bne	8ce8 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x1c>
    8d08:	e5940008 	ldr	r0, [r4, #8]
    8d0c:	e3500000 	cmp	r0, #0
    8d10:	0a000002 	beq	8d20 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
    8d14:	ebffffd2 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    8d18:	e3700001 	cmn	r0, #1
    8d1c:	18bd8070 	popne	{r4, r5, r6, pc}
    8d20:	e1a00006 	mov	r0, r6
    8d24:	e8bd8070 	pop	{r4, r5, r6, pc}

00008d28 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
    8d28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d2c:	e3520000 	cmp	r2, #0
    8d30:	e24dd008 	sub	sp, sp, #8
    8d34:	028d7004 	addeq	r7, sp, #4
    8d38:	0a000023 	beq	8dcc <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
    8d3c:	e306698c 	movw	r6, #27020	@ 0x698c
    8d40:	e3406001 	movt	r6, #1
    8d44:	e1a05001 	mov	r5, r1
    8d48:	e2428001 	sub	r8, r2, #1
    8d4c:	e28d7004 	add	r7, sp, #4
    8d50:	e3a0400a 	mov	r4, #10
    8d54:	e1a02007 	mov	r2, r7
    8d58:	e1a01006 	mov	r1, r6
    8d5c:	eb000ecc 	bl	c894 <strtok_r>
    8d60:	e250c000 	subs	ip, r0, #0
    8d64:	0a000021 	beq	8df0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    8d68:	e1dc00d0 	ldrsb	r0, [ip]
    8d6c:	e3500000 	cmp	r0, #0
    8d70:	0a00001f 	beq	8df4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
    8d74:	e3a01000 	mov	r1, #0
    8d78:	ea00000b 	b	8dac <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
    8d7c:	e6ef2073 	uxtb	r2, r3
    8d80:	e0233194 	mla	r3, r4, r1, r3
    8d84:	e3520009 	cmp	r2, #9
    8d88:	8a000018 	bhi	8df0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    8d8c:	e3730001 	cmn	r3, #1
    8d90:	13a02000 	movne	r2, #0
    8d94:	03a02001 	moveq	r2, #1
    8d98:	e1510003 	cmp	r1, r3
    8d9c:	83822001 	orrhi	r2, r2, #1
    8da0:	e1a01003 	mov	r1, r3
    8da4:	e3520000 	cmp	r2, #0
    8da8:	1a000010 	bne	8df0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    8dac:	e0dc00d1 	ldrsb	r0, [ip], #1
    8db0:	e2403030 	sub	r3, r0, #48	@ 0x30
    8db4:	e3500000 	cmp	r0, #0
    8db8:	1affffef 	bne	8d7c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x54>
    8dbc:	e2488001 	sub	r8, r8, #1
    8dc0:	e4851004 	str	r1, [r5], #4
    8dc4:	e3780001 	cmn	r8, #1
    8dc8:	1affffe1 	bne	8d54 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x2c>
    8dcc:	e1a02007 	mov	r2, r7
    8dd0:	e3a00000 	mov	r0, #0
    8dd4:	e306198c 	movw	r1, #27020	@ 0x698c
    8dd8:	e3401001 	movt	r1, #1
    8ddc:	eb000eac 	bl	c894 <strtok_r>
    8de0:	e16f0f10 	clz	r0, r0
    8de4:	e1a002a0 	lsr	r0, r0, #5
    8de8:	e28dd008 	add	sp, sp, #8
    8dec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8df0:	e3a00000 	mov	r0, #0
    8df4:	e28dd008 	add	sp, sp, #8
    8df8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008dfc <CKernelOptions::CKernelOptions()>:
    8dfc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e00:	e1a04000 	mov	r4, r0
    8e04:	e3002838 	movw	r2, #2104	@ 0x838
    8e08:	e2807e81 	add	r7, r0, #2064	@ 0x810
    8e0c:	e3a05000 	mov	r5, #0
    8e10:	e2877008 	add	r7, r7, #8
    8e14:	e24dd01c 	sub	sp, sp, #28
    8e18:	e5805810 	str	r5, [r0, #2064]	@ 0x810
    8e1c:	e3a03004 	mov	r3, #4
    8e20:	e5805814 	str	r5, [r0, #2068]	@ 0x814
    8e24:	e2849e83 	add	r9, r4, #2096	@ 0x830
    8e28:	e580382c 	str	r3, [r0, #2092]	@ 0x82c
    8e2c:	e30610bc 	movw	r1, #24764	@ 0x60bc
    8e30:	e3401001 	movt	r1, #1
    8e34:	e5805834 	str	r5, [r0, #2100]	@ 0x834
    8e38:	e3a0303c 	mov	r3, #60	@ 0x3c
    8e3c:	e18050b2 	strh	r5, [r0, r2]
    8e40:	e5803874 	str	r3, [r0, #2164]	@ 0x874
    8e44:	e5805850 	str	r5, [r0, #2128]	@ 0x850
    8e48:	e5805854 	str	r5, [r0, #2132]	@ 0x854
    8e4c:	e580586c 	str	r5, [r0, #2156]	@ 0x86c
    8e50:	e5c05870 	strb	r5, [r0, #2160]	@ 0x870
    8e54:	e1a00007 	mov	r0, r7
    8e58:	e5845878 	str	r5, [r4, #2168]	@ 0x878
    8e5c:	e5c4587c 	strb	r5, [r4, #2172]	@ 0x87c
    8e60:	e5845890 	str	r5, [r4, #2192]	@ 0x890
    8e64:	e5845894 	str	r5, [r4, #2196]	@ 0x894
    8e68:	eb000e26 	bl	c708 <strcpy>
    8e6c:	e1a00009 	mov	r0, r9
    8e70:	e30610c4 	movw	r1, #24772	@ 0x60c4
    8e74:	e3401001 	movt	r1, #1
    8e78:	eb000e22 	bl	c708 <strcpy>
    8e7c:	e3073ac0 	movw	r3, #31424	@ 0x7ac0
    8e80:	e3403001 	movt	r3, #1
    8e84:	e1a01005 	mov	r1, r5
    8e88:	e28d0010 	add	r0, sp, #16
    8e8c:	e5c4583a 	strb	r5, [r4, #2106]	@ 0x83a
    8e90:	e5c45858 	strb	r5, [r4, #2136]	@ 0x858
    8e94:	e5834000 	str	r4, [r3]
    8e98:	eb0027bc 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    8e9c:	e1a02004 	mov	r2, r4
    8ea0:	e3a01001 	mov	r1, #1
    8ea4:	e3401005 	movt	r1, #5
    8ea8:	e28d0010 	add	r0, sp, #16
    8eac:	e58d5000 	str	r5, [sp]
    8eb0:	e300380c 	movw	r3, #2060	@ 0x80c
    8eb4:	eb002807 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8eb8:	e1500005 	cmp	r0, r5
    8ebc:	0a000027 	beq	8f60 <CKernelOptions::CKernelOptions()+0x164>
    8ec0:	e5943008 	ldr	r3, [r4, #8]
    8ec4:	e3530b02 	cmp	r3, #2048	@ 0x800
    8ec8:	2a000024 	bcs	8f60 <CKernelOptions::CKernelOptions()+0x164>
    8ecc:	e0843003 	add	r3, r4, r3
    8ed0:	e30660c8 	movw	r6, #24776	@ 0x60c8
    8ed4:	e3406001 	movt	r6, #1
    8ed8:	e30680d0 	movw	r8, #24784	@ 0x60d0
    8edc:	e3408001 	movt	r8, #1
    8ee0:	e5c3500c 	strb	r5, [r3, #12]
    8ee4:	e284300c 	add	r3, r4, #12
    8ee8:	e584380c 	str	r3, [r4, #2060]	@ 0x80c
    8eec:	e1a00004 	mov	r0, r4
    8ef0:	ebffff2d 	bl	8bac <CKernelOptions::GetToken()>
    8ef4:	e250a000 	subs	sl, r0, #0
    8ef8:	0a000018 	beq	8f60 <CKernelOptions::CKernelOptions()+0x164>
    8efc:	e1da30d0 	ldrsb	r3, [sl]
    8f00:	e3530000 	cmp	r3, #0
    8f04:	11a0100a 	movne	r1, sl
    8f08:	1a000003 	bne	8f1c <CKernelOptions::CKernelOptions()+0x120>
    8f0c:	ea000018 	b	8f74 <CKernelOptions::CKernelOptions()+0x178>
    8f10:	e1f130d1 	ldrsb	r3, [r1, #1]!
    8f14:	e3530000 	cmp	r3, #0
    8f18:	0a000015 	beq	8f74 <CKernelOptions::CKernelOptions()+0x178>
    8f1c:	e353003d 	cmp	r3, #61	@ 0x3d
    8f20:	1afffffa 	bne	8f10 <CKernelOptions::CKernelOptions()+0x114>
    8f24:	e1a0b001 	mov	fp, r1
    8f28:	e4cb5001 	strb	r5, [fp], #1
    8f2c:	e1a01006 	mov	r1, r6
    8f30:	e1a0000a 	mov	r0, sl
    8f34:	eb000d5d 	bl	c4b0 <strcmp>
    8f38:	e3500000 	cmp	r0, #0
    8f3c:	1a00000e 	bne	8f7c <CKernelOptions::CKernelOptions()+0x180>
    8f40:	e1a0000b 	mov	r0, fp
    8f44:	ebffff46 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    8f48:	e3700001 	cmn	r0, #1
    8f4c:	15840810 	strne	r0, [r4, #2064]	@ 0x810
    8f50:	e1a00004 	mov	r0, r4
    8f54:	ebffff14 	bl	8bac <CKernelOptions::GetToken()>
    8f58:	e250a000 	subs	sl, r0, #0
    8f5c:	1affffe6 	bne	8efc <CKernelOptions::CKernelOptions()+0x100>
    8f60:	e28d0010 	add	r0, sp, #16
    8f64:	eb002790 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
    8f68:	e1a00004 	mov	r0, r4
    8f6c:	e28dd01c 	add	sp, sp, #28
    8f70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f74:	e1a0b003 	mov	fp, r3
    8f78:	eaffffeb 	b	8f2c <CKernelOptions::CKernelOptions()+0x130>
    8f7c:	e1a01008 	mov	r1, r8
    8f80:	e1a0000a 	mov	r0, sl
    8f84:	eb000d49 	bl	c4b0 <strcmp>
    8f88:	e3500000 	cmp	r0, #0
    8f8c:	1a000004 	bne	8fa4 <CKernelOptions::CKernelOptions()+0x1a8>
    8f90:	e1a0000b 	mov	r0, fp
    8f94:	ebffff32 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    8f98:	e3700001 	cmn	r0, #1
    8f9c:	15840814 	strne	r0, [r4, #2068]	@ 0x814
    8fa0:	eaffffd1 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    8fa4:	e1a0000a 	mov	r0, sl
    8fa8:	e30610d8 	movw	r1, #24792	@ 0x60d8
    8fac:	e3401001 	movt	r1, #1
    8fb0:	eb000d3e 	bl	c4b0 <strcmp>
    8fb4:	e2503000 	subs	r3, r0, #0
    8fb8:	e58d300c 	str	r3, [sp, #12]
    8fbc:	0a00000a 	beq	8fec <CKernelOptions::CKernelOptions()+0x1f0>
    8fc0:	e1a0000a 	mov	r0, sl
    8fc4:	e30610e0 	movw	r1, #24800	@ 0x60e0
    8fc8:	e3401001 	movt	r1, #1
    8fcc:	eb000d37 	bl	c4b0 <strcmp>
    8fd0:	e3500000 	cmp	r0, #0
    8fd4:	1a00000b 	bne	9008 <CKernelOptions::CKernelOptions()+0x20c>
    8fd8:	e1a0000b 	mov	r0, fp
    8fdc:	ebffff20 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    8fe0:	e3500004 	cmp	r0, #4
    8fe4:	9584082c 	strls	r0, [r4, #2092]	@ 0x82c
    8fe8:	eaffffbf 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    8fec:	e1a0100b 	mov	r1, fp
    8ff0:	e3a02013 	mov	r2, #19
    8ff4:	e1a00007 	mov	r0, r7
    8ff8:	eb000dcd 	bl	c734 <strncpy>
    8ffc:	e59d300c 	ldr	r3, [sp, #12]
    9000:	e5c4382b 	strb	r3, [r4, #2091]	@ 0x82b
    9004:	eaffffb8 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    9008:	e1a0000a 	mov	r0, sl
    900c:	e30610ec 	movw	r1, #24812	@ 0x60ec
    9010:	e3401001 	movt	r1, #1
    9014:	eb000d25 	bl	c4b0 <strcmp>
    9018:	e2503000 	subs	r3, r0, #0
    901c:	e58d300c 	str	r3, [sp, #12]
    9020:	0a00000c 	beq	9058 <CKernelOptions::CKernelOptions()+0x25c>
    9024:	e1a0000a 	mov	r0, sl
    9028:	e30610f4 	movw	r1, #24820	@ 0x60f4
    902c:	e3401001 	movt	r1, #1
    9030:	eb000d1e 	bl	c4b0 <strcmp>
    9034:	e3500000 	cmp	r0, #0
    9038:	1a00000d 	bne	9074 <CKernelOptions::CKernelOptions()+0x278>
    903c:	e1a0000b 	mov	r0, fp
    9040:	ebffff07 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    9044:	e24010c8 	sub	r1, r0, #200	@ 0xc8
    9048:	e3012e78 	movw	r2, #7800	@ 0x1e78
    904c:	e1510002 	cmp	r1, r2
    9050:	95840834 	strls	r0, [r4, #2100]	@ 0x834
    9054:	eaffffa4 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    9058:	e1a0100b 	mov	r1, fp
    905c:	e3a02002 	mov	r2, #2
    9060:	e1a00009 	mov	r0, r9
    9064:	eb000db2 	bl	c734 <strncpy>
    9068:	e59d300c 	ldr	r3, [sp, #12]
    906c:	e5c43832 	strb	r3, [r4, #2098]	@ 0x832
    9070:	eaffff9d 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    9074:	e1a0000a 	mov	r0, sl
    9078:	e3061104 	movw	r1, #24836	@ 0x6104
    907c:	e3401001 	movt	r1, #1
    9080:	eb000d0a 	bl	c4b0 <strcmp>
    9084:	e3500000 	cmp	r0, #0
    9088:	1a000007 	bne	90ac <CKernelOptions::CKernelOptions()+0x2b0>
    908c:	e1a0000b 	mov	r0, fp
    9090:	e3061110 	movw	r1, #24848	@ 0x6110
    9094:	e3401001 	movt	r1, #1
    9098:	eb000d04 	bl	c4b0 <strcmp>
    909c:	e3500000 	cmp	r0, #0
    90a0:	03a03001 	moveq	r3, #1
    90a4:	05c43838 	strbeq	r3, [r4, #2104]	@ 0x838
    90a8:	eaffff8f 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    90ac:	e1a0000a 	mov	r0, sl
    90b0:	e3061118 	movw	r1, #24856	@ 0x6118
    90b4:	e3401001 	movt	r1, #1
    90b8:	eb000cfc 	bl	c4b0 <strcmp>
    90bc:	e3500000 	cmp	r0, #0
    90c0:	1a000007 	bne	90e4 <CKernelOptions::CKernelOptions()+0x2e8>
    90c4:	e1a0000b 	mov	r0, fp
    90c8:	e3061124 	movw	r1, #24868	@ 0x6124
    90cc:	e3401001 	movt	r1, #1
    90d0:	eb000cf6 	bl	c4b0 <strcmp>
    90d4:	e3500000 	cmp	r0, #0
    90d8:	03a03001 	moveq	r3, #1
    90dc:	05c43839 	strbeq	r3, [r4, #2105]	@ 0x839
    90e0:	eaffff81 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    90e4:	e1a0000a 	mov	r0, sl
    90e8:	e306112c 	movw	r1, #24876	@ 0x612c
    90ec:	e3401001 	movt	r1, #1
    90f0:	eb000cee 	bl	c4b0 <strcmp>
    90f4:	e2503000 	subs	r3, r0, #0
    90f8:	e58d300c 	str	r3, [sp, #12]
    90fc:	1a000007 	bne	9120 <CKernelOptions::CKernelOptions()+0x324>
    9100:	e2840e83 	add	r0, r4, #2096	@ 0x830
    9104:	e1a0100b 	mov	r1, fp
    9108:	e280000a 	add	r0, r0, #10
    910c:	e3a02013 	mov	r2, #19
    9110:	eb000d87 	bl	c734 <strncpy>
    9114:	e59d300c 	ldr	r3, [sp, #12]
    9118:	e5c4384d 	strb	r3, [r4, #2125]	@ 0x84d
    911c:	eaffff72 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    9120:	e1a0000a 	mov	r0, sl
    9124:	e3061138 	movw	r1, #24888	@ 0x6138
    9128:	e3401001 	movt	r1, #1
    912c:	eb000cdf 	bl	c4b0 <strcmp>
    9130:	e3500000 	cmp	r0, #0
    9134:	1a000007 	bne	9158 <CKernelOptions::CKernelOptions()+0x35c>
    9138:	e1a0000b 	mov	r0, fp
    913c:	e3a02002 	mov	r2, #2
    9140:	e2841e85 	add	r1, r4, #2128	@ 0x850
    9144:	ebfffef7 	bl	8d28 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    9148:	e2503000 	subs	r3, r0, #0
    914c:	05843850 	streq	r3, [r4, #2128]	@ 0x850
    9150:	05843854 	streq	r3, [r4, #2132]	@ 0x854
    9154:	eaffff64 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    9158:	e1a0000a 	mov	r0, sl
    915c:	e306114c 	movw	r1, #24908	@ 0x614c
    9160:	e3401001 	movt	r1, #1
    9164:	eb000cd1 	bl	c4b0 <strcmp>
    9168:	e2503000 	subs	r3, r0, #0
    916c:	e58d300c 	str	r3, [sp, #12]
    9170:	1a000007 	bne	9194 <CKernelOptions::CKernelOptions()+0x398>
    9174:	e2840e85 	add	r0, r4, #2128	@ 0x850
    9178:	e1a0100b 	mov	r1, fp
    917c:	e2800008 	add	r0, r0, #8
    9180:	e3a02013 	mov	r2, #19
    9184:	eb000d6a 	bl	c734 <strncpy>
    9188:	e59d300c 	ldr	r3, [sp, #12]
    918c:	e5c4386b 	strb	r3, [r4, #2155]	@ 0x86b
    9190:	eaffff55 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    9194:	e1a0000a 	mov	r0, sl
    9198:	e3061158 	movw	r1, #24920	@ 0x6158
    919c:	e3401001 	movt	r1, #1
    91a0:	eb000cc2 	bl	c4b0 <strcmp>
    91a4:	e3500000 	cmp	r0, #0
    91a8:	1a000009 	bne	91d4 <CKernelOptions::CKernelOptions()+0x3d8>
    91ac:	e1a0000b 	mov	r0, fp
    91b0:	ebfffeab 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    91b4:	e3500018 	cmp	r0, #24
    91b8:	8affff4b 	bhi	8eec <CKernelOptions::CKernelOptions()+0xf0>
    91bc:	e3a02007 	mov	r2, #7
    91c0:	e3402101 	movt	r2, #257	@ 0x101
    91c4:	e1a02032 	lsr	r2, r2, r0
    91c8:	e3120001 	tst	r2, #1
    91cc:	1584086c 	strne	r0, [r4, #2156]	@ 0x86c
    91d0:	eaffff45 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    91d4:	e1a0000a 	mov	r0, sl
    91d8:	e3061164 	movw	r1, #24932	@ 0x6164
    91dc:	e3401001 	movt	r1, #1
    91e0:	eb000cb2 	bl	c4b0 <strcmp>
    91e4:	e3500000 	cmp	r0, #0
    91e8:	1a000007 	bne	920c <CKernelOptions::CKernelOptions()+0x410>
    91ec:	e1a0000b 	mov	r0, fp
    91f0:	e3061124 	movw	r1, #24868	@ 0x6124
    91f4:	e3401001 	movt	r1, #1
    91f8:	eb000cac 	bl	c4b0 <strcmp>
    91fc:	e3500000 	cmp	r0, #0
    9200:	03a03001 	moveq	r3, #1
    9204:	05c43870 	strbeq	r3, [r4, #2160]	@ 0x870
    9208:	eaffff37 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    920c:	e1a0000a 	mov	r0, sl
    9210:	e306116c 	movw	r1, #24940	@ 0x616c
    9214:	e3401001 	movt	r1, #1
    9218:	eb000ca4 	bl	c4b0 <strcmp>
    921c:	e3500000 	cmp	r0, #0
    9220:	1a000005 	bne	923c <CKernelOptions::CKernelOptions()+0x440>
    9224:	e1a0000b 	mov	r0, fp
    9228:	ebfffe8d 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    922c:	e2402028 	sub	r2, r0, #40	@ 0x28
    9230:	e3520026 	cmp	r2, #38	@ 0x26
    9234:	95840874 	strls	r0, [r4, #2164]	@ 0x874
    9238:	eaffff2b 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    923c:	e1a0000a 	mov	r0, sl
    9240:	e3061178 	movw	r1, #24952	@ 0x6178
    9244:	e3401001 	movt	r1, #1
    9248:	eb000c98 	bl	c4b0 <strcmp>
    924c:	e3500000 	cmp	r0, #0
    9250:	1a000005 	bne	926c <CKernelOptions::CKernelOptions()+0x470>
    9254:	e1a0000b 	mov	r0, fp
    9258:	ebfffe81 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    925c:	e2402002 	sub	r2, r0, #2
    9260:	e3520033 	cmp	r2, #51	@ 0x33
    9264:	95840878 	strls	r0, [r4, #2168]	@ 0x878
    9268:	eaffff1f 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    926c:	e1a0000a 	mov	r0, sl
    9270:	e3061184 	movw	r1, #24964	@ 0x6184
    9274:	e3401001 	movt	r1, #1
    9278:	eb000c8c 	bl	c4b0 <strcmp>
    927c:	e3500000 	cmp	r0, #0
    9280:	1a000005 	bne	929c <CKernelOptions::CKernelOptions()+0x4a0>
    9284:	e1a0000b 	mov	r0, fp
    9288:	e3a02004 	mov	r2, #4
    928c:	e2841d22 	add	r1, r4, #2176	@ 0x880
    9290:	ebfffea4 	bl	8d28 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    9294:	e5c4087c 	strb	r0, [r4, #2172]	@ 0x87c
    9298:	eaffff13 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    929c:	e1a0000a 	mov	r0, sl
    92a0:	e3061190 	movw	r1, #24976	@ 0x6190
    92a4:	e3401001 	movt	r1, #1
    92a8:	eb000c80 	bl	c4b0 <strcmp>
    92ac:	e3500000 	cmp	r0, #0
    92b0:	1a000005 	bne	92cc <CKernelOptions::CKernelOptions()+0x4d0>
    92b4:	e1a0000b 	mov	r0, fp
    92b8:	ebfffe69 	bl	8c64 <CKernelOptions::GetDecimal(char const*)>
    92bc:	e2402001 	sub	r2, r0, #1
    92c0:	e35200fe 	cmp	r2, #254	@ 0xfe
    92c4:	95840894 	strls	r0, [r4, #2196]	@ 0x894
    92c8:	eaffff07 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>
    92cc:	e3a0000c 	mov	r0, #12
    92d0:	eb000f8f 	bl	d114 <operator new(unsigned int)>
    92d4:	e58d000c 	str	r0, [sp, #12]
    92d8:	e1a0000a 	mov	r0, sl
    92dc:	eb000c69 	bl	c488 <strlen>
    92e0:	e2800001 	add	r0, r0, #1
    92e4:	eb000f90 	bl	d12c <operator new[](unsigned int)>
    92e8:	e59d300c 	ldr	r3, [sp, #12]
    92ec:	e1a0100a 	mov	r1, sl
    92f0:	e5830004 	str	r0, [r3, #4]
    92f4:	eb000d03 	bl	c708 <strcpy>
    92f8:	e1a0000b 	mov	r0, fp
    92fc:	eb000c61 	bl	c488 <strlen>
    9300:	e2800001 	add	r0, r0, #1
    9304:	eb000f88 	bl	d12c <operator new[](unsigned int)>
    9308:	e59da00c 	ldr	sl, [sp, #12]
    930c:	e1a0100b 	mov	r1, fp
    9310:	e58a0008 	str	r0, [sl, #8]
    9314:	eb000cfb 	bl	c708 <strcpy>
    9318:	e5943890 	ldr	r3, [r4, #2192]	@ 0x890
    931c:	e58a3000 	str	r3, [sl]
    9320:	e584a890 	str	sl, [r4, #2192]	@ 0x890
    9324:	eafffef0 	b	8eec <CKernelOptions::CKernelOptions()+0xf0>

00009328 <CMachineInfo::CMachineInfo()>:
    9328:	e92d4830 	push	{r4, r5, fp, lr}
    932c:	e28db00c 	add	fp, sp, #12
    9330:	e24dd048 	sub	sp, sp, #72	@ 0x48
    9334:	e50b0048 	str	r0, [fp, #-72]	@ 0xffffffb8
    9338:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    933c:	e3a02000 	mov	r2, #0
    9340:	e5832000 	str	r2, [r3]
    9344:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9348:	e3a02018 	mov	r2, #24
    934c:	e5c32008 	strb	r2, [r3, #8]
    9350:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9354:	e3a02000 	mov	r2, #0
    9358:	e5832010 	str	r2, [r3, #16]
    935c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9360:	e3a02000 	mov	r2, #0
    9364:	e5832018 	str	r2, [r3, #24]
    9368:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    936c:	e3a02005 	mov	r2, #5
    9370:	e5c32020 	strb	r2, [r3, #32]
    9374:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9378:	e3e02000 	mvn	r2, #0
    937c:	e5c32028 	strb	r2, [r3, #40]	@ 0x28
    9380:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9384:	e3a02000 	mov	r2, #0
    9388:	e5832030 	str	r2, [r3, #48]	@ 0x30
    938c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9390:	e3012f35 	movw	r2, #7989	@ 0x1f35
    9394:	e1c323b8 	strh	r2, [r3, #56]	@ 0x38
    9398:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    939c:	e3403001 	movt	r3, #1
    93a0:	e5933000 	ldr	r3, [r3]
    93a4:	e3530000 	cmp	r3, #0
    93a8:	0a00002b 	beq	945c <CMachineInfo::CMachineInfo()+0x134>
    93ac:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    93b0:	e3403001 	movt	r3, #1
    93b4:	e5933000 	ldr	r3, [r3]
    93b8:	e5932000 	ldr	r2, [r3]
    93bc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    93c0:	e5832000 	str	r2, [r3]
    93c4:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    93c8:	e3403001 	movt	r3, #1
    93cc:	e5933000 	ldr	r3, [r3]
    93d0:	e5d32008 	ldrb	r2, [r3, #8]
    93d4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    93d8:	e5c32008 	strb	r2, [r3, #8]
    93dc:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    93e0:	e3403001 	movt	r3, #1
    93e4:	e5933000 	ldr	r3, [r3]
    93e8:	e5932010 	ldr	r2, [r3, #16]
    93ec:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    93f0:	e5832010 	str	r2, [r3, #16]
    93f4:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    93f8:	e3403001 	movt	r3, #1
    93fc:	e5933000 	ldr	r3, [r3]
    9400:	e5932018 	ldr	r2, [r3, #24]
    9404:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9408:	e5832018 	str	r2, [r3, #24]
    940c:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    9410:	e3403001 	movt	r3, #1
    9414:	e5933000 	ldr	r3, [r3]
    9418:	e5d32020 	ldrb	r2, [r3, #32]
    941c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9420:	e5c32020 	strb	r2, [r3, #32]
    9424:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    9428:	e3403001 	movt	r3, #1
    942c:	e5933000 	ldr	r3, [r3]
    9430:	e5d32028 	ldrb	r2, [r3, #40]	@ 0x28
    9434:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9438:	e5c32028 	strb	r2, [r3, #40]	@ 0x28
    943c:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    9440:	e3403001 	movt	r3, #1
    9444:	e5933000 	ldr	r3, [r3]
    9448:	e5932030 	ldr	r2, [r3, #48]	@ 0x30
    944c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9450:	e5832030 	str	r2, [r3, #48]	@ 0x30
    9454:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    9458:	ea0000d1 	b	97a4 <CMachineInfo::CMachineInfo()+0x47c>
    945c:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    9460:	e3403001 	movt	r3, #1
    9464:	e51b2048 	ldr	r2, [fp, #-72]	@ 0xffffffb8
    9468:	e5832000 	str	r2, [r3]
    946c:	e24b3020 	sub	r3, fp, #32
    9470:	e3a01000 	mov	r1, #0
    9474:	e1a00003 	mov	r0, r3
    9478:	eb002644 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    947c:	e24b2030 	sub	r2, fp, #48	@ 0x30
    9480:	e24b0020 	sub	r0, fp, #32
    9484:	e3a03000 	mov	r3, #0
    9488:	e58d3000 	str	r3, [sp]
    948c:	e3a03010 	mov	r3, #16
    9490:	e3a01001 	mov	r1, #1
    9494:	e3401006 	movt	r1, #6
    9498:	eb00268e 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    949c:	e1a03000 	mov	r3, r0
    94a0:	e3530000 	cmp	r3, #0
    94a4:	0a000003 	beq	94b8 <CMachineInfo::CMachineInfo()+0x190>
    94a8:	e51b3024 	ldr	r3, [fp, #-36]	@ 0xffffffdc
    94ac:	e6ff2073 	uxth	r2, r3
    94b0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    94b4:	e1c323b8 	strh	r2, [r3, #56]	@ 0x38
    94b8:	e24b2040 	sub	r2, fp, #64	@ 0x40
    94bc:	e24b0020 	sub	r0, fp, #32
    94c0:	e3a03000 	mov	r3, #0
    94c4:	e58d3000 	str	r3, [sp]
    94c8:	e3a03010 	mov	r3, #16
    94cc:	e3a01002 	mov	r1, #2
    94d0:	e3401001 	movt	r1, #1
    94d4:	eb00267f 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    94d8:	e1a03000 	mov	r3, r0
    94dc:	e2233001 	eor	r3, r3, #1
    94e0:	e6ef3073 	uxtb	r3, r3
    94e4:	e3530000 	cmp	r3, #0
    94e8:	0a000002 	beq	94f8 <CMachineInfo::CMachineInfo()+0x1d0>
    94ec:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    94f0:	e3a05000 	mov	r5, #0
    94f4:	ea0000a3 	b	9788 <CMachineInfo::CMachineInfo()+0x460>
    94f8:	e51b2034 	ldr	r2, [fp, #-52]	@ 0xffffffcc
    94fc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9500:	e5832000 	str	r2, [r3]
    9504:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9508:	e5933000 	ldr	r3, [r3]
    950c:	e2033502 	and	r3, r3, #8388608	@ 0x800000
    9510:	e3530000 	cmp	r3, #0
    9514:	0a000063 	beq	96a8 <CMachineInfo::CMachineInfo()+0x380>
    9518:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    951c:	e5933000 	ldr	r3, [r3]
    9520:	e1a03223 	lsr	r3, r3, #4
    9524:	e6ef3073 	uxtb	r3, r3
    9528:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
    952c:	e3a03000 	mov	r3, #0
    9530:	e50b3010 	str	r3, [fp, #-16]
    9534:	ea00000c 	b	956c <CMachineInfo::CMachineInfo()+0x244>
    9538:	e3063990 	movw	r3, #27024	@ 0x6990
    953c:	e3403001 	movt	r3, #1
    9540:	e51b2010 	ldr	r2, [fp, #-16]
    9544:	e3a0100c 	mov	r1, #12
    9548:	e0020291 	mul	r2, r1, r2
    954c:	e0833002 	add	r3, r3, r2
    9550:	e5933000 	ldr	r3, [r3]
    9554:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
    9558:	e1520003 	cmp	r2, r3
    955c:	0a000006 	beq	957c <CMachineInfo::CMachineInfo()+0x254>
    9560:	e51b3010 	ldr	r3, [fp, #-16]
    9564:	e2833001 	add	r3, r3, #1
    9568:	e50b3010 	str	r3, [fp, #-16]
    956c:	e51b3010 	ldr	r3, [fp, #-16]
    9570:	e3530015 	cmp	r3, #21
    9574:	9affffef 	bls	9538 <CMachineInfo::CMachineInfo()+0x210>
    9578:	ea000000 	b	9580 <CMachineInfo::CMachineInfo()+0x258>
    957c:	e320f000 	nop	{0}
    9580:	e51b3010 	ldr	r3, [fp, #-16]
    9584:	e3530015 	cmp	r3, #21
    9588:	9a000002 	bls	9598 <CMachineInfo::CMachineInfo()+0x270>
    958c:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    9590:	e3a05000 	mov	r5, #0
    9594:	ea00007b 	b	9788 <CMachineInfo::CMachineInfo()+0x460>
    9598:	e3063990 	movw	r3, #27024	@ 0x6990
    959c:	e3403001 	movt	r3, #1
    95a0:	e51b2010 	ldr	r2, [fp, #-16]
    95a4:	e3a0100c 	mov	r1, #12
    95a8:	e0020291 	mul	r2, r1, r2
    95ac:	e0833002 	add	r3, r3, r2
    95b0:	e2833004 	add	r3, r3, #4
    95b4:	e5d32000 	ldrb	r2, [r3]
    95b8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    95bc:	e5c32008 	strb	r2, [r3, #8]
    95c0:	e3063990 	movw	r3, #27024	@ 0x6990
    95c4:	e3403001 	movt	r3, #1
    95c8:	e51b2010 	ldr	r2, [fp, #-16]
    95cc:	e3a0100c 	mov	r1, #12
    95d0:	e0020291 	mul	r2, r1, r2
    95d4:	e0833002 	add	r3, r3, r2
    95d8:	e2833008 	add	r3, r3, #8
    95dc:	e5932000 	ldr	r2, [r3]
    95e0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    95e4:	e5832010 	str	r2, [r3, #16]
    95e8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    95ec:	e5933000 	ldr	r3, [r3]
    95f0:	e203300f 	and	r3, r3, #15
    95f4:	e2832001 	add	r2, r3, #1
    95f8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    95fc:	e5832018 	str	r2, [r3, #24]
    9600:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9604:	e5933000 	ldr	r3, [r3]
    9608:	e1a03623 	lsr	r3, r3, #12
    960c:	e6ef3073 	uxtb	r3, r3
    9610:	e203300f 	and	r3, r3, #15
    9614:	e6ef2073 	uxtb	r2, r3
    9618:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    961c:	e5c32020 	strb	r2, [r3, #32]
    9620:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9624:	e5933000 	ldr	r3, [r3]
    9628:	e1a03a23 	lsr	r3, r3, #20
    962c:	e2033007 	and	r3, r3, #7
    9630:	e3a02c01 	mov	r2, #256	@ 0x100
    9634:	e1a03312 	lsl	r3, r2, r3
    9638:	e1a02003 	mov	r2, r3
    963c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9640:	e5832030 	str	r2, [r3, #48]	@ 0x30
    9644:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9648:	e5d33020 	ldrb	r3, [r3, #32]
    964c:	e3530004 	cmp	r3, #4
    9650:	9a000002 	bls	9660 <CMachineInfo::CMachineInfo()+0x338>
    9654:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9658:	e3a02005 	mov	r2, #5
    965c:	e5c32020 	strb	r2, [r3, #32]
    9660:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9664:	e5d33008 	ldrb	r3, [r3, #8]
    9668:	e3530003 	cmp	r3, #3
    966c:	1a000044 	bne	9784 <CMachineInfo::CMachineInfo()+0x45c>
    9670:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9674:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
    9678:	e3530c01 	cmp	r3, #256	@ 0x100
    967c:	1a000040 	bne	9784 <CMachineInfo::CMachineInfo()+0x45c>
    9680:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9684:	e5933018 	ldr	r3, [r3, #24]
    9688:	e3530001 	cmp	r3, #1
    968c:	1a000001 	bne	9698 <CMachineInfo::CMachineInfo()+0x370>
    9690:	e3a02001 	mov	r2, #1
    9694:	ea000000 	b	969c <CMachineInfo::CMachineInfo()+0x374>
    9698:	e3a02002 	mov	r2, #2
    969c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    96a0:	e5c32008 	strb	r2, [r3, #8]
    96a4:	ea000036 	b	9784 <CMachineInfo::CMachineInfo()+0x45c>
    96a8:	e3a03000 	mov	r3, #0
    96ac:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    96b0:	ea00000a 	b	96e0 <CMachineInfo::CMachineInfo()+0x3b8>
    96b4:	e3063a98 	movw	r3, #27288	@ 0x6a98
    96b8:	e3403001 	movt	r3, #1
    96bc:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
    96c0:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    96c4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    96c8:	e5933000 	ldr	r3, [r3]
    96cc:	e1520003 	cmp	r2, r3
    96d0:	0a000006 	beq	96f0 <CMachineInfo::CMachineInfo()+0x3c8>
    96d4:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    96d8:	e2833001 	add	r3, r3, #1
    96dc:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    96e0:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    96e4:	e3530010 	cmp	r3, #16
    96e8:	9afffff1 	bls	96b4 <CMachineInfo::CMachineInfo()+0x38c>
    96ec:	ea000000 	b	96f4 <CMachineInfo::CMachineInfo()+0x3cc>
    96f0:	e320f000 	nop	{0}
    96f4:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    96f8:	e3530010 	cmp	r3, #16
    96fc:	9a000002 	bls	970c <CMachineInfo::CMachineInfo()+0x3e4>
    9700:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    9704:	e3a05000 	mov	r5, #0
    9708:	ea00001e 	b	9788 <CMachineInfo::CMachineInfo()+0x460>
    970c:	e3062a98 	movw	r2, #27288	@ 0x6a98
    9710:	e3402001 	movt	r2, #1
    9714:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    9718:	e1a03203 	lsl	r3, r3, #4
    971c:	e0823003 	add	r3, r2, r3
    9720:	e5d32004 	ldrb	r2, [r3, #4]
    9724:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9728:	e5c32008 	strb	r2, [r3, #8]
    972c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9730:	e3a02001 	mov	r2, #1
    9734:	e5832010 	str	r2, [r3, #16]
    9738:	e3062a98 	movw	r2, #27288	@ 0x6a98
    973c:	e3402001 	movt	r2, #1
    9740:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    9744:	e1a03203 	lsl	r3, r3, #4
    9748:	e0823003 	add	r3, r2, r3
    974c:	e5932008 	ldr	r2, [r3, #8]
    9750:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9754:	e5832018 	str	r2, [r3, #24]
    9758:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    975c:	e3a02000 	mov	r2, #0
    9760:	e5c32020 	strb	r2, [r3, #32]
    9764:	e3062a98 	movw	r2, #27288	@ 0x6a98
    9768:	e3402001 	movt	r2, #1
    976c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
    9770:	e1a03203 	lsl	r3, r3, #4
    9774:	e0823003 	add	r3, r2, r3
    9778:	e593200c 	ldr	r2, [r3, #12]
    977c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
    9780:	e5832030 	str	r2, [r3, #48]	@ 0x30
    9784:	e3a05001 	mov	r5, #1
    9788:	e24b3020 	sub	r3, fp, #32
    978c:	e1a00003 	mov	r0, r3
    9790:	eb002585 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
    9794:	e3550001 	cmp	r5, #1
    9798:	1a000001 	bne	97a4 <CMachineInfo::CMachineInfo()+0x47c>
    979c:	e320f000 	nop	{0}
    97a0:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
    97a4:	e1a03004 	mov	r3, r4
    97a8:	e1a00003 	mov	r0, r3
    97ac:	e24bd00c 	sub	sp, fp, #12
    97b0:	e8bd8830 	pop	{r4, r5, fp, pc}

000097b4 <CMachineInfo::~CMachineInfo()>:
    97b4:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    97b8:	e3403001 	movt	r3, #1
    97bc:	e5932000 	ldr	r2, [r3]
    97c0:	e1520000 	cmp	r2, r0
    97c4:	03a02000 	moveq	r2, #0
    97c8:	05832000 	streq	r2, [r3]
    97cc:	e12fff1e 	bx	lr

000097d0 <CMachineInfo::GetMachineModel() const>:
    97d0:	e5d00008 	ldrb	r0, [r0, #8]
    97d4:	e12fff1e 	bx	lr

000097d8 <CMachineInfo::GetMachineName() const>:
    97d8:	e5d02008 	ldrb	r2, [r0, #8]
    97dc:	e3063ba8 	movw	r3, #27560	@ 0x6ba8
    97e0:	e3403001 	movt	r3, #1
    97e4:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    97e8:	e12fff1e 	bx	lr

000097ec <CMachineInfo::GetModelMajor() const>:
    97ec:	e5900010 	ldr	r0, [r0, #16]
    97f0:	e12fff1e 	bx	lr

000097f4 <CMachineInfo::GetModelRevision() const>:
    97f4:	e5900018 	ldr	r0, [r0, #24]
    97f8:	e12fff1e 	bx	lr

000097fc <CMachineInfo::GetSoCType() const>:
    97fc:	e5d00020 	ldrb	r0, [r0, #32]
    9800:	e12fff1e 	bx	lr

00009804 <CMachineInfo::GetSoCStepping() const>:
    9804:	e5d00028 	ldrb	r0, [r0, #40]	@ 0x28
    9808:	e12fff1e 	bx	lr

0000980c <CMachineInfo::GetRAMSize() const>:
    980c:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
    9810:	e12fff1e 	bx	lr

00009814 <CMachineInfo::GetSoCName() const>:
    9814:	e5d02020 	ldrb	r2, [r0, #32]
    9818:	e3063ba8 	movw	r3, #27560	@ 0x6ba8
    981c:	e3403001 	movt	r3, #1
    9820:	e0833102 	add	r3, r3, r2, lsl #2
    9824:	e5930068 	ldr	r0, [r3, #104]	@ 0x68
    9828:	e12fff1e 	bx	lr

0000982c <CMachineInfo::GetRevisionRaw() const>:
    982c:	e5900000 	ldr	r0, [r0]
    9830:	e12fff1e 	bx	lr

00009834 <CMachineInfo::GetActLEDInfo() const>:
    9834:	e5d02008 	ldrb	r2, [r0, #8]
    9838:	e3063ba8 	movw	r3, #27560	@ 0x6ba8
    983c:	e3403001 	movt	r3, #1
    9840:	e0833102 	add	r3, r3, r2, lsl #2
    9844:	e5930080 	ldr	r0, [r3, #128]	@ 0x80
    9848:	e12fff1e 	bx	lr

0000984c <CMachineInfo::GetClockRate(unsigned int) const>:
    984c:	e92d4070 	push	{r4, r5, r6, lr}
    9850:	e1a04001 	mov	r4, r1
    9854:	e1a06000 	mov	r6, r0
    9858:	e24dd028 	sub	sp, sp, #40	@ 0x28
    985c:	e3a01000 	mov	r1, #0
    9860:	e28d000c 	add	r0, sp, #12
    9864:	eb002549 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9868:	e3a03014 	mov	r3, #20
    986c:	e3a02004 	mov	r2, #4
    9870:	e3a01002 	mov	r1, #2
    9874:	e3401003 	movt	r1, #3
    9878:	e58d2000 	str	r2, [sp]
    987c:	e28d000c 	add	r0, sp, #12
    9880:	e08d2003 	add	r2, sp, r3
    9884:	e58d4020 	str	r4, [sp, #32]
    9888:	eb002592 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    988c:	e3500000 	cmp	r0, #0
    9890:	0a000002 	beq	98a0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    9894:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
    9898:	e3550000 	cmp	r5, #0
    989c:	1a000026 	bne	993c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    98a0:	e3a03014 	mov	r3, #20
    98a4:	e3a01004 	mov	r1, #4
    98a8:	e08d2003 	add	r2, sp, r3
    98ac:	e58d1000 	str	r1, [sp]
    98b0:	e28d000c 	add	r0, sp, #12
    98b4:	e3a01047 	mov	r1, #71	@ 0x47
    98b8:	e3401003 	movt	r1, #3
    98bc:	e58d4020 	str	r4, [sp, #32]
    98c0:	eb002584 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    98c4:	e3500000 	cmp	r0, #0
    98c8:	0a000002 	beq	98d8 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    98cc:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
    98d0:	e3550000 	cmp	r5, #0
    98d4:	1a000018 	bne	993c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    98d8:	e2444001 	sub	r4, r4, #1
    98dc:	e354000d 	cmp	r4, #13
    98e0:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    98e4:	ea000022 	b	9974 <CMachineInfo::GetClockRate(unsigned int) const+0x128>
    98e8:	00009950 	.word	0x00009950
    98ec:	00009968 	.word	0x00009968
    98f0:	00009974 	.word	0x00009974
    98f4:	00009920 	.word	0x00009920
    98f8:	00009974 	.word	0x00009974
    98fc:	00009974 	.word	0x00009974
    9900:	00009974 	.word	0x00009974
    9904:	00009974 	.word	0x00009974
    9908:	00009974 	.word	0x00009974
    990c:	00009974 	.word	0x00009974
    9910:	00009974 	.word	0x00009974
    9914:	00009950 	.word	0x00009950
    9918:	00009974 	.word	0x00009974
    991c:	0000995c 	.word	0x0000995c
    9920:	e5962010 	ldr	r2, [r6, #16]
    9924:	e30b3280 	movw	r3, #45696	@ 0xb280
    9928:	e3403ee6 	movt	r3, #3814	@ 0xee6
    992c:	e3a05ca3 	mov	r5, #41728	@ 0xa300
    9930:	e34151e1 	movt	r5, #4577	@ 0x11e1
    9934:	e3520002 	cmp	r2, #2
    9938:	91a05003 	movls	r5, r3
    993c:	e28d000c 	add	r0, sp, #12
    9940:	eb002519 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
    9944:	e1a00005 	mov	r0, r5
    9948:	e28dd028 	add	sp, sp, #40	@ 0x28
    994c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9950:	e3a05ce1 	mov	r5, #57600	@ 0xe100
    9954:	e34055f5 	movt	r5, #1525	@ 0x5f5
    9958:	eafffff7 	b	993c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    995c:	e30658c0 	movw	r5, #26816	@ 0x68c0
    9960:	e3405478 	movt	r5, #1144	@ 0x478
    9964:	eafffff4 	b	993c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    9968:	e3a05b1b 	mov	r5, #27648	@ 0x6c00
    996c:	e34052dc 	movt	r5, #732	@ 0x2dc
    9970:	eafffff1 	b	993c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    9974:	e59f1008 	ldr	r1, [pc, #8]	@ 9984 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
    9978:	e30021b5 	movw	r2, #437	@ 0x1b5
    997c:	e2810010 	add	r0, r1, #16
    9980:	eb0021ec 	bl	12138 <assertion_failed>
    9984:	00016c8c 	.word	0x00016c8c

00009988 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    9988:	e3510036 	cmp	r1, #54	@ 0x36
    998c:	0a000006 	beq	99ac <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    9990:	e3510037 	cmp	r1, #55	@ 0x37
    9994:	1a00000e 	bne	99d4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    9998:	e5d03008 	ldrb	r3, [r0, #8]
    999c:	e3530004 	cmp	r3, #4
    99a0:	33a0002d 	movcc	r0, #45	@ 0x2d
    99a4:	23a00028 	movcs	r0, #40	@ 0x28
    99a8:	e12fff1e 	bx	lr
    99ac:	e5d03008 	ldrb	r3, [r0, #8]
    99b0:	e3530003 	cmp	r3, #3
    99b4:	9a000004 	bls	99cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    99b8:	e5903010 	ldr	r3, [r0, #16]
    99bc:	e3530003 	cmp	r3, #3
    99c0:	33a0002d 	movcc	r0, #45	@ 0x2d
    99c4:	23a00029 	movcs	r0, #41	@ 0x29
    99c8:	e12fff1e 	bx	lr
    99cc:	e3a00028 	mov	r0, #40	@ 0x28
    99d0:	e12fff1e 	bx	lr
    99d4:	e59f100c 	ldr	r1, [pc, #12]	@ 99e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    99d8:	e30021fa 	movw	r2, #506	@ 0x1fa
    99dc:	e92d4010 	push	{r4, lr}
    99e0:	e2810010 	add	r0, r1, #16
    99e4:	eb0021d3 	bl	12138 <assertion_failed>
    99e8:	00016c8c 	.word	0x00016c8c

000099ec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    99ec:	e5903010 	ldr	r3, [r0, #16]
    99f0:	e3530003 	cmp	r3, #3
    99f4:	8a000006 	bhi	9a14 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    99f8:	e3510001 	cmp	r1, #1
    99fc:	0a00000b 	beq	9a30 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    9a00:	e3510006 	cmp	r1, #6
    9a04:	e3a00c65 	mov	r0, #25856	@ 0x6500
    9a08:	e3410dcd 	movt	r0, #7629	@ 0x1dcd
    9a0c:	13a00000 	movne	r0, #0
    9a10:	e12fff1e 	bx	lr
    9a14:	e3510001 	cmp	r1, #1
    9a18:	0a000007 	beq	9a3c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    9a1c:	e3510006 	cmp	r1, #6
    9a20:	e3a00d5e 	mov	r0, #6016	@ 0x1780
    9a24:	e3420cb4 	movt	r0, #11444	@ 0x2cb4
    9a28:	13a00000 	movne	r0, #0
    9a2c:	e12fff1e 	bx	lr
    9a30:	e3a00b3e 	mov	r0, #63488	@ 0xf800
    9a34:	e3400124 	movt	r0, #292	@ 0x124
    9a38:	e12fff1e 	bx	lr
    9a3c:	e30f0980 	movw	r0, #63872	@ 0xf980
    9a40:	e3400337 	movt	r0, #823	@ 0x337
    9a44:	e12fff1e 	bx	lr

00009a48 <CMachineInfo::GetDevice(TDeviceId) const>:
    9a48:	e3510000 	cmp	r1, #0
    9a4c:	1a000003 	bne	9a60 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    9a50:	e5d00008 	ldrb	r0, [r0, #8]
    9a54:	e2500001 	subs	r0, r0, #1
    9a58:	13a00001 	movne	r0, #1
    9a5c:	e12fff1e 	bx	lr
    9a60:	e59f100c 	ldr	r1, [pc, #12]	@ 9a74 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    9a64:	e3002245 	movw	r2, #581	@ 0x245
    9a68:	e92d4010 	push	{r4, lr}
    9a6c:	e2810010 	add	r0, r1, #16
    9a70:	eb0021b0 	bl	12138 <assertion_failed>
    9a74:	00016c8c 	.word	0x00016c8c

00009a78 <CMachineInfo::ArePWMChannelsSwapped() const>:
    9a78:	e5d03008 	ldrb	r3, [r0, #8]
    9a7c:	e3530014 	cmp	r3, #20
    9a80:	930f0e30 	movwls	r0, #65072	@ 0xfe30
    9a84:	934f0fef 	movtls	r0, #65519	@ 0xffef
    9a88:	91a00350 	asrls	r0, r0, r3
    9a8c:	92000001 	andls	r0, r0, #1
    9a90:	83a00001 	movhi	r0, #1
    9a94:	e12fff1e 	bx	lr

00009a98 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    9a98:	e3072ac4 	movw	r2, #31428	@ 0x7ac4
    9a9c:	e3402001 	movt	r2, #1
    9aa0:	e92d4010 	push	{r4, lr}
    9aa4:	e5922000 	ldr	r2, [r2]
    9aa8:	e3520000 	cmp	r2, #0
    9aac:	11a03000 	movne	r3, r0
    9ab0:	1a000001 	bne	9abc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
    9ab4:	ea00000f 	b	9af8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x60>
    9ab8:	e1a03002 	mov	r3, r2
    9abc:	e1520003 	cmp	r2, r3
    9ac0:	1afffffc 	bne	9ab8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
    9ac4:	e351000f 	cmp	r1, #15
    9ac8:	8a00000e 	bhi	9b08 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
    9acc:	e351000b 	cmp	r1, #11
    9ad0:	8a000020 	bhi	9b58 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    9ad4:	e1d233b8 	ldrh	r3, [r2, #56]	@ 0x38
    9ad8:	e1a00153 	asr	r0, r3, r1
    9adc:	e3100001 	tst	r0, #1
    9ae0:	0a000015 	beq	9b3c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa4>
    9ae4:	e3a0c001 	mov	ip, #1
    9ae8:	e1a00001 	mov	r0, r1
    9aec:	e1c3311c 	bic	r3, r3, ip, lsl r1
    9af0:	e1c233b8 	strh	r3, [r2, #56]	@ 0x38
    9af4:	e8bd8010 	pop	{r4, pc}
    9af8:	e59f1068 	ldr	r1, [pc, #104]	@ 9b68 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
    9afc:	e3002257 	movw	r2, #599	@ 0x257
    9b00:	e2810014 	add	r0, r1, #20
    9b04:	eb00218b 	bl	12138 <assertion_failed>
    9b08:	e3510081 	cmp	r1, #129	@ 0x81
    9b0c:	e1d3c3b8 	ldrh	ip, [r3, #56]	@ 0x38
    9b10:	13a0200b 	movne	r2, #11
    9b14:	03a02006 	moveq	r2, #6
    9b18:	e1a0125c 	asr	r1, ip, r2
    9b1c:	e3110001 	tst	r1, #1
    9b20:	0a000003 	beq	9b34 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
    9b24:	ea000006 	b	9b44 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
    9b28:	e1a0125c 	asr	r1, ip, r2
    9b2c:	e3110001 	tst	r1, #1
    9b30:	1a000003 	bne	9b44 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
    9b34:	e2522001 	subs	r2, r2, #1
    9b38:	2afffffa 	bcs	9b28 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>
    9b3c:	e3a00080 	mov	r0, #128	@ 0x80
    9b40:	e8bd8010 	pop	{r4, pc}
    9b44:	e3a01001 	mov	r1, #1
    9b48:	e1a00002 	mov	r0, r2
    9b4c:	e1ccc211 	bic	ip, ip, r1, lsl r2
    9b50:	e1c3c3b8 	strh	ip, [r3, #56]	@ 0x38
    9b54:	e8bd8010 	pop	{r4, pc}
    9b58:	e59f1008 	ldr	r1, [pc, #8]	@ 9b68 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
    9b5c:	e3002261 	movw	r2, #609	@ 0x261
    9b60:	e2810024 	add	r0, r1, #36	@ 0x24
    9b64:	eb002173 	bl	12138 <assertion_failed>
    9b68:	00016c8c 	.word	0x00016c8c

00009b6c <CMachineInfo::FreeDMAChannel(unsigned int)>:
    9b6c:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    9b70:	e3403001 	movt	r3, #1
    9b74:	e92d4010 	push	{r4, lr}
    9b78:	e5933000 	ldr	r3, [r3]
    9b7c:	e3530000 	cmp	r3, #0
    9b80:	1a000001 	bne	9b8c <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
    9b84:	ea00000c 	b	9bbc <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
    9b88:	e1a00003 	mov	r0, r3
    9b8c:	e1530000 	cmp	r3, r0
    9b90:	1afffffc 	bne	9b88 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
    9b94:	e351000b 	cmp	r1, #11
    9b98:	8a00000b 	bhi	9bcc <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
    9b9c:	e1d323b8 	ldrh	r2, [r3, #56]	@ 0x38
    9ba0:	e1e00152 	mvn	r0, r2, asr r1
    9ba4:	e3100001 	tst	r0, #1
    9ba8:	0a00000b 	beq	9bdc <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
    9bac:	e3a00001 	mov	r0, #1
    9bb0:	e1822110 	orr	r2, r2, r0, lsl r1
    9bb4:	e1c323b8 	strh	r2, [r3, #56]	@ 0x38
    9bb8:	e8bd8010 	pop	{r4, pc}
    9bbc:	e59f1028 	ldr	r1, [pc, #40]	@ 9bec <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    9bc0:	e3a02fa3 	mov	r2, #652	@ 0x28c
    9bc4:	e2810014 	add	r0, r1, #20
    9bc8:	eb00215a 	bl	12138 <assertion_failed>
    9bcc:	e59f1018 	ldr	r1, [pc, #24]	@ 9bec <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    9bd0:	e3002295 	movw	r2, #661	@ 0x295
    9bd4:	e2810024 	add	r0, r1, #36	@ 0x24
    9bd8:	eb002156 	bl	12138 <assertion_failed>
    9bdc:	e59f1008 	ldr	r1, [pc, #8]	@ 9bec <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    9be0:	e3002299 	movw	r2, #665	@ 0x299
    9be4:	e2810040 	add	r0, r1, #64	@ 0x40
    9be8:	eb002152 	bl	12138 <assertion_failed>
    9bec:	00016c8c 	.word	0x00016c8c

00009bf0 <CMachineInfo::Get()>:
    9bf0:	e3073ac4 	movw	r3, #31428	@ 0x7ac4
    9bf4:	e3403001 	movt	r3, #1
    9bf8:	e5930000 	ldr	r0, [r3]
    9bfc:	e3500000 	cmp	r0, #0
    9c00:	112fff1e 	bxne	lr
    9c04:	e59f100c 	ldr	r1, [pc, #12]	@ 9c18 <CMachineInfo::Get()+0x28>
    9c08:	e3a02e32 	mov	r2, #800	@ 0x320
    9c0c:	e92d4010 	push	{r4, lr}
    9c10:	e2810014 	add	r0, r1, #20
    9c14:	eb002147 	bl	12138 <assertion_failed>
    9c18:	00016c8c 	.word	0x00016c8c
    9c1c:	00000000 	.word	0x00000000

00009c20 <CString::~CString()>:
    9c20:	e92d4010 	push	{r4, lr}
    9c24:	e1a04000 	mov	r4, r0
    9c28:	e5900004 	ldr	r0, [r0, #4]
    9c2c:	e59f3014 	ldr	r3, [pc, #20]	@ 9c48 <CString::~CString()+0x28>
    9c30:	e3500000 	cmp	r0, #0
    9c34:	e5843000 	str	r3, [r4]
    9c38:	0a000000 	beq	9c40 <CString::~CString()+0x20>
    9c3c:	eb000d46 	bl	d15c <operator delete[](void*)>
    9c40:	e1a00004 	mov	r0, r4
    9c44:	e8bd8010 	pop	{r4, pc}
    9c48:	00016f20 	.word	0x00016f20

00009c4c <CString::~CString()>:
    9c4c:	e92d4010 	push	{r4, lr}
    9c50:	e1a04000 	mov	r4, r0
    9c54:	e5900004 	ldr	r0, [r0, #4]
    9c58:	e59f3020 	ldr	r3, [pc, #32]	@ 9c80 <CString::~CString()+0x34>
    9c5c:	e3500000 	cmp	r0, #0
    9c60:	e5843000 	str	r3, [r4]
    9c64:	0a000000 	beq	9c6c <CString::~CString()+0x20>
    9c68:	eb000d3b 	bl	d15c <operator delete[](void*)>
    9c6c:	e1a00004 	mov	r0, r4
    9c70:	e3a01010 	mov	r1, #16
    9c74:	eb000d3e 	bl	d174 <operator delete(void*, unsigned int)>
    9c78:	e1a00004 	mov	r0, r4
    9c7c:	e8bd8010 	pop	{r4, pc}
    9c80:	00016f20 	.word	0x00016f20

00009c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    9c84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c88:	e990004c 	ldmib	r0, {r2, r3, r6}
    9c8c:	e0466002 	sub	r6, r6, r2
    9c90:	e0861001 	add	r1, r6, r1
    9c94:	e2812001 	add	r2, r1, #1
    9c98:	e1520003 	cmp	r2, r3
    9c9c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    9ca0:	e1a04000 	mov	r4, r0
    9ca4:	e2815041 	add	r5, r1, #65	@ 0x41
    9ca8:	e1a00005 	mov	r0, r5
    9cac:	eb000d1e 	bl	d12c <operator new[](unsigned int)>
    9cb0:	e3a02000 	mov	r2, #0
    9cb4:	e594300c 	ldr	r3, [r4, #12]
    9cb8:	e1a07000 	mov	r7, r0
    9cbc:	e5c32000 	strb	r2, [r3]
    9cc0:	e5941004 	ldr	r1, [r4, #4]
    9cc4:	eb000a8f 	bl	c708 <strcpy>
    9cc8:	e5940004 	ldr	r0, [r4, #4]
    9ccc:	e3500000 	cmp	r0, #0
    9cd0:	0a000000 	beq	9cd8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    9cd4:	eb000d20 	bl	d15c <operator delete[](void*)>
    9cd8:	e0876006 	add	r6, r7, r6
    9cdc:	e5847004 	str	r7, [r4, #4]
    9ce0:	e5845008 	str	r5, [r4, #8]
    9ce4:	e584600c 	str	r6, [r4, #12]
    9ce8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009cec <CString::CString()>:
    9cec:	e59f100c 	ldr	r1, [pc, #12]	@ 9d00 <CString::CString()+0x14>
    9cf0:	e3a02000 	mov	r2, #0
    9cf4:	e8800006 	stm	r0, {r1, r2}
    9cf8:	e5802008 	str	r2, [r0, #8]
    9cfc:	e12fff1e 	bx	lr
    9d00:	00016f20 	.word	0x00016f20

00009d04 <CString::CString(char const*)>:
    9d04:	e92d4070 	push	{r4, r5, r6, lr}
    9d08:	e1a04000 	mov	r4, r0
    9d0c:	e59f302c 	ldr	r3, [pc, #44]	@ 9d40 <CString::CString(char const*)+0x3c>
    9d10:	e1a00001 	mov	r0, r1
    9d14:	e1a05001 	mov	r5, r1
    9d18:	e5843000 	str	r3, [r4]
    9d1c:	eb0009d9 	bl	c488 <strlen>
    9d20:	e2800001 	add	r0, r0, #1
    9d24:	e5840008 	str	r0, [r4, #8]
    9d28:	eb000cff 	bl	d12c <operator new[](unsigned int)>
    9d2c:	e1a01005 	mov	r1, r5
    9d30:	e5840004 	str	r0, [r4, #4]
    9d34:	eb000a73 	bl	c708 <strcpy>
    9d38:	e1a00004 	mov	r0, r4
    9d3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9d40:	00016f20 	.word	0x00016f20

00009d44 <CString::CString(CString const&)>:
    9d44:	e92d4070 	push	{r4, r5, r6, lr}
    9d48:	e1a04000 	mov	r4, r0
    9d4c:	e5910004 	ldr	r0, [r1, #4]
    9d50:	e59f3040 	ldr	r3, [pc, #64]	@ 9d98 <CString::CString(CString const&)+0x54>
    9d54:	e1a06001 	mov	r6, r1
    9d58:	e3500000 	cmp	r0, #0
    9d5c:	e30655d8 	movw	r5, #26072	@ 0x65d8
    9d60:	e3405001 	movt	r5, #1
    9d64:	e5843000 	str	r3, [r4]
    9d68:	01a00005 	moveq	r0, r5
    9d6c:	eb0009c5 	bl	c488 <strlen>
    9d70:	e2800001 	add	r0, r0, #1
    9d74:	e5840008 	str	r0, [r4, #8]
    9d78:	eb000ceb 	bl	d12c <operator new[](unsigned int)>
    9d7c:	e5961004 	ldr	r1, [r6, #4]
    9d80:	e5840004 	str	r0, [r4, #4]
    9d84:	e3510000 	cmp	r1, #0
    9d88:	01a01005 	moveq	r1, r5
    9d8c:	eb000a5d 	bl	c708 <strcpy>
    9d90:	e1a00004 	mov	r0, r4
    9d94:	e8bd8070 	pop	{r4, r5, r6, pc}
    9d98:	00016f20 	.word	0x00016f20

00009d9c <CString::CString(CString&&)>:
    9d9c:	e59fc024 	ldr	ip, [pc, #36]	@ 9dc8 <CString::CString(CString&&)+0x2c>
    9da0:	e3a02000 	mov	r2, #0
    9da4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    9da8:	e591e008 	ldr	lr, [r1, #8]
    9dac:	e580c000 	str	ip, [r0]
    9db0:	e591c004 	ldr	ip, [r1, #4]
    9db4:	e580e008 	str	lr, [r0, #8]
    9db8:	e5812008 	str	r2, [r1, #8]
    9dbc:	e580c004 	str	ip, [r0, #4]
    9dc0:	e5812004 	str	r2, [r1, #4]
    9dc4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    9dc8:	00016f20 	.word	0x00016f20

00009dcc <CString::operator char const*() const>:
    9dcc:	e5900004 	ldr	r0, [r0, #4]
    9dd0:	e30635d8 	movw	r3, #26072	@ 0x65d8
    9dd4:	e3403001 	movt	r3, #1
    9dd8:	e3500000 	cmp	r0, #0
    9ddc:	01a00003 	moveq	r0, r3
    9de0:	e12fff1e 	bx	lr

00009de4 <CString::operator=(char const*)>:
    9de4:	e92d4070 	push	{r4, r5, r6, lr}
    9de8:	e1a04000 	mov	r4, r0
    9dec:	e5900004 	ldr	r0, [r0, #4]
    9df0:	e1a05001 	mov	r5, r1
    9df4:	e3500000 	cmp	r0, #0
    9df8:	0a000000 	beq	9e00 <CString::operator=(char const*)+0x1c>
    9dfc:	eb000cd6 	bl	d15c <operator delete[](void*)>
    9e00:	e1a00005 	mov	r0, r5
    9e04:	eb00099f 	bl	c488 <strlen>
    9e08:	e2800001 	add	r0, r0, #1
    9e0c:	e5840008 	str	r0, [r4, #8]
    9e10:	eb000cc5 	bl	d12c <operator new[](unsigned int)>
    9e14:	e1a01005 	mov	r1, r5
    9e18:	e5840004 	str	r0, [r4, #4]
    9e1c:	eb000a39 	bl	c708 <strcpy>
    9e20:	e5940004 	ldr	r0, [r4, #4]
    9e24:	e8bd8070 	pop	{r4, r5, r6, pc}

00009e28 <CString::operator=(CString const&)>:
    9e28:	e92d4070 	push	{r4, r5, r6, lr}
    9e2c:	e1a04000 	mov	r4, r0
    9e30:	e5900004 	ldr	r0, [r0, #4]
    9e34:	e1a06001 	mov	r6, r1
    9e38:	e3500000 	cmp	r0, #0
    9e3c:	0a000000 	beq	9e44 <CString::operator=(CString const&)+0x1c>
    9e40:	eb000cc5 	bl	d15c <operator delete[](void*)>
    9e44:	e5960004 	ldr	r0, [r6, #4]
    9e48:	e30655d8 	movw	r5, #26072	@ 0x65d8
    9e4c:	e3405001 	movt	r5, #1
    9e50:	e3500000 	cmp	r0, #0
    9e54:	01a00005 	moveq	r0, r5
    9e58:	eb00098a 	bl	c488 <strlen>
    9e5c:	e2800001 	add	r0, r0, #1
    9e60:	e5840008 	str	r0, [r4, #8]
    9e64:	eb000cb0 	bl	d12c <operator new[](unsigned int)>
    9e68:	e5840004 	str	r0, [r4, #4]
    9e6c:	e5961004 	ldr	r1, [r6, #4]
    9e70:	e3510000 	cmp	r1, #0
    9e74:	01a01005 	moveq	r1, r5
    9e78:	eb000a22 	bl	c708 <strcpy>
    9e7c:	e1a00004 	mov	r0, r4
    9e80:	e8bd8070 	pop	{r4, r5, r6, pc}

00009e84 <CString::operator=(CString&&)>:
    9e84:	e92d4070 	push	{r4, r5, r6, lr}
    9e88:	e1a05000 	mov	r5, r0
    9e8c:	e5900004 	ldr	r0, [r0, #4]
    9e90:	e1a04001 	mov	r4, r1
    9e94:	e3500000 	cmp	r0, #0
    9e98:	0a000000 	beq	9ea0 <CString::operator=(CString&&)+0x1c>
    9e9c:	eb000cae 	bl	d15c <operator delete[](void*)>
    9ea0:	e5941008 	ldr	r1, [r4, #8]
    9ea4:	e3a03000 	mov	r3, #0
    9ea8:	e5942004 	ldr	r2, [r4, #4]
    9eac:	e1a00005 	mov	r0, r5
    9eb0:	e5851008 	str	r1, [r5, #8]
    9eb4:	e5852004 	str	r2, [r5, #4]
    9eb8:	e5843008 	str	r3, [r4, #8]
    9ebc:	e5843004 	str	r3, [r4, #4]
    9ec0:	e8bd8070 	pop	{r4, r5, r6, pc}

00009ec4 <CString::c_str() const>:
    9ec4:	e5900004 	ldr	r0, [r0, #4]
    9ec8:	e30635d8 	movw	r3, #26072	@ 0x65d8
    9ecc:	e3403001 	movt	r3, #1
    9ed0:	e3500000 	cmp	r0, #0
    9ed4:	01a00003 	moveq	r0, r3
    9ed8:	e12fff1e 	bx	lr

00009edc <CString::GetLength() const>:
    9edc:	e5900004 	ldr	r0, [r0, #4]
    9ee0:	e3500000 	cmp	r0, #0
    9ee4:	012fff1e 	bxeq	lr
    9ee8:	ea000966 	b	c488 <strlen>

00009eec <CString::Append(char const*)>:
    9eec:	e92d4070 	push	{r4, r5, r6, lr}
    9ef0:	e1a04000 	mov	r4, r0
    9ef4:	e5900004 	ldr	r0, [r0, #4]
    9ef8:	e3a03001 	mov	r3, #1
    9efc:	e1a06001 	mov	r6, r1
    9f00:	e3500000 	cmp	r0, #0
    9f04:	e5843008 	str	r3, [r4, #8]
    9f08:	0a000003 	beq	9f1c <CString::Append(char const*)+0x30>
    9f0c:	eb00095d 	bl	c488 <strlen>
    9f10:	e5943008 	ldr	r3, [r4, #8]
    9f14:	e0833000 	add	r3, r3, r0
    9f18:	e5843008 	str	r3, [r4, #8]
    9f1c:	e1a00006 	mov	r0, r6
    9f20:	eb000958 	bl	c488 <strlen>
    9f24:	e5943008 	ldr	r3, [r4, #8]
    9f28:	e0800003 	add	r0, r0, r3
    9f2c:	e5840008 	str	r0, [r4, #8]
    9f30:	eb000c7d 	bl	d12c <operator new[](unsigned int)>
    9f34:	e5941004 	ldr	r1, [r4, #4]
    9f38:	e1a05000 	mov	r5, r0
    9f3c:	e3510000 	cmp	r1, #0
    9f40:	05c01000 	strbeq	r1, [r0]
    9f44:	0a000004 	beq	9f5c <CString::Append(char const*)+0x70>
    9f48:	eb0009ee 	bl	c708 <strcpy>
    9f4c:	e5940004 	ldr	r0, [r4, #4]
    9f50:	e3500000 	cmp	r0, #0
    9f54:	0a000000 	beq	9f5c <CString::Append(char const*)+0x70>
    9f58:	eb000c7f 	bl	d15c <operator delete[](void*)>
    9f5c:	e1a01006 	mov	r1, r6
    9f60:	e1a00005 	mov	r0, r5
    9f64:	eb0009ff 	bl	c768 <strcat>
    9f68:	e5845004 	str	r5, [r4, #4]
    9f6c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009f70 <CString::operator+=(char const*)>:
    9f70:	e92d4010 	push	{r4, lr}
    9f74:	e1a04000 	mov	r4, r0
    9f78:	ebffffdb 	bl	9eec <CString::Append(char const*)>
    9f7c:	e1a00004 	mov	r0, r4
    9f80:	e8bd8010 	pop	{r4, pc}

00009f84 <CString::operator+=(CString const&)>:
    9f84:	e5911004 	ldr	r1, [r1, #4]
    9f88:	e30635d8 	movw	r3, #26072	@ 0x65d8
    9f8c:	e3403001 	movt	r3, #1
    9f90:	e92d4010 	push	{r4, lr}
    9f94:	e3510000 	cmp	r1, #0
    9f98:	e1a04000 	mov	r4, r0
    9f9c:	01a01003 	moveq	r1, r3
    9fa0:	ebffffd1 	bl	9eec <CString::Append(char const*)>
    9fa4:	e1a00004 	mov	r0, r4
    9fa8:	e8bd8010 	pop	{r4, pc}

00009fac <CString::Append(char)>:
    9fac:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    9fb0:	e1a02001 	mov	r2, r1
    9fb4:	e3a03000 	mov	r3, #0
    9fb8:	e24dd00c 	sub	sp, sp, #12
    9fbc:	e28d1004 	add	r1, sp, #4
    9fc0:	e5cd2004 	strb	r2, [sp, #4]
    9fc4:	e5cd3005 	strb	r3, [sp, #5]
    9fc8:	ebffffc7 	bl	9eec <CString::Append(char const*)>
    9fcc:	e28dd00c 	add	sp, sp, #12
    9fd0:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00009fd4 <CString::operator+=(char)>:
    9fd4:	e92d4010 	push	{r4, lr}
    9fd8:	e1a02001 	mov	r2, r1
    9fdc:	e1a04000 	mov	r4, r0
    9fe0:	e24dd008 	sub	sp, sp, #8
    9fe4:	e3a03000 	mov	r3, #0
    9fe8:	e28d1004 	add	r1, sp, #4
    9fec:	e5cd2004 	strb	r2, [sp, #4]
    9ff0:	e5cd3005 	strb	r3, [sp, #5]
    9ff4:	ebffffbc 	bl	9eec <CString::Append(char const*)>
    9ff8:	e1a00004 	mov	r0, r4
    9ffc:	e28dd008 	add	sp, sp, #8
    a000:	e8bd8010 	pop	{r4, pc}

0000a004 <CString::Compare(char const*) const>:
    a004:	e5900004 	ldr	r0, [r0, #4]
    a008:	ea000928 	b	c4b0 <strcmp>

0000a00c <CString::Find(char) const>:
    a00c:	e5902004 	ldr	r2, [r0, #4]
    a010:	e1d230d0 	ldrsb	r3, [r2]
    a014:	e3530000 	cmp	r3, #0
    a018:	0a000006 	beq	a038 <CString::Find(char) const+0x2c>
    a01c:	e3a00000 	mov	r0, #0
    a020:	e1510003 	cmp	r1, r3
    a024:	012fff1e 	bxeq	lr
    a028:	e1f230d1 	ldrsb	r3, [r2, #1]!
    a02c:	e2800001 	add	r0, r0, #1
    a030:	e3530000 	cmp	r3, #0
    a034:	1afffff9 	bne	a020 <CString::Find(char) const+0x14>
    a038:	e3e00000 	mvn	r0, #0
    a03c:	e12fff1e 	bx	lr

0000a040 <CString::Replace(char const*, char const*)>:
    a040:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a044:	e1d160d0 	ldrsb	r6, [r1]
    a048:	e3560000 	cmp	r6, #0
    a04c:	1a000001 	bne	a058 <CString::Replace(char const*, char const*)+0x18>
    a050:	e1a00006 	mov	r0, r6
    a054:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a058:	e5904004 	ldr	r4, [r0, #4]
    a05c:	e1a0a000 	mov	sl, r0
    a060:	e1a05001 	mov	r5, r1
    a064:	e1a07002 	mov	r7, r2
    a068:	e1a00004 	mov	r0, r4
    a06c:	eb000905 	bl	c488 <strlen>
    a070:	e2800001 	add	r0, r0, #1
    a074:	eb000c2c 	bl	d12c <operator new[](unsigned int)>
    a078:	e1a01004 	mov	r1, r4
    a07c:	e1a08000 	mov	r8, r0
    a080:	eb0009a0 	bl	c708 <strcpy>
    a084:	e59a0004 	ldr	r0, [sl, #4]
    a088:	e3500000 	cmp	r0, #0
    a08c:	0a000000 	beq	a094 <CString::Replace(char const*, char const*)+0x54>
    a090:	eb000c31 	bl	d15c <operator delete[](void*)>
    a094:	e3a00040 	mov	r0, #64	@ 0x40
    a098:	e1a04008 	mov	r4, r8
    a09c:	e58a0008 	str	r0, [sl, #8]
    a0a0:	e3a06000 	mov	r6, #0
    a0a4:	eb000c20 	bl	d12c <operator new[](unsigned int)>
    a0a8:	e58a0004 	str	r0, [sl, #4]
    a0ac:	e58a000c 	str	r0, [sl, #12]
    a0b0:	e1d510d0 	ldrsb	r1, [r5]
    a0b4:	e1a00004 	mov	r0, r4
    a0b8:	eb0009d2 	bl	c808 <strchr>
    a0bc:	e2509000 	subs	r9, r0, #0
    a0c0:	0a000032 	beq	a190 <CString::Replace(char const*, char const*)+0x150>
    a0c4:	e1540009 	cmp	r4, r9
    a0c8:	21a00004 	movcs	r0, r4
    a0cc:	2a00000a 	bcs	a0fc <CString::Replace(char const*, char const*)+0xbc>
    a0d0:	e3a01001 	mov	r1, #1
    a0d4:	e1a0000a 	mov	r0, sl
    a0d8:	e0d4b0d1 	ldrsb	fp, [r4], #1
    a0dc:	ebfffee8 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a0e0:	e59a300c 	ldr	r3, [sl, #12]
    a0e4:	e1590004 	cmp	r9, r4
    a0e8:	e2832001 	add	r2, r3, #1
    a0ec:	e58a200c 	str	r2, [sl, #12]
    a0f0:	e5c3b000 	strb	fp, [r3]
    a0f4:	1afffff5 	bne	a0d0 <CString::Replace(char const*, char const*)+0x90>
    a0f8:	e1a00009 	mov	r0, r9
    a0fc:	e1d530d1 	ldrsb	r3, [r5, #1]
    a100:	e2851001 	add	r1, r5, #1
    a104:	e2894001 	add	r4, r9, #1
    a108:	e3530000 	cmp	r3, #0
    a10c:	1a000003 	bne	a120 <CString::Replace(char const*, char const*)+0xe0>
    a110:	ea00000f 	b	a154 <CString::Replace(char const*, char const*)+0x114>
    a114:	e1f130d1 	ldrsb	r3, [r1, #1]!
    a118:	e3530000 	cmp	r3, #0
    a11c:	0a00000c 	beq	a154 <CString::Replace(char const*, char const*)+0x114>
    a120:	e0d420d1 	ldrsb	r2, [r4], #1
    a124:	e1520003 	cmp	r2, r3
    a128:	0afffff9 	beq	a114 <CString::Replace(char const*, char const*)+0xd4>
    a12c:	e1a04000 	mov	r4, r0
    a130:	e3a01001 	mov	r1, #1
    a134:	e1a0000a 	mov	r0, sl
    a138:	e0d490d1 	ldrsb	r9, [r4], #1
    a13c:	ebfffed0 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a140:	e59a300c 	ldr	r3, [sl, #12]
    a144:	e2832001 	add	r2, r3, #1
    a148:	e58a200c 	str	r2, [sl, #12]
    a14c:	e5c39000 	strb	r9, [r3]
    a150:	eaffffd6 	b	a0b0 <CString::Replace(char const*, char const*)+0x70>
    a154:	e1a00007 	mov	r0, r7
    a158:	eb0008ca 	bl	c488 <strlen>
    a15c:	e2509000 	subs	r9, r0, #0
    a160:	0a000002 	beq	a170 <CString::Replace(char const*, char const*)+0x130>
    a164:	e1a01009 	mov	r1, r9
    a168:	e1a0000a 	mov	r0, sl
    a16c:	ebfffec4 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a170:	e59a000c 	ldr	r0, [sl, #12]
    a174:	e1a01007 	mov	r1, r7
    a178:	eb000962 	bl	c708 <strcpy>
    a17c:	e59a300c 	ldr	r3, [sl, #12]
    a180:	e2866001 	add	r6, r6, #1
    a184:	e0833009 	add	r3, r3, r9
    a188:	e58a300c 	str	r3, [sl, #12]
    a18c:	eaffffc7 	b	a0b0 <CString::Replace(char const*, char const*)+0x70>
    a190:	e1a00004 	mov	r0, r4
    a194:	eb0008bb 	bl	c488 <strlen>
    a198:	e2505000 	subs	r5, r0, #0
    a19c:	0a000002 	beq	a1ac <CString::Replace(char const*, char const*)+0x16c>
    a1a0:	e1a01005 	mov	r1, r5
    a1a4:	e1a0000a 	mov	r0, sl
    a1a8:	ebfffeb5 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a1ac:	e1a01004 	mov	r1, r4
    a1b0:	e59a000c 	ldr	r0, [sl, #12]
    a1b4:	eb000953 	bl	c708 <strcpy>
    a1b8:	e59a300c 	ldr	r3, [sl, #12]
    a1bc:	e1a00008 	mov	r0, r8
    a1c0:	e3a02000 	mov	r2, #0
    a1c4:	e0831005 	add	r1, r3, r5
    a1c8:	e58a100c 	str	r1, [sl, #12]
    a1cc:	e7c32005 	strb	r2, [r3, r5]
    a1d0:	eb000be1 	bl	d15c <operator delete[](void*)>
    a1d4:	e1a00006 	mov	r0, r6
    a1d8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a1dc <CString::PutChar(char, unsigned int)>:
    a1dc:	e92d4070 	push	{r4, r5, r6, lr}
    a1e0:	e2524000 	subs	r4, r2, #0
    a1e4:	08bd8070 	popeq	{r4, r5, r6, pc}
    a1e8:	e1a06001 	mov	r6, r1
    a1ec:	e1a01004 	mov	r1, r4
    a1f0:	e1a05000 	mov	r5, r0
    a1f4:	ebfffea2 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a1f8:	e2442001 	sub	r2, r4, #1
    a1fc:	e595300c 	ldr	r3, [r5, #12]
    a200:	e2422001 	sub	r2, r2, #1
    a204:	e3720001 	cmn	r2, #1
    a208:	e2830001 	add	r0, r3, #1
    a20c:	e585000c 	str	r0, [r5, #12]
    a210:	e5c36000 	strb	r6, [r3]
    a214:	1afffff8 	bne	a1fc <CString::PutChar(char, unsigned int)+0x20>
    a218:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a21c <CString::PutString(char const*)>:
    a21c:	e92d4070 	push	{r4, r5, r6, lr}
    a220:	e1a04000 	mov	r4, r0
    a224:	e1a00001 	mov	r0, r1
    a228:	e1a06001 	mov	r6, r1
    a22c:	eb000895 	bl	c488 <strlen>
    a230:	e2505000 	subs	r5, r0, #0
    a234:	0a000002 	beq	a244 <CString::PutString(char const*)+0x28>
    a238:	e1a01005 	mov	r1, r5
    a23c:	e1a00004 	mov	r0, r4
    a240:	ebfffe8f 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a244:	e594000c 	ldr	r0, [r4, #12]
    a248:	e1a01006 	mov	r1, r6
    a24c:	eb00092d 	bl	c708 <strcpy>
    a250:	e594300c 	ldr	r3, [r4, #12]
    a254:	e0833005 	add	r3, r3, r5
    a258:	e584300c 	str	r3, [r4, #12]
    a25c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a260 <CString::ReserveSpace(unsigned int)>:
    a260:	e3510000 	cmp	r1, #0
    a264:	012fff1e 	bxeq	lr
    a268:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a26c:	e1a05000 	mov	r5, r0
    a270:	e990004c 	ldmib	r0, {r2, r3, r6}
    a274:	e0466002 	sub	r6, r6, r2
    a278:	e0811006 	add	r1, r1, r6
    a27c:	e2812001 	add	r2, r1, #1
    a280:	e1520003 	cmp	r2, r3
    a284:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    a288:	e2814041 	add	r4, r1, #65	@ 0x41
    a28c:	e1a00004 	mov	r0, r4
    a290:	eb000ba5 	bl	d12c <operator new[](unsigned int)>
    a294:	e595300c 	ldr	r3, [r5, #12]
    a298:	e3a02000 	mov	r2, #0
    a29c:	e1a07000 	mov	r7, r0
    a2a0:	e5c32000 	strb	r2, [r3]
    a2a4:	e5951004 	ldr	r1, [r5, #4]
    a2a8:	eb000916 	bl	c708 <strcpy>
    a2ac:	e5950004 	ldr	r0, [r5, #4]
    a2b0:	e3500000 	cmp	r0, #0
    a2b4:	0a000000 	beq	a2bc <CString::ReserveSpace(unsigned int)+0x5c>
    a2b8:	eb000ba7 	bl	d15c <operator delete[](void*)>
    a2bc:	e0876006 	add	r6, r7, r6
    a2c0:	e5857004 	str	r7, [r5, #4]
    a2c4:	e5854008 	str	r4, [r5, #8]
    a2c8:	e585600c 	str	r6, [r5, #12]
    a2cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a2d0 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    a2d0:	e1510002 	cmp	r1, r2
    a2d4:	e92d4070 	push	{r4, r5, r6, lr}
    a2d8:	23a0c001 	movcs	ip, #1
    a2dc:	3a00001b 	bcc	a350 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x80>
    a2e0:	e00c0c92 	mul	ip, r2, ip
    a2e4:	e734fc11 	udiv	r4, r1, ip
    a2e8:	e1a0e004 	mov	lr, r4
    a2ec:	e1540002 	cmp	r4, r2
    a2f0:	2afffffa 	bcs	a2e0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
    a2f4:	e2233001 	eor	r3, r3, #1
    a2f8:	e1a05000 	mov	r5, r0
    a2fc:	e1a06283 	lsl	r6, r3, #5
    a300:	e2866037 	add	r6, r6, #55	@ 0x37
    a304:	e6ef6076 	uxtb	r6, r6
    a308:	ea000002 	b	a318 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
    a30c:	e73ef411 	udiv	lr, r1, r4
    a310:	e1a0c004 	mov	ip, r4
    a314:	e1a0400e 	mov	r4, lr
    a318:	e6ef307e 	uxtb	r3, lr
    a31c:	e061149c 	mls	r1, ip, r4, r1
    a320:	e0864003 	add	r4, r6, r3
    a324:	e2833030 	add	r3, r3, #48	@ 0x30
    a328:	e35e0009 	cmp	lr, #9
    a32c:	86af3074 	sxtbhi	r3, r4
    a330:	96af3073 	sxtbls	r3, r3
    a334:	e734f21c 	udiv	r4, ip, r2
    a338:	e15c0002 	cmp	ip, r2
    a33c:	e4c53001 	strb	r3, [r5], #1
    a340:	2afffff1 	bcs	a30c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
    a344:	e3a03000 	mov	r3, #0
    a348:	e5c53000 	strb	r3, [r5]
    a34c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a350:	e1a0e001 	mov	lr, r1
    a354:	e3a0c001 	mov	ip, #1
    a358:	e1a04001 	mov	r4, r1
    a35c:	eaffffe4 	b	a2f4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0000a360 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    a360:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a364:	e1a0b002 	mov	fp, r2
    a368:	e1a0a000 	mov	sl, r0
    a36c:	e24dd014 	sub	sp, sp, #20
    a370:	e3a07000 	mov	r7, #0
    a374:	e59d8038 	ldr	r8, [sp, #56]	@ 0x38
    a378:	e58d3004 	str	r3, [sp, #4]
    a37c:	e1520008 	cmp	r2, r8
    a380:	e5dd903c 	ldrb	r9, [sp, #60]	@ 0x3c
    a384:	e2d33000 	sbcs	r3, r3, #0
    a388:	23a05001 	movcs	r5, #1
    a38c:	259d4004 	ldrcs	r4, [sp, #4]
    a390:	3a000040 	bcc	a498 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x138>
    a394:	e0030798 	mul	r3, r8, r7
    a398:	e1a0000b 	mov	r0, fp
    a39c:	e0875895 	umull	r5, r7, r5, r8
    a3a0:	e1a01004 	mov	r1, r4
    a3a4:	e0837007 	add	r7, r3, r7
    a3a8:	e1a02005 	mov	r2, r5
    a3ac:	e1a03007 	mov	r3, r7
    a3b0:	fa002e2a 	blx	15c60 <__aeabi_uldivmod>
    a3b4:	e1500008 	cmp	r0, r8
    a3b8:	e2d13000 	sbcs	r3, r1, #0
    a3bc:	2afffff4 	bcs	a394 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x34>
    a3c0:	e1a04000 	mov	r4, r0
    a3c4:	e1a06001 	mov	r6, r1
    a3c8:	e2299001 	eor	r9, r9, #1
    a3cc:	e58da00c 	str	sl, [sp, #12]
    a3d0:	e58d8038 	str	r8, [sp, #56]	@ 0x38
    a3d4:	e1a09289 	lsl	r9, r9, #5
    a3d8:	e2899037 	add	r9, r9, #55	@ 0x37
    a3dc:	e6ef3079 	uxtb	r3, r9
    a3e0:	e58d3008 	str	r3, [sp, #8]
    a3e4:	ea000003 	b	a3f8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
    a3e8:	fa002e1c 	blx	15c60 <__aeabi_uldivmod>
    a3ec:	e1a07008 	mov	r7, r8
    a3f0:	e1a04000 	mov	r4, r0
    a3f4:	e1a06001 	mov	r6, r1
    a3f8:	e59d1004 	ldr	r1, [sp, #4]
    a3fc:	e1a02005 	mov	r2, r5
    a400:	e1a03007 	mov	r3, r7
    a404:	e1a0000b 	mov	r0, fp
    a408:	fa002e14 	blx	15c60 <__aeabi_uldivmod>
    a40c:	e1a08003 	mov	r8, r3
    a410:	e59d3008 	ldr	r3, [sp, #8]
    a414:	e354000a 	cmp	r4, #10
    a418:	e6ef4074 	uxtb	r4, r4
    a41c:	e2d66000 	sbcs	r6, r6, #0
    a420:	e0831004 	add	r1, r3, r4
    a424:	e2844030 	add	r4, r4, #48	@ 0x30
    a428:	e1a09002 	mov	r9, r2
    a42c:	e3a03000 	mov	r3, #0
    a430:	e6af1071 	sxtb	r1, r1
    a434:	e1a00005 	mov	r0, r5
    a438:	36af1074 	sxtbcc	r1, r4
    a43c:	e1a0b002 	mov	fp, r2
    a440:	e4ca1001 	strb	r1, [sl], #1
    a444:	e1a01007 	mov	r1, r7
    a448:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
    a44c:	e58d8004 	str	r8, [sp, #4]
    a450:	fa002e02 	blx	15c60 <__aeabi_uldivmod>
    a454:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
    a458:	e1a02000 	mov	r2, r0
    a45c:	e1a03001 	mov	r3, r1
    a460:	e1a00009 	mov	r0, r9
    a464:	e155000c 	cmp	r5, ip
    a468:	e1a01008 	mov	r1, r8
    a46c:	e1a05002 	mov	r5, r2
    a470:	e1a08003 	mov	r8, r3
    a474:	e2d77000 	sbcs	r7, r7, #0
    a478:	2affffda 	bcs	a3e8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x88>
    a47c:	e1a0c00a 	mov	ip, sl
    a480:	e59da00c 	ldr	sl, [sp, #12]
    a484:	e3a03000 	mov	r3, #0
    a488:	e1a0000a 	mov	r0, sl
    a48c:	e5cc3000 	strb	r3, [ip]
    a490:	e28dd014 	add	sp, sp, #20
    a494:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a498:	e59d6004 	ldr	r6, [sp, #4]
    a49c:	e1a04002 	mov	r4, r2
    a4a0:	e3a05001 	mov	r5, #1
    a4a4:	eaffffc7 	b	a3c8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x68>

0000a4a8 <CString::ftoa(char*, double, unsigned int)>:
    a4a8:	eeb50bc0 	vcmpe.f64	d0, #0.0
    a4ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a4b0:	eddf0b8e 	vldr	d16, [pc, #568]	@ a6f0 <CString::ftoa(char*, double, unsigned int)+0x248>
    a4b4:	ed2d8b02 	vpush	{d8}
    a4b8:	eeb08b40 	vmov.f64	d8, d0
    a4bc:	e1a06000 	mov	r6, r0
    a4c0:	e24dd014 	sub	sp, sp, #20
    a4c4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    a4c8:	e1a04000 	mov	r4, r0
    a4cc:	e1a07001 	mov	r7, r1
    a4d0:	4eb18b40 	vnegmi.f64	d8, d0
    a4d4:	43a0302d 	movmi	r3, #45	@ 0x2d
    a4d8:	44c63001 	strbmi	r3, [r6], #1
    a4dc:	eeb48be0 	vcmpe.f64	d8, d16
    a4e0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    a4e4:	ca00006d 	bgt	a6a0 <CString::ftoa(char*, double, unsigned int)+0x1f8>
    a4e8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    a4ec:	ee175a90 	vmov	r5, s15
    a4f0:	e3550009 	cmp	r5, #9
    a4f4:	83a02001 	movhi	r2, #1
    a4f8:	83a0100a 	movhi	r1, #10
    a4fc:	9a00006f 	bls	a6c0 <CString::ftoa(char*, double, unsigned int)+0x218>
    a500:	e0020291 	mul	r2, r1, r2
    a504:	e733f215 	udiv	r3, r5, r2
    a508:	e3530009 	cmp	r3, #9
    a50c:	8afffffb 	bhi	a500 <CString::ftoa(char*, double, unsigned int)+0x58>
    a510:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
    a514:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
    a518:	e1a0e006 	mov	lr, r6
    a51c:	e1a01005 	mov	r1, r5
    a520:	ea000001 	b	a52c <CString::ftoa(char*, double, unsigned int)+0x84>
    a524:	e1a02003 	mov	r2, r3
    a528:	e733f311 	udiv	r3, r1, r3
    a52c:	e6ef0073 	uxtb	r0, r3
    a530:	e3530009 	cmp	r3, #9
    a534:	e739f211 	udiv	r9, r1, r2
    a538:	e280c057 	add	ip, r0, #87	@ 0x57
    a53c:	e2800030 	add	r0, r0, #48	@ 0x30
    a540:	e6afc07c 	sxtb	ip, ip
    a544:	96afc070 	sxtbls	ip, r0
    a548:	e0830298 	umull	r0, r3, r8, r2
    a54c:	e0611992 	mls	r1, r2, r9, r1
    a550:	e3520009 	cmp	r2, #9
    a554:	e4cec001 	strb	ip, [lr], #1
    a558:	e1a031a3 	lsr	r3, r3, #3
    a55c:	8afffff0 	bhi	a524 <CString::ftoa(char*, double, unsigned int)+0x7c>
    a560:	e3a03000 	mov	r3, #0
    a564:	e3570000 	cmp	r7, #0
    a568:	e5ce3000 	strb	r3, [lr]
    a56c:	1a000003 	bne	a580 <CString::ftoa(char*, double, unsigned int)+0xd8>
    a570:	e1a00004 	mov	r0, r4
    a574:	e28dd014 	add	sp, sp, #20
    a578:	ecbd8b02 	vpop	{d8}
    a57c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a580:	e1a00006 	mov	r0, r6
    a584:	eb0007bf 	bl	c488 <strlen>
    a588:	e3570009 	cmp	r7, #9
    a58c:	e0868000 	add	r8, r6, r0
    a590:	e3a0302e 	mov	r3, #46	@ 0x2e
    a594:	e7c63000 	strb	r3, [r6, r0]
    a598:	31a06007 	movcc	r6, r7
    a59c:	23a06009 	movcs	r6, #9
    a5a0:	e3570001 	cmp	r7, #1
    a5a4:	e2887001 	add	r7, r8, #1
    a5a8:	0a000049 	beq	a6d4 <CString::ftoa(char*, double, unsigned int)+0x22c>
    a5ac:	e3a0200a 	mov	r2, #10
    a5b0:	e3a03002 	mov	r3, #2
    a5b4:	e1a01002 	mov	r1, r2
    a5b8:	e2833001 	add	r3, r3, #1
    a5bc:	e0020291 	mul	r2, r1, r2
    a5c0:	e1560003 	cmp	r6, r3
    a5c4:	2afffffb 	bcs	a5b8 <CString::ftoa(char*, double, unsigned int)+0x110>
    a5c8:	ee072a90 	vmov	s15, r2
    a5cc:	eef81b67 	vcvt.f64.u32	d17, s15
    a5d0:	ee075a90 	vmov	s15, r5
    a5d4:	eef80b67 	vcvt.f64.u32	d16, s15
    a5d8:	ee388b60 	vsub.f64	d8, d8, d16
    a5dc:	ee288b21 	vmul.f64	d8, d8, d17
    a5e0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    a5e4:	ee172a90 	vmov	r2, s15
    a5e8:	e3520009 	cmp	r2, #9
    a5ec:	83a01001 	movhi	r1, #1
    a5f0:	83a0c00a 	movhi	ip, #10
    a5f4:	9a000038 	bls	a6dc <CString::ftoa(char*, double, unsigned int)+0x234>
    a5f8:	e001019c 	mul	r1, ip, r1
    a5fc:	e730f112 	udiv	r0, r2, r1
    a600:	e1a03000 	mov	r3, r0
    a604:	e3500009 	cmp	r0, #9
    a608:	8afffffa 	bhi	a5f8 <CString::ftoa(char*, double, unsigned int)+0x150>
    a60c:	e30ceccd 	movw	lr, #52429	@ 0xcccd
    a610:	e34ceccc 	movt	lr, #52428	@ 0xcccc
    a614:	e28dc004 	add	ip, sp, #4
    a618:	ea000002 	b	a628 <CString::ftoa(char*, double, unsigned int)+0x180>
    a61c:	e1a01003 	mov	r1, r3
    a620:	e733f312 	udiv	r3, r2, r3
    a624:	e1a00003 	mov	r0, r3
    a628:	e0622091 	mls	r2, r1, r0, r2
    a62c:	e6ef0073 	uxtb	r0, r3
    a630:	e2805057 	add	r5, r0, #87	@ 0x57
    a634:	e3530009 	cmp	r3, #9
    a638:	e2800030 	add	r0, r0, #48	@ 0x30
    a63c:	86af0075 	sxtbhi	r0, r5
    a640:	e083519e 	umull	r5, r3, lr, r1
    a644:	96af0070 	sxtbls	r0, r0
    a648:	e3510009 	cmp	r1, #9
    a64c:	e4cc0001 	strb	r0, [ip], #1
    a650:	e1a031a3 	lsr	r3, r3, #3
    a654:	8afffff0 	bhi	a61c <CString::ftoa(char*, double, unsigned int)+0x174>
    a658:	e3a03000 	mov	r3, #0
    a65c:	e28d0004 	add	r0, sp, #4
    a660:	e5cc3000 	strb	r3, [ip]
    a664:	eb000787 	bl	c488 <strlen>
    a668:	e0566000 	subs	r6, r6, r0
    a66c:	0a000016 	beq	a6cc <CString::ftoa(char*, double, unsigned int)+0x224>
    a670:	e2866001 	add	r6, r6, #1
    a674:	e3a03030 	mov	r3, #48	@ 0x30
    a678:	e0880006 	add	r0, r8, r6
    a67c:	e4c73001 	strb	r3, [r7], #1
    a680:	e1500007 	cmp	r0, r7
    a684:	1afffffc 	bne	a67c <CString::ftoa(char*, double, unsigned int)+0x1d4>
    a688:	e28d1004 	add	r1, sp, #4
    a68c:	eb00081d 	bl	c708 <strcpy>
    a690:	e1a00004 	mov	r0, r4
    a694:	e28dd014 	add	sp, sp, #20
    a698:	ecbd8b02 	vpop	{d8}
    a69c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a6a0:	e1a00006 	mov	r0, r6
    a6a4:	e306119c 	movw	r1, #24988	@ 0x619c
    a6a8:	e3401001 	movt	r1, #1
    a6ac:	eb000815 	bl	c708 <strcpy>
    a6b0:	e1a00004 	mov	r0, r4
    a6b4:	e28dd014 	add	sp, sp, #20
    a6b8:	ecbd8b02 	vpop	{d8}
    a6bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a6c0:	e1a03005 	mov	r3, r5
    a6c4:	e3a02001 	mov	r2, #1
    a6c8:	eaffff90 	b	a510 <CString::ftoa(char*, double, unsigned int)+0x68>
    a6cc:	e1a00007 	mov	r0, r7
    a6d0:	eaffffec 	b	a688 <CString::ftoa(char*, double, unsigned int)+0x1e0>
    a6d4:	eef21b04 	vmov.f64	d17, #36	@ 0x41200000  10.0
    a6d8:	eaffffbc 	b	a5d0 <CString::ftoa(char*, double, unsigned int)+0x128>
    a6dc:	e1a03002 	mov	r3, r2
    a6e0:	e3a01001 	mov	r1, #1
    a6e4:	e1a00002 	mov	r0, r2
    a6e8:	eaffffc7 	b	a60c <CString::ftoa(char*, double, unsigned int)+0x164>
    a6ec:	e320f000 	nop	{0}
    a6f0:	ffe00000 	.word	0xffe00000
    a6f4:	41efffff 	.word	0x41efffff

0000a6f8 <CString::FormatV(char const*, std::__va_list)>:
    a6f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6fc:	e1a04001 	mov	r4, r1
    a700:	e24dd05c 	sub	sp, sp, #92	@ 0x5c
    a704:	e58d001c 	str	r0, [sp, #28]
    a708:	e5900004 	ldr	r0, [r0, #4]
    a70c:	e58d2010 	str	r2, [sp, #16]
    a710:	e3500000 	cmp	r0, #0
    a714:	0a000000 	beq	a71c <CString::FormatV(char const*, std::__va_list)+0x24>
    a718:	eb000a8f 	bl	d15c <operator delete[](void*)>
    a71c:	e59db01c 	ldr	fp, [sp, #28]
    a720:	e3a00040 	mov	r0, #64	@ 0x40
    a724:	e1a05004 	mov	r5, r4
    a728:	e58b0008 	str	r0, [fp, #8]
    a72c:	eb000a7e 	bl	d12c <operator new[](unsigned int)>
    a730:	e58b0004 	str	r0, [fp, #4]
    a734:	e58b000c 	str	r0, [fp, #12]
    a738:	e1d440d0 	ldrsb	r4, [r4]
    a73c:	e3540000 	cmp	r4, #0
    a740:	0a000066 	beq	a8e0 <CString::FormatV(char const*, std::__va_list)+0x1e8>
    a744:	e3540025 	cmp	r4, #37	@ 0x25
    a748:	1a000057 	bne	a8ac <CString::FormatV(char const*, std::__va_list)+0x1b4>
    a74c:	e1d530d1 	ldrsb	r3, [r5, #1]
    a750:	e3530025 	cmp	r3, #37	@ 0x25
    a754:	0a000065 	beq	a8f0 <CString::FormatV(char const*, std::__va_list)+0x1f8>
    a758:	e3530023 	cmp	r3, #35	@ 0x23
    a75c:	e3a04000 	mov	r4, #0
    a760:	12855001 	addne	r5, r5, #1
    a764:	13a00000 	movne	r0, #0
    a768:	03a00001 	moveq	r0, #1
    a76c:	01d530d2 	ldrsbeq	r3, [r5, #2]
    a770:	02855002 	addeq	r5, r5, #2
    a774:	e353002d 	cmp	r3, #45	@ 0x2d
    a778:	03a02001 	moveq	r2, #1
    a77c:	13a02000 	movne	r2, #0
    a780:	058d2014 	streq	r2, [sp, #20]
    a784:	01d530d1 	ldrsbeq	r3, [r5, #1]
    a788:	00855002 	addeq	r5, r5, r2
    a78c:	158d2014 	strne	r2, [sp, #20]
    a790:	e3530030 	cmp	r3, #48	@ 0x30
    a794:	03a02001 	moveq	r2, #1
    a798:	13a02000 	movne	r2, #0
    a79c:	e58d2018 	str	r2, [sp, #24]
    a7a0:	01d530d1 	ldrsbeq	r3, [r5, #1]
    a7a4:	02855001 	addeq	r5, r5, #1
    a7a8:	e2432030 	sub	r2, r3, #48	@ 0x30
    a7ac:	e6ef2072 	uxtb	r2, r2
    a7b0:	e3520009 	cmp	r2, #9
    a7b4:	8a000007 	bhi	a7d8 <CString::FormatV(char const*, std::__va_list)+0xe0>
    a7b8:	e3a0100a 	mov	r1, #10
    a7bc:	e0243491 	mla	r4, r1, r4, r3
    a7c0:	e1f530d1 	ldrsb	r3, [r5, #1]!
    a7c4:	e2432030 	sub	r2, r3, #48	@ 0x30
    a7c8:	e2444030 	sub	r4, r4, #48	@ 0x30
    a7cc:	e6ef2072 	uxtb	r2, r2
    a7d0:	e3520009 	cmp	r2, #9
    a7d4:	9afffff8 	bls	a7bc <CString::FormatV(char const*, std::__va_list)+0xc4>
    a7d8:	e353002e 	cmp	r3, #46	@ 0x2e
    a7dc:	13a01006 	movne	r1, #6
    a7e0:	11d5a0d0 	ldrsbne	sl, [r5]
    a7e4:	0a0001c5 	beq	af00 <CString::FormatV(char const*, std::__va_list)+0x808>
    a7e8:	e35a006c 	cmp	sl, #108	@ 0x6c
    a7ec:	13a03000 	movne	r3, #0
    a7f0:	158d3004 	strne	r3, [sp, #4]
    a7f4:	1a000007 	bne	a818 <CString::FormatV(char const*, std::__va_list)+0x120>
    a7f8:	e1d5a0d1 	ldrsb	sl, [r5, #1]
    a7fc:	e35a006c 	cmp	sl, #108	@ 0x6c
    a800:	03a03001 	moveq	r3, #1
    a804:	13a03000 	movne	r3, #0
    a808:	e58d3004 	str	r3, [sp, #4]
    a80c:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
    a810:	02855001 	addeq	r5, r5, #1
    a814:	e2855001 	add	r5, r5, #1
    a818:	e24a3058 	sub	r3, sl, #88	@ 0x58
    a81c:	e3530020 	cmp	r3, #32
    a820:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a824:	ea00003a 	b	a914 <CString::FormatV(char const*, std::__va_list)+0x21c>
    a828:	0000a944 	.word	0x0000a944
    a82c:	0000a914 	.word	0x0000a914
    a830:	0000a914 	.word	0x0000a914
    a834:	0000a914 	.word	0x0000a914
    a838:	0000a914 	.word	0x0000a914
    a83c:	0000a914 	.word	0x0000a914
    a840:	0000a914 	.word	0x0000a914
    a844:	0000a914 	.word	0x0000a914
    a848:	0000a914 	.word	0x0000a914
    a84c:	0000a914 	.word	0x0000a914
    a850:	0000a914 	.word	0x0000a914
    a854:	0000ad10 	.word	0x0000ad10
    a858:	0000ab64 	.word	0x0000ab64
    a85c:	0000a914 	.word	0x0000a914
    a860:	0000ad58 	.word	0x0000ad58
    a864:	0000a914 	.word	0x0000a914
    a868:	0000a914 	.word	0x0000a914
    a86c:	0000ab64 	.word	0x0000ab64
    a870:	0000a914 	.word	0x0000a914
    a874:	0000a914 	.word	0x0000a914
    a878:	0000a914 	.word	0x0000a914
    a87c:	0000a914 	.word	0x0000a914
    a880:	0000a914 	.word	0x0000a914
    a884:	0000ae34 	.word	0x0000ae34
    a888:	0000a944 	.word	0x0000a944
    a88c:	0000a914 	.word	0x0000a914
    a890:	0000a914 	.word	0x0000a914
    a894:	0000add4 	.word	0x0000add4
    a898:	0000a914 	.word	0x0000a914
    a89c:	0000b120 	.word	0x0000b120
    a8a0:	0000a914 	.word	0x0000a914
    a8a4:	0000a914 	.word	0x0000a914
    a8a8:	0000a944 	.word	0x0000a944
    a8ac:	e3a01001 	mov	r1, #1
    a8b0:	e1a0000b 	mov	r0, fp
    a8b4:	ebfffcf2 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a8b8:	e59b300c 	ldr	r3, [fp, #12]
    a8bc:	e2832001 	add	r2, r3, #1
    a8c0:	e58b200c 	str	r2, [fp, #12]
    a8c4:	e5c34000 	strb	r4, [r3]
    a8c8:	e2855001 	add	r5, r5, #1
    a8cc:	e1d540d0 	ldrsb	r4, [r5]
    a8d0:	e3540000 	cmp	r4, #0
    a8d4:	1affff9a 	bne	a744 <CString::FormatV(char const*, std::__va_list)+0x4c>
    a8d8:	e59d301c 	ldr	r3, [sp, #28]
    a8dc:	e593000c 	ldr	r0, [r3, #12]
    a8e0:	e3a03000 	mov	r3, #0
    a8e4:	e5c03000 	strb	r3, [r0]
    a8e8:	e28dd05c 	add	sp, sp, #92	@ 0x5c
    a8ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8f0:	e3a01001 	mov	r1, #1
    a8f4:	e1a0000b 	mov	r0, fp
    a8f8:	ebfffce1 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a8fc:	e59b300c 	ldr	r3, [fp, #12]
    a900:	e2855002 	add	r5, r5, #2
    a904:	e2832001 	add	r2, r3, #1
    a908:	e58b200c 	str	r2, [fp, #12]
    a90c:	e5c34000 	strb	r4, [r3]
    a910:	eaffffed 	b	a8cc <CString::FormatV(char const*, std::__va_list)+0x1d4>
    a914:	e3a01001 	mov	r1, #1
    a918:	e1a0000b 	mov	r0, fp
    a91c:	ebfffcd8 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a920:	e59b300c 	ldr	r3, [fp, #12]
    a924:	e3a01001 	mov	r1, #1
    a928:	e1a0000b 	mov	r0, fp
    a92c:	e2832001 	add	r2, r3, #1
    a930:	e58b200c 	str	r2, [fp, #12]
    a934:	e3a02025 	mov	r2, #37	@ 0x25
    a938:	e5c32000 	strb	r2, [r3]
    a93c:	e1d540d0 	ldrsb	r4, [r5]
    a940:	eaffffdb 	b	a8b4 <CString::FormatV(char const*, std::__va_list)+0x1bc>
    a944:	e3500000 	cmp	r0, #0
    a948:	03a0c010 	moveq	ip, #16
    a94c:	1a0001dd 	bne	b0c8 <CString::FormatV(char const*, std::__va_list)+0x9d0>
    a950:	e59d3004 	ldr	r3, [sp, #4]
    a954:	e3530000 	cmp	r3, #0
    a958:	e59d3010 	ldr	r3, [sp, #16]
    a95c:	0a000145 	beq	ae78 <CString::FormatV(char const*, std::__va_list)+0x780>
    a960:	e2833007 	add	r3, r3, #7
    a964:	e3a09000 	mov	r9, #0
    a968:	e3c33007 	bic	r3, r3, #7
    a96c:	e5932004 	ldr	r2, [r3, #4]
    a970:	e4938008 	ldr	r8, [r3], #8
    a974:	e58d3010 	str	r3, [sp, #16]
    a978:	e158000c 	cmp	r8, ip
    a97c:	e58d2008 	str	r2, [sp, #8]
    a980:	e2d23000 	sbcs	r3, r2, #0
    a984:	e58d8004 	str	r8, [sp, #4]
    a988:	3a0002a6 	bcc	b428 <CString::FormatV(char const*, std::__va_list)+0xd30>
    a98c:	e3a07001 	mov	r7, #1
    a990:	e58d400c 	str	r4, [sp, #12]
    a994:	e1a03007 	mov	r3, r7
    a998:	e1a0600c 	mov	r6, ip
    a99c:	e1a07005 	mov	r7, r5
    a9a0:	e1a04002 	mov	r4, r2
    a9a4:	e1a05003 	mov	r5, r3
    a9a8:	e0030996 	mul	r3, r6, r9
    a9ac:	e1a00008 	mov	r0, r8
    a9b0:	e0895695 	umull	r5, r9, r5, r6
    a9b4:	e1a01004 	mov	r1, r4
    a9b8:	e0839009 	add	r9, r3, r9
    a9bc:	e1a02005 	mov	r2, r5
    a9c0:	e1a03009 	mov	r3, r9
    a9c4:	fa002ca5 	blx	15c60 <__aeabi_uldivmod>
    a9c8:	e1500006 	cmp	r0, r6
    a9cc:	e2d13000 	sbcs	r3, r1, #0
    a9d0:	2afffff4 	bcs	a9a8 <CString::FormatV(char const*, std::__va_list)+0x2b0>
    a9d4:	e1a03005 	mov	r3, r5
    a9d8:	e59d400c 	ldr	r4, [sp, #12]
    a9dc:	e1a0c006 	mov	ip, r6
    a9e0:	e1a05007 	mov	r5, r7
    a9e4:	e1a06000 	mov	r6, r0
    a9e8:	e1a08001 	mov	r8, r1
    a9ec:	e1a07003 	mov	r7, r3
    a9f0:	e25aa058 	subs	sl, sl, #88	@ 0x58
    a9f4:	e58db024 	str	fp, [sp, #36]	@ 0x24
    a9f8:	13a0a001 	movne	sl, #1
    a9fc:	e58d4020 	str	r4, [sp, #32]
    aa00:	e58d5028 	str	r5, [sp, #40]	@ 0x28
    aa04:	e1a0a28a 	lsl	sl, sl, #5
    aa08:	e28a3037 	add	r3, sl, #55	@ 0x37
    aa0c:	e28da034 	add	sl, sp, #52	@ 0x34
    aa10:	e1a0b00a 	mov	fp, sl
    aa14:	e58da02c 	str	sl, [sp, #44]	@ 0x2c
    aa18:	e58d300c 	str	r3, [sp, #12]
    aa1c:	e1a0a00c 	mov	sl, ip
    aa20:	ea000003 	b	aa34 <CString::FormatV(char const*, std::__va_list)+0x33c>
    aa24:	fa002c8d 	blx	15c60 <__aeabi_uldivmod>
    aa28:	e1a09004 	mov	r9, r4
    aa2c:	e1a06000 	mov	r6, r0
    aa30:	e1a08001 	mov	r8, r1
    aa34:	e99d0003 	ldmib	sp, {r0, r1}
    aa38:	e1a02007 	mov	r2, r7
    aa3c:	e1a03009 	mov	r3, r9
    aa40:	fa002c86 	blx	15c60 <__aeabi_uldivmod>
    aa44:	e1a04003 	mov	r4, r3
    aa48:	e59d300c 	ldr	r3, [sp, #12]
    aa4c:	e356000a 	cmp	r6, #10
    aa50:	e6ef6076 	uxtb	r6, r6
    aa54:	e2d88000 	sbcs	r8, r8, #0
    aa58:	e0833006 	add	r3, r3, r6
    aa5c:	e2866030 	add	r6, r6, #48	@ 0x30
    aa60:	e1a05002 	mov	r5, r2
    aa64:	e1a00007 	mov	r0, r7
    aa68:	e6af3073 	sxtb	r3, r3
    aa6c:	e1a01009 	mov	r1, r9
    aa70:	36af3076 	sxtbcc	r3, r6
    aa74:	e58d2004 	str	r2, [sp, #4]
    aa78:	e4cb3001 	strb	r3, [fp], #1
    aa7c:	e1a0200a 	mov	r2, sl
    aa80:	e3a03000 	mov	r3, #0
    aa84:	e58d4008 	str	r4, [sp, #8]
    aa88:	fa002c74 	blx	15c60 <__aeabi_uldivmod>
    aa8c:	e157000a 	cmp	r7, sl
    aa90:	e1a02000 	mov	r2, r0
    aa94:	e1a03001 	mov	r3, r1
    aa98:	e1a00005 	mov	r0, r5
    aa9c:	e1a01004 	mov	r1, r4
    aaa0:	e1a07002 	mov	r7, r2
    aaa4:	e1a04003 	mov	r4, r3
    aaa8:	e2d99000 	sbcs	r9, r9, #0
    aaac:	2affffdc 	bcs	aa24 <CString::FormatV(char const*, std::__va_list)+0x32c>
    aab0:	e1a0e00b 	mov	lr, fp
    aab4:	e59d4020 	ldr	r4, [sp, #32]
    aab8:	e59db024 	ldr	fp, [sp, #36]	@ 0x24
    aabc:	e3a03000 	mov	r3, #0
    aac0:	e59d5028 	ldr	r5, [sp, #40]	@ 0x28
    aac4:	e59da02c 	ldr	sl, [sp, #44]	@ 0x2c
    aac8:	e5ce3000 	strb	r3, [lr]
    aacc:	e1a0000a 	mov	r0, sl
    aad0:	eb00066c 	bl	c488 <strlen>
    aad4:	e59d3014 	ldr	r3, [sp, #20]
    aad8:	e1a06000 	mov	r6, r0
    aadc:	e3530000 	cmp	r3, #0
    aae0:	1a000116 	bne	af40 <CString::FormatV(char const*, std::__va_list)+0x848>
    aae4:	e1540000 	cmp	r4, r0
    aae8:	9a00000f 	bls	ab2c <CString::FormatV(char const*, std::__va_list)+0x434>
    aaec:	e59d3018 	ldr	r3, [sp, #24]
    aaf0:	e0444000 	sub	r4, r4, r0
    aaf4:	e1a01004 	mov	r1, r4
    aaf8:	e1a0000b 	mov	r0, fp
    aafc:	e3530000 	cmp	r3, #0
    ab00:	13a06030 	movne	r6, #48	@ 0x30
    ab04:	03a06020 	moveq	r6, #32
    ab08:	ebfffc5d 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ab0c:	e2443001 	sub	r3, r4, #1
    ab10:	e59b200c 	ldr	r2, [fp, #12]
    ab14:	e2433001 	sub	r3, r3, #1
    ab18:	e3730001 	cmn	r3, #1
    ab1c:	e2821001 	add	r1, r2, #1
    ab20:	e58b100c 	str	r1, [fp, #12]
    ab24:	e5c26000 	strb	r6, [r2]
    ab28:	1afffff8 	bne	ab10 <CString::FormatV(char const*, std::__va_list)+0x418>
    ab2c:	e1a0000a 	mov	r0, sl
    ab30:	eb000654 	bl	c488 <strlen>
    ab34:	e2504000 	subs	r4, r0, #0
    ab38:	0a000002 	beq	ab48 <CString::FormatV(char const*, std::__va_list)+0x450>
    ab3c:	e1a01004 	mov	r1, r4
    ab40:	e1a0000b 	mov	r0, fp
    ab44:	ebfffc4e 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ab48:	e59b000c 	ldr	r0, [fp, #12]
    ab4c:	e1a0100a 	mov	r1, sl
    ab50:	eb0006ec 	bl	c708 <strcpy>
    ab54:	e59b300c 	ldr	r3, [fp, #12]
    ab58:	e0833004 	add	r3, r3, r4
    ab5c:	e58b300c 	str	r3, [fp, #12]
    ab60:	eaffff58 	b	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    ab64:	e59d3004 	ldr	r3, [sp, #4]
    ab68:	e3530000 	cmp	r3, #0
    ab6c:	0a000110 	beq	afb4 <CString::FormatV(char const*, std::__va_list)+0x8bc>
    ab70:	e59d3010 	ldr	r3, [sp, #16]
    ab74:	e2833007 	add	r3, r3, #7
    ab78:	e3c33007 	bic	r3, r3, #7
    ab7c:	e593e004 	ldr	lr, [r3, #4]
    ab80:	e493a008 	ldr	sl, [r3], #8
    ab84:	e35e0000 	cmp	lr, #0
    ab88:	e58d3010 	str	r3, [sp, #16]
    ab8c:	a3a03000 	movge	r3, #0
    ab90:	a58d3004 	strge	r3, [sp, #4]
    ab94:	aa000001 	bge	aba0 <CString::FormatV(char const*, std::__va_list)+0x4a8>
    ab98:	e27aa000 	rsbs	sl, sl, #0
    ab9c:	e2eee000 	rsc	lr, lr, #0
    aba0:	e35a000a 	cmp	sl, #10
    aba4:	e1a0300e 	mov	r3, lr
    aba8:	e2d33000 	sbcs	r3, r3, #0
    abac:	e58da00c 	str	sl, [sp, #12]
    abb0:	a3a06001 	movge	r6, #1
    abb4:	a3a07000 	movge	r7, #0
    abb8:	a1a0800e 	movge	r8, lr
    abbc:	e58de020 	str	lr, [sp, #32]
    abc0:	ba000226 	blt	b460 <CString::FormatV(char const*, std::__va_list)+0xd68>
    abc4:	e0961006 	adds	r1, r6, r6
    abc8:	e1a0000a 	mov	r0, sl
    abcc:	e0a73007 	adc	r3, r7, r7
    abd0:	e0911001 	adds	r1, r1, r1
    abd4:	e0a33003 	adc	r3, r3, r3
    abd8:	e0911006 	adds	r1, r1, r6
    abdc:	e0a73003 	adc	r3, r7, r3
    abe0:	e0911001 	adds	r1, r1, r1
    abe4:	e0a33003 	adc	r3, r3, r3
    abe8:	e1a02001 	mov	r2, r1
    abec:	e1a06001 	mov	r6, r1
    abf0:	e1a01008 	mov	r1, r8
    abf4:	e1a07003 	mov	r7, r3
    abf8:	fa002c18 	blx	15c60 <__aeabi_uldivmod>
    abfc:	e350000a 	cmp	r0, #10
    ac00:	e2d13000 	sbcs	r3, r1, #0
    ac04:	2affffee 	bcs	abc4 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    ac08:	e1a08000 	mov	r8, r0
    ac0c:	e1a09001 	mov	r9, r1
    ac10:	e28da034 	add	sl, sp, #52	@ 0x34
    ac14:	e30c3ccd 	movw	r3, #52429	@ 0xcccd
    ac18:	e34c3ccc 	movt	r3, #52428	@ 0xcccc
    ac1c:	e30c2ccc 	movw	r2, #52428	@ 0xcccc
    ac20:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
    ac24:	e58d4024 	str	r4, [sp, #36]	@ 0x24
    ac28:	e58db028 	str	fp, [sp, #40]	@ 0x28
    ac2c:	e1a04003 	mov	r4, r3
    ac30:	e59db020 	ldr	fp, [sp, #32]
    ac34:	e58d502c 	str	r5, [sp, #44]	@ 0x2c
    ac38:	e1a0500a 	mov	r5, sl
    ac3c:	e58da020 	str	sl, [sp, #32]
    ac40:	e58d2008 	str	r2, [sp, #8]
    ac44:	e59da00c 	ldr	sl, [sp, #12]
    ac48:	ea000003 	b	ac5c <CString::FormatV(char const*, std::__va_list)+0x564>
    ac4c:	e1a03007 	mov	r3, r7
    ac50:	fa002c02 	blx	15c60 <__aeabi_uldivmod>
    ac54:	e1a08000 	mov	r8, r0
    ac58:	e1a09001 	mov	r9, r1
    ac5c:	e1a03007 	mov	r3, r7
    ac60:	e1a02006 	mov	r2, r6
    ac64:	e1a0000a 	mov	r0, sl
    ac68:	e1a0100b 	mov	r1, fp
    ac6c:	fa002bfb 	blx	15c60 <__aeabi_uldivmod>
    ac70:	e358000a 	cmp	r8, #10
    ac74:	e6ef8078 	uxtb	r8, r8
    ac78:	e2d99000 	sbcs	r9, r9, #0
    ac7c:	e288c057 	add	ip, r8, #87	@ 0x57
    ac80:	e2888030 	add	r8, r8, #48	@ 0x30
    ac84:	e1a01003 	mov	r1, r3
    ac88:	e1a0b003 	mov	fp, r3
    ac8c:	e6afc07c 	sxtb	ip, ip
    ac90:	36afc078 	sxtbcc	ip, r8
    ac94:	e0963007 	adds	r3, r6, r7
    ac98:	e1a00002 	mov	r0, r2
    ac9c:	e2a33000 	adc	r3, r3, #0
    aca0:	e1a0a002 	mov	sl, r2
    aca4:	e4c5c001 	strb	ip, [r5], #1
    aca8:	e08c2394 	umull	r2, ip, r4, r3
    acac:	e3cc2003 	bic	r2, ip, #3
    acb0:	e082212c 	add	r2, r2, ip, lsr #2
    acb4:	e59dc008 	ldr	ip, [sp, #8]
    acb8:	e0433002 	sub	r3, r3, r2
    acbc:	e0563003 	subs	r3, r6, r3
    acc0:	e2c72000 	sbc	r2, r7, #0
    acc4:	e356000a 	cmp	r6, #10
    acc8:	e2d77000 	sbcs	r7, r7, #0
    accc:	e007039c 	mul	r7, ip, r3
    acd0:	e0277294 	mla	r7, r4, r2, r7
    acd4:	e0836493 	umull	r6, r3, r3, r4
    acd8:	e0877003 	add	r7, r7, r3
    acdc:	e1a060a6 	lsr	r6, r6, #1
    ace0:	e1866f87 	orr	r6, r6, r7, lsl #31
    ace4:	e1a070a7 	lsr	r7, r7, #1
    ace8:	e1a02006 	mov	r2, r6
    acec:	2affffd6 	bcs	ac4c <CString::FormatV(char const*, std::__va_list)+0x554>
    acf0:	e1a03005 	mov	r3, r5
    acf4:	e3a02000 	mov	r2, #0
    acf8:	e59d4024 	ldr	r4, [sp, #36]	@ 0x24
    acfc:	e59db028 	ldr	fp, [sp, #40]	@ 0x28
    ad00:	e59d502c 	ldr	r5, [sp, #44]	@ 0x2c
    ad04:	e59da020 	ldr	sl, [sp, #32]
    ad08:	e5c32000 	strb	r2, [r3]
    ad0c:	ea0000ce 	b	b04c <CString::FormatV(char const*, std::__va_list)+0x954>
    ad10:	e59d3014 	ldr	r3, [sp, #20]
    ad14:	e3530000 	cmp	r3, #0
    ad18:	e59d3010 	ldr	r3, [sp, #16]
    ad1c:	e1d360d0 	ldrsb	r6, [r3]
    ad20:	1a000189 	bne	b34c <CString::FormatV(char const*, std::__va_list)+0xc54>
    ad24:	e3540001 	cmp	r4, #1
    ad28:	8a0000fe 	bhi	b128 <CString::FormatV(char const*, std::__va_list)+0xa30>
    ad2c:	e3a01001 	mov	r1, #1
    ad30:	e1a0000b 	mov	r0, fp
    ad34:	ebfffbd2 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ad38:	e59b300c 	ldr	r3, [fp, #12]
    ad3c:	e2832001 	add	r2, r3, #1
    ad40:	e58b200c 	str	r2, [fp, #12]
    ad44:	e5c36000 	strb	r6, [r3]
    ad48:	e59d3010 	ldr	r3, [sp, #16]
    ad4c:	e2833004 	add	r3, r3, #4
    ad50:	e58d3010 	str	r3, [sp, #16]
    ad54:	eafffedb 	b	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    ad58:	e59d3010 	ldr	r3, [sp, #16]
    ad5c:	e28da034 	add	sl, sp, #52	@ 0x34
    ad60:	e1a0000a 	mov	r0, sl
    ad64:	e2836007 	add	r6, r3, #7
    ad68:	e3c66007 	bic	r6, r6, #7
    ad6c:	ed960b00 	vldr	d0, [r6]
    ad70:	ebfffdcc 	bl	a4a8 <CString::ftoa(char*, double, unsigned int)>
    ad74:	e1a0000a 	mov	r0, sl
    ad78:	eb0005c2 	bl	c488 <strlen>
    ad7c:	e59d3014 	ldr	r3, [sp, #20]
    ad80:	e1a07000 	mov	r7, r0
    ad84:	e3530000 	cmp	r3, #0
    ad88:	1a000185 	bne	b3a4 <CString::FormatV(char const*, std::__va_list)+0xcac>
    ad8c:	e1540000 	cmp	r4, r0
    ad90:	8a0000ff 	bhi	b194 <CString::FormatV(char const*, std::__va_list)+0xa9c>
    ad94:	e1a0000a 	mov	r0, sl
    ad98:	eb0005ba 	bl	c488 <strlen>
    ad9c:	e2504000 	subs	r4, r0, #0
    ada0:	0a000002 	beq	adb0 <CString::FormatV(char const*, std::__va_list)+0x6b8>
    ada4:	e1a01004 	mov	r1, r4
    ada8:	e1a0000b 	mov	r0, fp
    adac:	ebfffbb4 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    adb0:	e59b000c 	ldr	r0, [fp, #12]
    adb4:	e1a0100a 	mov	r1, sl
    adb8:	eb000652 	bl	c708 <strcpy>
    adbc:	e59b300c 	ldr	r3, [fp, #12]
    adc0:	e0833004 	add	r3, r3, r4
    adc4:	e58b300c 	str	r3, [fp, #12]
    adc8:	e2863008 	add	r3, r6, #8
    adcc:	e58d3010 	str	r3, [sp, #16]
    add0:	eafffebc 	b	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    add4:	e59d3010 	ldr	r3, [sp, #16]
    add8:	e5937000 	ldr	r7, [r3]
    addc:	e1a00007 	mov	r0, r7
    ade0:	eb0005a8 	bl	c488 <strlen>
    ade4:	e59d3014 	ldr	r3, [sp, #20]
    ade8:	e1a06000 	mov	r6, r0
    adec:	e3530000 	cmp	r3, #0
    adf0:	1a000138 	bne	b2d8 <CString::FormatV(char const*, std::__va_list)+0xbe0>
    adf4:	e1540000 	cmp	r4, r0
    adf8:	8a0000d7 	bhi	b15c <CString::FormatV(char const*, std::__va_list)+0xa64>
    adfc:	e1a00007 	mov	r0, r7
    ae00:	eb0005a0 	bl	c488 <strlen>
    ae04:	e2504000 	subs	r4, r0, #0
    ae08:	0a000002 	beq	ae18 <CString::FormatV(char const*, std::__va_list)+0x720>
    ae0c:	e1a01004 	mov	r1, r4
    ae10:	e1a0000b 	mov	r0, fp
    ae14:	ebfffb9a 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ae18:	e59b000c 	ldr	r0, [fp, #12]
    ae1c:	e1a01007 	mov	r1, r7
    ae20:	eb000638 	bl	c708 <strcpy>
    ae24:	e59b300c 	ldr	r3, [fp, #12]
    ae28:	e0833004 	add	r3, r3, r4
    ae2c:	e58b300c 	str	r3, [fp, #12]
    ae30:	eaffffc4 	b	ad48 <CString::FormatV(char const*, std::__va_list)+0x650>
    ae34:	e3500000 	cmp	r0, #0
    ae38:	03a0c008 	moveq	ip, #8
    ae3c:	0afffec3 	beq	a950 <CString::FormatV(char const*, std::__va_list)+0x258>
    ae40:	e3a01001 	mov	r1, #1
    ae44:	e1a0000b 	mov	r0, fp
    ae48:	ebfffb8d 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ae4c:	e59b300c 	ldr	r3, [fp, #12]
    ae50:	e3a02030 	mov	r2, #48	@ 0x30
    ae54:	e3a0c008 	mov	ip, #8
    ae58:	e2831001 	add	r1, r3, #1
    ae5c:	e58b100c 	str	r1, [fp, #12]
    ae60:	e5c32000 	strb	r2, [r3]
    ae64:	e59d3004 	ldr	r3, [sp, #4]
    ae68:	e1d5a0d0 	ldrsb	sl, [r5]
    ae6c:	e3530000 	cmp	r3, #0
    ae70:	e59d3010 	ldr	r3, [sp, #16]
    ae74:	1afffeb9 	bne	a960 <CString::FormatV(char const*, std::__va_list)+0x268>
    ae78:	e4930004 	ldr	r0, [r3], #4
    ae7c:	e58d3010 	str	r3, [sp, #16]
    ae80:	e15c0000 	cmp	ip, r0
    ae84:	8a000163 	bhi	b418 <CString::FormatV(char const*, std::__va_list)+0xd20>
    ae88:	e3a03001 	mov	r3, #1
    ae8c:	e003039c 	mul	r3, ip, r3
    ae90:	e731f310 	udiv	r1, r0, r3
    ae94:	e1a02001 	mov	r2, r1
    ae98:	e15c0001 	cmp	ip, r1
    ae9c:	9afffffa 	bls	ae8c <CString::FormatV(char const*, std::__va_list)+0x794>
    aea0:	e25a6058 	subs	r6, sl, #88	@ 0x58
    aea4:	e28da034 	add	sl, sp, #52	@ 0x34
    aea8:	13a06001 	movne	r6, #1
    aeac:	e1a0e00a 	mov	lr, sl
    aeb0:	e1a06286 	lsl	r6, r6, #5
    aeb4:	e2866037 	add	r6, r6, #55	@ 0x37
    aeb8:	ea000002 	b	aec8 <CString::FormatV(char const*, std::__va_list)+0x7d0>
    aebc:	e732f110 	udiv	r2, r0, r1
    aec0:	e1a03001 	mov	r3, r1
    aec4:	e1a01002 	mov	r1, r2
    aec8:	e0600193 	mls	r0, r3, r1, r0
    aecc:	e6ef1072 	uxtb	r1, r2
    aed0:	e0867001 	add	r7, r6, r1
    aed4:	e2811030 	add	r1, r1, #48	@ 0x30
    aed8:	e3520009 	cmp	r2, #9
    aedc:	96af2071 	sxtbls	r2, r1
    aee0:	86af2077 	sxtbhi	r2, r7
    aee4:	e731fc13 	udiv	r1, r3, ip
    aee8:	e15c0003 	cmp	ip, r3
    aeec:	e4ce2001 	strb	r2, [lr], #1
    aef0:	9afffff1 	bls	aebc <CString::FormatV(char const*, std::__va_list)+0x7c4>
    aef4:	e3a03000 	mov	r3, #0
    aef8:	e5ce3000 	strb	r3, [lr]
    aefc:	eafffef2 	b	aacc <CString::FormatV(char const*, std::__va_list)+0x3d4>
    af00:	e1d5a0d1 	ldrsb	sl, [r5, #1]
    af04:	e3a01000 	mov	r1, #0
    af08:	e2855001 	add	r5, r5, #1
    af0c:	e24a3030 	sub	r3, sl, #48	@ 0x30
    af10:	e6ef3073 	uxtb	r3, r3
    af14:	e3530009 	cmp	r3, #9
    af18:	8afffe32 	bhi	a7e8 <CString::FormatV(char const*, std::__va_list)+0xf0>
    af1c:	e3a0200a 	mov	r2, #10
    af20:	e021a192 	mla	r1, r2, r1, sl
    af24:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
    af28:	e24a3030 	sub	r3, sl, #48	@ 0x30
    af2c:	e2411030 	sub	r1, r1, #48	@ 0x30
    af30:	e6ef3073 	uxtb	r3, r3
    af34:	e3530009 	cmp	r3, #9
    af38:	9afffff8 	bls	af20 <CString::FormatV(char const*, std::__va_list)+0x828>
    af3c:	eafffe29 	b	a7e8 <CString::FormatV(char const*, std::__va_list)+0xf0>
    af40:	e1a0000a 	mov	r0, sl
    af44:	eb00054f 	bl	c488 <strlen>
    af48:	e2507000 	subs	r7, r0, #0
    af4c:	0a000002 	beq	af5c <CString::FormatV(char const*, std::__va_list)+0x864>
    af50:	e1a01007 	mov	r1, r7
    af54:	e1a0000b 	mov	r0, fp
    af58:	ebfffb49 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    af5c:	e59b000c 	ldr	r0, [fp, #12]
    af60:	e1a0100a 	mov	r1, sl
    af64:	eb0005e7 	bl	c708 <strcpy>
    af68:	e59b300c 	ldr	r3, [fp, #12]
    af6c:	e1540006 	cmp	r4, r6
    af70:	e0833007 	add	r3, r3, r7
    af74:	e58b300c 	str	r3, [fp, #12]
    af78:	9afffe52 	bls	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    af7c:	e0446006 	sub	r6, r4, r6
    af80:	e1a0000b 	mov	r0, fp
    af84:	e1a01006 	mov	r1, r6
    af88:	ebfffb3d 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    af8c:	e3a00020 	mov	r0, #32
    af90:	e2463001 	sub	r3, r6, #1
    af94:	e59b200c 	ldr	r2, [fp, #12]
    af98:	e2433001 	sub	r3, r3, #1
    af9c:	e3730001 	cmn	r3, #1
    afa0:	e2821001 	add	r1, r2, #1
    afa4:	e58b100c 	str	r1, [fp, #12]
    afa8:	e5c20000 	strb	r0, [r2]
    afac:	1afffff8 	bne	af94 <CString::FormatV(char const*, std::__va_list)+0x89c>
    afb0:	eafffe44 	b	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    afb4:	e59d9010 	ldr	r9, [sp, #16]
    afb8:	e4991004 	ldr	r1, [r9], #4
    afbc:	e3510000 	cmp	r1, #0
    afc0:	b2611000 	rsblt	r1, r1, #0
    afc4:	b3a03001 	movlt	r3, #1
    afc8:	b58d3004 	strlt	r3, [sp, #4]
    afcc:	e3510009 	cmp	r1, #9
    afd0:	e1a0c001 	mov	ip, r1
    afd4:	c3a02001 	movgt	r2, #1
    afd8:	c3a0000a 	movgt	r0, #10
    afdc:	da000124 	ble	b474 <CString::FormatV(char const*, std::__va_list)+0xd7c>
    afe0:	e0020290 	mul	r2, r0, r2
    afe4:	e733f211 	udiv	r3, r1, r2
    afe8:	e3530009 	cmp	r3, #9
    afec:	8afffffb 	bhi	afe0 <CString::FormatV(char const*, std::__va_list)+0x8e8>
    aff0:	e28da034 	add	sl, sp, #52	@ 0x34
    aff4:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
    aff8:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
    affc:	e1a0e00a 	mov	lr, sl
    b000:	ea000001 	b	b00c <CString::FormatV(char const*, std::__va_list)+0x914>
    b004:	e1a02003 	mov	r2, r3
    b008:	e733f31c 	udiv	r3, ip, r3
    b00c:	e6ef0073 	uxtb	r0, r3
    b010:	e3530009 	cmp	r3, #9
    b014:	e736f21c 	udiv	r6, ip, r2
    b018:	e2801057 	add	r1, r0, #87	@ 0x57
    b01c:	e2800030 	add	r0, r0, #48	@ 0x30
    b020:	e6af1071 	sxtb	r1, r1
    b024:	96af1070 	sxtbls	r1, r0
    b028:	e0830298 	umull	r0, r3, r8, r2
    b02c:	e06cc692 	mls	ip, r2, r6, ip
    b030:	e3520009 	cmp	r2, #9
    b034:	e4ce1001 	strb	r1, [lr], #1
    b038:	e1a031a3 	lsr	r3, r3, #3
    b03c:	8afffff0 	bhi	b004 <CString::FormatV(char const*, std::__va_list)+0x90c>
    b040:	e3a03000 	mov	r3, #0
    b044:	e58d9010 	str	r9, [sp, #16]
    b048:	e5ce3000 	strb	r3, [lr]
    b04c:	e1a0000a 	mov	r0, sl
    b050:	eb00050c 	bl	c488 <strlen>
    b054:	e59d3004 	ldr	r3, [sp, #4]
    b058:	e1a07000 	mov	r7, r0
    b05c:	e3530000 	cmp	r3, #0
    b060:	e59d3014 	ldr	r3, [sp, #20]
    b064:	1a000073 	bne	b238 <CString::FormatV(char const*, std::__va_list)+0xb40>
    b068:	e3530000 	cmp	r3, #0
    b06c:	1a00007c 	bne	b264 <CString::FormatV(char const*, std::__va_list)+0xb6c>
    b070:	e59d3018 	ldr	r3, [sp, #24]
    b074:	e3530000 	cmp	r3, #0
    b078:	1a00005e 	bne	b1f8 <CString::FormatV(char const*, std::__va_list)+0xb00>
    b07c:	e1500004 	cmp	r0, r4
    b080:	2afffea9 	bcs	ab2c <CString::FormatV(char const*, std::__va_list)+0x434>
    b084:	e0444007 	sub	r4, r4, r7
    b088:	e1a0000b 	mov	r0, fp
    b08c:	e1a01004 	mov	r1, r4
    b090:	ebfffafb 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b094:	e2443001 	sub	r3, r4, #1
    b098:	e3a00020 	mov	r0, #32
    b09c:	e59b200c 	ldr	r2, [fp, #12]
    b0a0:	e2433001 	sub	r3, r3, #1
    b0a4:	e3730001 	cmn	r3, #1
    b0a8:	e2821001 	add	r1, r2, #1
    b0ac:	e58b100c 	str	r1, [fp, #12]
    b0b0:	e5c20000 	strb	r0, [r2]
    b0b4:	1afffff8 	bne	b09c <CString::FormatV(char const*, std::__va_list)+0x9a4>
    b0b8:	e59d3004 	ldr	r3, [sp, #4]
    b0bc:	e3530000 	cmp	r3, #0
    b0c0:	0afffe99 	beq	ab2c <CString::FormatV(char const*, std::__va_list)+0x434>
    b0c4:	ea0000dc 	b	b43c <CString::FormatV(char const*, std::__va_list)+0xd44>
    b0c8:	e35a0058 	cmp	sl, #88	@ 0x58
    b0cc:	e30631a8 	movw	r3, #25000	@ 0x61a8
    b0d0:	e3403001 	movt	r3, #1
    b0d4:	e30671ac 	movw	r7, #25004	@ 0x61ac
    b0d8:	e3407001 	movt	r7, #1
    b0dc:	01a07003 	moveq	r7, r3
    b0e0:	e1a00007 	mov	r0, r7
    b0e4:	eb0004e7 	bl	c488 <strlen>
    b0e8:	e2508000 	subs	r8, r0, #0
    b0ec:	0a000002 	beq	b0fc <CString::FormatV(char const*, std::__va_list)+0xa04>
    b0f0:	e1a01008 	mov	r1, r8
    b0f4:	e1a0000b 	mov	r0, fp
    b0f8:	ebfffae1 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b0fc:	e59b000c 	ldr	r0, [fp, #12]
    b100:	e1a01007 	mov	r1, r7
    b104:	eb00057f 	bl	c708 <strcpy>
    b108:	e59b300c 	ldr	r3, [fp, #12]
    b10c:	e3a0c010 	mov	ip, #16
    b110:	e0833008 	add	r3, r3, r8
    b114:	e58b300c 	str	r3, [fp, #12]
    b118:	e1d5a0d0 	ldrsb	sl, [r5]
    b11c:	eafffe0b 	b	a950 <CString::FormatV(char const*, std::__va_list)+0x258>
    b120:	e3a0c00a 	mov	ip, #10
    b124:	eafffe09 	b	a950 <CString::FormatV(char const*, std::__va_list)+0x258>
    b128:	e2441001 	sub	r1, r4, #1
    b12c:	e1a0000b 	mov	r0, fp
    b130:	ebfffad3 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b134:	e2444002 	sub	r4, r4, #2
    b138:	e3a01020 	mov	r1, #32
    b13c:	e59b300c 	ldr	r3, [fp, #12]
    b140:	e2444001 	sub	r4, r4, #1
    b144:	e3740001 	cmn	r4, #1
    b148:	e2832001 	add	r2, r3, #1
    b14c:	e58b200c 	str	r2, [fp, #12]
    b150:	e5c31000 	strb	r1, [r3]
    b154:	1afffff8 	bne	b13c <CString::FormatV(char const*, std::__va_list)+0xa44>
    b158:	eafffef3 	b	ad2c <CString::FormatV(char const*, std::__va_list)+0x634>
    b15c:	e0446000 	sub	r6, r4, r0
    b160:	e1a0000b 	mov	r0, fp
    b164:	e1a01006 	mov	r1, r6
    b168:	ebfffac5 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b16c:	e2463001 	sub	r3, r6, #1
    b170:	e3a00020 	mov	r0, #32
    b174:	e59b200c 	ldr	r2, [fp, #12]
    b178:	e2433001 	sub	r3, r3, #1
    b17c:	e3730001 	cmn	r3, #1
    b180:	e2821001 	add	r1, r2, #1
    b184:	e58b100c 	str	r1, [fp, #12]
    b188:	e5c20000 	strb	r0, [r2]
    b18c:	1afffff8 	bne	b174 <CString::FormatV(char const*, std::__va_list)+0xa7c>
    b190:	eaffff19 	b	adfc <CString::FormatV(char const*, std::__va_list)+0x704>
    b194:	e0447000 	sub	r7, r4, r0
    b198:	e1a0000b 	mov	r0, fp
    b19c:	e1a01007 	mov	r1, r7
    b1a0:	ebfffab7 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b1a4:	e2473001 	sub	r3, r7, #1
    b1a8:	e3a00020 	mov	r0, #32
    b1ac:	e59b200c 	ldr	r2, [fp, #12]
    b1b0:	e2433001 	sub	r3, r3, #1
    b1b4:	e3730001 	cmn	r3, #1
    b1b8:	e2821001 	add	r1, r2, #1
    b1bc:	e58b100c 	str	r1, [fp, #12]
    b1c0:	e5c20000 	strb	r0, [r2]
    b1c4:	1afffff8 	bne	b1ac <CString::FormatV(char const*, std::__va_list)+0xab4>
    b1c8:	eafffef1 	b	ad94 <CString::FormatV(char const*, std::__va_list)+0x69c>
    b1cc:	e59d3018 	ldr	r3, [sp, #24]
    b1d0:	e3530000 	cmp	r3, #0
    b1d4:	0a000096 	beq	b434 <CString::FormatV(char const*, std::__va_list)+0xd3c>
    b1d8:	e3a01001 	mov	r1, #1
    b1dc:	e1a0000b 	mov	r0, fp
    b1e0:	ebfffaa7 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b1e4:	e59b300c 	ldr	r3, [fp, #12]
    b1e8:	e3a0202d 	mov	r2, #45	@ 0x2d
    b1ec:	e2831001 	add	r1, r3, #1
    b1f0:	e58b100c 	str	r1, [fp, #12]
    b1f4:	e5c32000 	strb	r2, [r3]
    b1f8:	e1540007 	cmp	r4, r7
    b1fc:	9afffe4a 	bls	ab2c <CString::FormatV(char const*, std::__va_list)+0x434>
    b200:	e0444007 	sub	r4, r4, r7
    b204:	e1a0000b 	mov	r0, fp
    b208:	e1a01004 	mov	r1, r4
    b20c:	ebfffa9c 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b210:	e2443001 	sub	r3, r4, #1
    b214:	e3a00030 	mov	r0, #48	@ 0x30
    b218:	e59b200c 	ldr	r2, [fp, #12]
    b21c:	e2433001 	sub	r3, r3, #1
    b220:	e3730001 	cmn	r3, #1
    b224:	e2821001 	add	r1, r2, #1
    b228:	e58b100c 	str	r1, [fp, #12]
    b22c:	e5c20000 	strb	r0, [r2]
    b230:	1afffff8 	bne	b218 <CString::FormatV(char const*, std::__va_list)+0xb20>
    b234:	eafffe3c 	b	ab2c <CString::FormatV(char const*, std::__va_list)+0x434>
    b238:	e3530000 	cmp	r3, #0
    b23c:	e2807001 	add	r7, r0, #1
    b240:	0affffe1 	beq	b1cc <CString::FormatV(char const*, std::__va_list)+0xad4>
    b244:	e3a01001 	mov	r1, #1
    b248:	e1a0000b 	mov	r0, fp
    b24c:	ebfffa8c 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b250:	e59b300c 	ldr	r3, [fp, #12]
    b254:	e3a0202d 	mov	r2, #45	@ 0x2d
    b258:	e2831001 	add	r1, r3, #1
    b25c:	e58b100c 	str	r1, [fp, #12]
    b260:	e5c32000 	strb	r2, [r3]
    b264:	e1a0000a 	mov	r0, sl
    b268:	eb000486 	bl	c488 <strlen>
    b26c:	e2506000 	subs	r6, r0, #0
    b270:	0a000002 	beq	b280 <CString::FormatV(char const*, std::__va_list)+0xb88>
    b274:	e1a01006 	mov	r1, r6
    b278:	e1a0000b 	mov	r0, fp
    b27c:	ebfffa80 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b280:	e59b000c 	ldr	r0, [fp, #12]
    b284:	e1a0100a 	mov	r1, sl
    b288:	eb00051e 	bl	c708 <strcpy>
    b28c:	e59b300c 	ldr	r3, [fp, #12]
    b290:	e1540007 	cmp	r4, r7
    b294:	e0833006 	add	r3, r3, r6
    b298:	e58b300c 	str	r3, [fp, #12]
    b29c:	9afffd89 	bls	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    b2a0:	e0444007 	sub	r4, r4, r7
    b2a4:	e1a0000b 	mov	r0, fp
    b2a8:	e1a01004 	mov	r1, r4
    b2ac:	ebfffa74 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b2b0:	e3a00020 	mov	r0, #32
    b2b4:	e2443001 	sub	r3, r4, #1
    b2b8:	e59b200c 	ldr	r2, [fp, #12]
    b2bc:	e2433001 	sub	r3, r3, #1
    b2c0:	e3730001 	cmn	r3, #1
    b2c4:	e2821001 	add	r1, r2, #1
    b2c8:	e58b100c 	str	r1, [fp, #12]
    b2cc:	e5c20000 	strb	r0, [r2]
    b2d0:	1afffff8 	bne	b2b8 <CString::FormatV(char const*, std::__va_list)+0xbc0>
    b2d4:	eafffd7b 	b	a8c8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    b2d8:	e1a00007 	mov	r0, r7
    b2dc:	eb000469 	bl	c488 <strlen>
    b2e0:	e2508000 	subs	r8, r0, #0
    b2e4:	0a000002 	beq	b2f4 <CString::FormatV(char const*, std::__va_list)+0xbfc>
    b2e8:	e1a01008 	mov	r1, r8
    b2ec:	e1a0000b 	mov	r0, fp
    b2f0:	ebfffa63 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b2f4:	e59b000c 	ldr	r0, [fp, #12]
    b2f8:	e1a01007 	mov	r1, r7
    b2fc:	eb000501 	bl	c708 <strcpy>
    b300:	e59b300c 	ldr	r3, [fp, #12]
    b304:	e1540006 	cmp	r4, r6
    b308:	e0833008 	add	r3, r3, r8
    b30c:	e58b300c 	str	r3, [fp, #12]
    b310:	9afffe8c 	bls	ad48 <CString::FormatV(char const*, std::__va_list)+0x650>
    b314:	e0446006 	sub	r6, r4, r6
    b318:	e1a0000b 	mov	r0, fp
    b31c:	e1a01006 	mov	r1, r6
    b320:	ebfffa57 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b324:	e3a00020 	mov	r0, #32
    b328:	e2463001 	sub	r3, r6, #1
    b32c:	e59b200c 	ldr	r2, [fp, #12]
    b330:	e2433001 	sub	r3, r3, #1
    b334:	e3730001 	cmn	r3, #1
    b338:	e2821001 	add	r1, r2, #1
    b33c:	e58b100c 	str	r1, [fp, #12]
    b340:	e5c20000 	strb	r0, [r2]
    b344:	1afffff8 	bne	b32c <CString::FormatV(char const*, std::__va_list)+0xc34>
    b348:	eafffe7e 	b	ad48 <CString::FormatV(char const*, std::__va_list)+0x650>
    b34c:	e3a01001 	mov	r1, #1
    b350:	e1a0000b 	mov	r0, fp
    b354:	ebfffa4a 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b358:	e59b300c 	ldr	r3, [fp, #12]
    b35c:	e3540001 	cmp	r4, #1
    b360:	e2832001 	add	r2, r3, #1
    b364:	e58b200c 	str	r2, [fp, #12]
    b368:	e5c36000 	strb	r6, [r3]
    b36c:	9afffe75 	bls	ad48 <CString::FormatV(char const*, std::__va_list)+0x650>
    b370:	e2441001 	sub	r1, r4, #1
    b374:	e1a0000b 	mov	r0, fp
    b378:	ebfffa41 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b37c:	e2444002 	sub	r4, r4, #2
    b380:	e3a01020 	mov	r1, #32
    b384:	e59b300c 	ldr	r3, [fp, #12]
    b388:	e2444001 	sub	r4, r4, #1
    b38c:	e3740001 	cmn	r4, #1
    b390:	e2832001 	add	r2, r3, #1
    b394:	e58b200c 	str	r2, [fp, #12]
    b398:	e5c31000 	strb	r1, [r3]
    b39c:	1afffff8 	bne	b384 <CString::FormatV(char const*, std::__va_list)+0xc8c>
    b3a0:	eafffe68 	b	ad48 <CString::FormatV(char const*, std::__va_list)+0x650>
    b3a4:	e1a0000a 	mov	r0, sl
    b3a8:	eb000436 	bl	c488 <strlen>
    b3ac:	e2508000 	subs	r8, r0, #0
    b3b0:	0a000002 	beq	b3c0 <CString::FormatV(char const*, std::__va_list)+0xcc8>
    b3b4:	e1a01008 	mov	r1, r8
    b3b8:	e1a0000b 	mov	r0, fp
    b3bc:	ebfffa30 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b3c0:	e59b000c 	ldr	r0, [fp, #12]
    b3c4:	e1a0100a 	mov	r1, sl
    b3c8:	eb0004ce 	bl	c708 <strcpy>
    b3cc:	e59b300c 	ldr	r3, [fp, #12]
    b3d0:	e1540007 	cmp	r4, r7
    b3d4:	e0833008 	add	r3, r3, r8
    b3d8:	e58b300c 	str	r3, [fp, #12]
    b3dc:	9afffe79 	bls	adc8 <CString::FormatV(char const*, std::__va_list)+0x6d0>
    b3e0:	e0447007 	sub	r7, r4, r7
    b3e4:	e1a0000b 	mov	r0, fp
    b3e8:	e1a01007 	mov	r1, r7
    b3ec:	ebfffa24 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b3f0:	e3a00020 	mov	r0, #32
    b3f4:	e2473001 	sub	r3, r7, #1
    b3f8:	e59b200c 	ldr	r2, [fp, #12]
    b3fc:	e2433001 	sub	r3, r3, #1
    b400:	e3730001 	cmn	r3, #1
    b404:	e2821001 	add	r1, r2, #1
    b408:	e58b100c 	str	r1, [fp, #12]
    b40c:	e5c20000 	strb	r0, [r2]
    b410:	1afffff8 	bne	b3f8 <CString::FormatV(char const*, std::__va_list)+0xd00>
    b414:	eafffe6b 	b	adc8 <CString::FormatV(char const*, std::__va_list)+0x6d0>
    b418:	e1a02000 	mov	r2, r0
    b41c:	e3a03001 	mov	r3, #1
    b420:	e1a01000 	mov	r1, r0
    b424:	eafffe9d 	b	aea0 <CString::FormatV(char const*, std::__va_list)+0x7a8>
    b428:	e99d0140 	ldmib	sp, {r6, r8}
    b42c:	e3a07001 	mov	r7, #1
    b430:	eafffd6e 	b	a9f0 <CString::FormatV(char const*, std::__va_list)+0x2f8>
    b434:	e1540007 	cmp	r4, r7
    b438:	8affff11 	bhi	b084 <CString::FormatV(char const*, std::__va_list)+0x98c>
    b43c:	e3a01001 	mov	r1, #1
    b440:	e1a0000b 	mov	r0, fp
    b444:	ebfffa0e 	bl	9c84 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    b448:	e59b300c 	ldr	r3, [fp, #12]
    b44c:	e3a0202d 	mov	r2, #45	@ 0x2d
    b450:	e2831001 	add	r1, r3, #1
    b454:	e58b100c 	str	r1, [fp, #12]
    b458:	e5c32000 	strb	r2, [r3]
    b45c:	eafffdb2 	b	ab2c <CString::FormatV(char const*, std::__va_list)+0x434>
    b460:	e1a0800a 	mov	r8, sl
    b464:	e1a0900e 	mov	r9, lr
    b468:	e3a06001 	mov	r6, #1
    b46c:	e3a07000 	mov	r7, #0
    b470:	eafffde6 	b	ac10 <CString::FormatV(char const*, std::__va_list)+0x518>
    b474:	e1a03001 	mov	r3, r1
    b478:	e3a02001 	mov	r2, #1
    b47c:	eafffedb 	b	aff0 <CString::FormatV(char const*, std::__va_list)+0x8f8>

0000b480 <CString::Format(char const*, ...)>:
    b480:	e92d000e 	push	{r1, r2, r3}
    b484:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    b488:	e24dd008 	sub	sp, sp, #8
    b48c:	e28d2010 	add	r2, sp, #16
    b490:	e59d100c 	ldr	r1, [sp, #12]
    b494:	e58d2004 	str	r2, [sp, #4]
    b498:	ebfffc96 	bl	a6f8 <CString::FormatV(char const*, std::__va_list)>
    b49c:	e28dd008 	add	sp, sp, #8
    b4a0:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
    b4a4:	e28dd00c 	add	sp, sp, #12
    b4a8:	e12fff1e 	bx	lr

0000b4ac <__aeabi_atexit>:
    b4ac:	e12fff1e 	bx	lr

0000b4b0 <__errno>:
    b4b0:	e3070ac8 	movw	r0, #31432	@ 0x7ac8
    b4b4:	e3400001 	movt	r0, #1
    b4b8:	e12fff1e 	bx	lr

0000b4bc <set_qemu_exit_status>:
    b4bc:	e12fff1e 	bx	lr

0000b4c0 <halt>:
    b4c0:	f10c0080 	cpsid	i
    b4c4:	f10c0040 	cpsid	f
    b4c8:	f57ff04f 	dsb	sy
    b4cc:	e320f003 	wfi
    b4d0:	eafffffc 	b	b4c8 <halt+0x8>

0000b4d4 <error_halt>:
    b4d4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    b4d8:	e1a04000 	mov	r4, r0
    b4dc:	e3a01000 	mov	r1, #0
    b4e0:	e24dd014 	sub	sp, sp, #20
    b4e4:	e28d0004 	add	r0, sp, #4
    b4e8:	ebfff342 	bl	81f8 <CActLED::CActLED(bool)>
    b4ec:	e28d0004 	add	r0, sp, #4
    b4f0:	e3a03f4b 	mov	r3, #300	@ 0x12c
    b4f4:	e3a02064 	mov	r2, #100	@ 0x64
    b4f8:	e1a01004 	mov	r1, r4
    b4fc:	ebfff38e 	bl	833c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    b500:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
    b504:	eb00036f 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
    b508:	eafffff7 	b	b4ec <error_halt+0x18>

0000b50c <reboot>:
    b50c:	e3a03000 	mov	r3, #0
    b510:	e3433f10 	movt	r3, #16144	@ 0x3f10
    b514:	e3a01001 	mov	r1, #1
    b518:	e3451a00 	movt	r1, #23040	@ 0x5a00
    b51c:	e3a02020 	mov	r2, #32
    b520:	e3452a00 	movt	r2, #23040	@ 0x5a00
    b524:	e5831024 	str	r1, [r3, #36]	@ 0x24
    b528:	e583201c 	str	r2, [r3, #28]
    b52c:	eafffffe 	b	b52c <reboot+0x20>

0000b530 <sysinit>:
    b530:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    b534:	e24ddff5 	sub	sp, sp, #980	@ 0x3d4
    b538:	f1080040 	cpsie	f
    b53c:	f1080080 	cpsie	i
    b540:	eb00142d 	bl	105fc <InvalidateDataCacheL1Only>
    b544:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    b548:	e383360f 	orr	r3, r3, #15728640	@ 0xf00000
    b54c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    b550:	f57ff06f 	isb	sy
    b554:	e3a03101 	mov	r3, #1073741824	@ 0x40000000
    b558:	eee83a10 	vmsr	fpexc, r3
    b55c:	e3a03403 	mov	r3, #50331648	@ 0x3000000
    b560:	eee13a10 	vmsr	fpscr, r3
    b564:	e3074b64 	movw	r4, #31588	@ 0x7b64
    b568:	e3404001 	movt	r4, #1
    b56c:	e3070aa8 	movw	r0, #31400	@ 0x7aa8
    b570:	e3400001 	movt	r0, #1
    b574:	e0442000 	sub	r2, r4, r0
    b578:	e3a01000 	mov	r1, #0
    b57c:	eb0005c5 	bl	cc98 <memset>
    b580:	e3540982 	cmp	r4, #2129920	@ 0x208000
    b584:	8a000023 	bhi	b618 <sysinit+0xe8>
    b588:	e3a01001 	mov	r1, #1
    b58c:	e28d0054 	add	r0, sp, #84	@ 0x54
    b590:	eb00150a 	bl	109c0 <CMemorySystem::CMemorySystem(bool)>
    b594:	e28d0010 	add	r0, sp, #16
    b598:	ebfff762 	bl	9328 <CMachineInfo::CMachineInfo()>
    b59c:	e1a0000d 	mov	r0, sp
    b5a0:	ebfff9d1 	bl	9cec <CString::CString()>
    b5a4:	e3a02031 	mov	r2, #49	@ 0x31
    b5a8:	e1a0000d 	mov	r0, sp
    b5ac:	e30611b0 	movw	r1, #25008	@ 0x61b0
    b5b0:	e3401001 	movt	r1, #1
    b5b4:	ebffffb1 	bl	b480 <CString::Format(char const*, ...)>
    b5b8:	e1a0000d 	mov	r0, sp
    b5bc:	ebfffa02 	bl	9dcc <CString::operator char const*() const>
    b5c0:	e1a01000 	mov	r1, r0
    b5c4:	e59f0084 	ldr	r0, [pc, #132]	@ b650 <sysinit+0x120>
    b5c8:	eb00044e 	bl	c708 <strcpy>
    b5cc:	e28d0e13 	add	r0, sp, #304	@ 0x130
    b5d0:	eb0015c2 	bl	10ce0 <CInterruptSystem::CInterruptSystem()>
    b5d4:	e28d0e13 	add	r0, sp, #304	@ 0x130
    b5d8:	eb0015f1 	bl	10da4 <CInterruptSystem::Initialize()>
    b5dc:	e3500000 	cmp	r0, #0
    b5e0:	0a00000d 	beq	b61c <sysinit+0xec>
    b5e4:	e3074a18 	movw	r4, #31256	@ 0x7a18
    b5e8:	e3404001 	movt	r4, #1
    b5ec:	e3075a28 	movw	r5, #31272	@ 0x7a28
    b5f0:	e3405001 	movt	r5, #1
    b5f4:	e1540005 	cmp	r4, r5
    b5f8:	2a000003 	bcs	b60c <sysinit+0xdc>
    b5fc:	e4943004 	ldr	r3, [r4], #4
    b600:	e12fff33 	blx	r3
    b604:	e1540005 	cmp	r4, r5
    b608:	3afffffb 	bcc	b5fc <sysinit+0xcc>
    b60c:	ebfff297 	bl	8070 <main>
    b610:	e3500001 	cmp	r0, #1
    b614:	0a000002 	beq	b624 <sysinit+0xf4>
    b618:	ebffffa8 	bl	b4c0 <halt>
    b61c:	e3a00002 	mov	r0, #2
    b620:	ebffffab 	bl	b4d4 <error_halt>
    b624:	eb000697 	bl	d088 <IsChainBootEnabled>
    b628:	e3500000 	cmp	r0, #0
    b62c:	1a000000 	bne	b634 <sysinit+0x104>
    b630:	ebffffb5 	bl	b50c <reboot>
    b634:	e28d0e13 	add	r0, sp, #304	@ 0x130
    b638:	eb0015c7 	bl	10d5c <CInterruptSystem::Destructor()>
    b63c:	e28d0054 	add	r0, sp, #84	@ 0x54
    b640:	eb001484 	bl	10858 <CMemorySystem::Destructor()>
    b644:	f10c0040 	cpsid	f
    b648:	eb000694 	bl	d0a0 <DoChainBoot>
    b64c:	eafffff7 	b	b630 <sysinit+0x100>
    b650:	00017acc 	.word	0x00017acc

0000b654 <CTimer::CTimer(CInterruptSystem*)>:
    b654:	e92d4070 	push	{r4, r5, r6, lr}
    b658:	e1a04000 	mov	r4, r0
    b65c:	e3a05000 	mov	r5, #0
    b660:	e3a06001 	mov	r6, #1
    b664:	e2800018 	add	r0, r0, #24
    b668:	e5845004 	str	r5, [r4, #4]
    b66c:	e5841000 	str	r1, [r4]
    b670:	e5845008 	str	r5, [r4, #8]
    b674:	e5846010 	str	r6, [r4, #16]
    b678:	e584500c 	str	r5, [r4, #12]
    b67c:	e5845014 	str	r5, [r4, #20]
    b680:	eb00255c 	bl	14bf8 <CPtrList::CPtrList()>
    b684:	e3073adc 	movw	r3, #31452	@ 0x7adc
    b688:	e3403001 	movt	r3, #1
    b68c:	e3a02d35 	mov	r2, #3392	@ 0xd40
    b690:	e3402003 	movt	r2, #3
    b694:	e5842020 	str	r2, [r4, #32]
    b698:	e3a010c8 	mov	r1, #200	@ 0xc8
    b69c:	e584601c 	str	r6, [r4, #28]
    b6a0:	e5932000 	ldr	r2, [r3]
    b6a4:	e5841024 	str	r1, [r4, #36]	@ 0x24
    b6a8:	e1520005 	cmp	r2, r5
    b6ac:	e5845028 	str	r5, [r4, #40]	@ 0x28
    b6b0:	e584503c 	str	r5, [r4, #60]	@ 0x3c
    b6b4:	1a000002 	bne	b6c4 <CTimer::CTimer(CInterruptSystem*)+0x70>
    b6b8:	e1a00004 	mov	r0, r4
    b6bc:	e5834000 	str	r4, [r3]
    b6c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b6c4:	e30611b4 	movw	r1, #25012	@ 0x61b4
    b6c8:	e3401001 	movt	r1, #1
    b6cc:	e30601c0 	movw	r0, #25024	@ 0x61c0
    b6d0:	e3400001 	movt	r0, #1
    b6d4:	e3a02040 	mov	r2, #64	@ 0x40
    b6d8:	eb001a96 	bl	12138 <assertion_failed>

0000b6dc <CTimer::~CTimer()>:
    b6dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6e0:	e1a08000 	mov	r8, r0
    b6e4:	e5900000 	ldr	r0, [r0]
    b6e8:	e3500000 	cmp	r0, #0
    b6ec:	0a00002d 	beq	b7a8 <CTimer::~CTimer()+0xcc>
    b6f0:	e3a03000 	mov	r3, #0
    b6f4:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    b6f8:	e3a01049 	mov	r1, #73	@ 0x49
    b6fc:	e2886018 	add	r6, r8, #24
    b700:	eb001695 	bl	1115c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b704:	e1a00006 	mov	r0, r6
    b708:	e3047d43 	movw	r7, #19779	@ 0x4d43
    b70c:	e3447b54 	movt	r7, #19284	@ 0x4b54
    b710:	eb002545 	bl	14c2c <CPtrList::GetFirst() const>
    b714:	e2505000 	subs	r5, r0, #0
    b718:	0a00000f 	beq	b75c <CTimer::~CTimer()+0x80>
    b71c:	eb00255a 	bl	14c8c <CPtrList::GetPtr(TPtrListElement*)>
    b720:	e2504000 	subs	r4, r0, #0
    b724:	0a000013 	beq	b778 <CTimer::~CTimer()+0x9c>
    b728:	e5943000 	ldr	r3, [r4]
    b72c:	e1530007 	cmp	r3, r7
    b730:	1a000016 	bne	b790 <CTimer::~CTimer()+0xb4>
    b734:	e1a01005 	mov	r1, r5
    b738:	e1a00006 	mov	r0, r6
    b73c:	eb0025e0 	bl	14ec4 <CPtrList::Remove(TPtrListElement*)>
    b740:	e3a01014 	mov	r1, #20
    b744:	e1a00004 	mov	r0, r4
    b748:	eb000689 	bl	d174 <operator delete(void*, unsigned int)>
    b74c:	e1a00006 	mov	r0, r6
    b750:	eb002535 	bl	14c2c <CPtrList::GetFirst() const>
    b754:	e2505000 	subs	r5, r0, #0
    b758:	1affffef 	bne	b71c <CTimer::~CTimer()+0x40>
    b75c:	e3073adc 	movw	r3, #31452	@ 0x7adc
    b760:	e3403001 	movt	r3, #1
    b764:	e1a00006 	mov	r0, r6
    b768:	e5835000 	str	r5, [r3]
    b76c:	eb002524 	bl	14c04 <CPtrList::~CPtrList()>
    b770:	e1a00008 	mov	r0, r8
    b774:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b778:	e30611b4 	movw	r1, #25012	@ 0x61b4
    b77c:	e3401001 	movt	r1, #1
    b780:	e30601e8 	movw	r0, #25064	@ 0x61e8
    b784:	e3400001 	movt	r0, #1
    b788:	e3a02057 	mov	r2, #87	@ 0x57
    b78c:	eb001a69 	bl	12138 <assertion_failed>
    b790:	e30611b4 	movw	r1, #25012	@ 0x61b4
    b794:	e3401001 	movt	r1, #1
    b798:	e30601f4 	movw	r0, #25076	@ 0x61f4
    b79c:	e3400001 	movt	r0, #1
    b7a0:	e3a02058 	mov	r2, #88	@ 0x58
    b7a4:	eb001a63 	bl	12138 <assertion_failed>
    b7a8:	e30611b4 	movw	r1, #25012	@ 0x61b4
    b7ac:	e3401001 	movt	r1, #1
    b7b0:	e30601d0 	movw	r0, #25040	@ 0x61d0
    b7b4:	e3400001 	movt	r0, #1
    b7b8:	e3a02046 	mov	r2, #70	@ 0x46
    b7bc:	eb001a5d 	bl	12138 <assertion_failed>

0000b7c0 <CTimer::SetTimeZone(int)>:
    b7c0:	e1a02000 	mov	r2, r0
    b7c4:	e2813e59 	add	r3, r1, #1424	@ 0x590
    b7c8:	e283300f 	add	r3, r3, #15
    b7cc:	e300cb3e 	movw	ip, #2878	@ 0xb3e
    b7d0:	e153000c 	cmp	r3, ip
    b7d4:	93a00001 	movls	r0, #1
    b7d8:	95821014 	strls	r1, [r2, #20]
    b7dc:	83a00000 	movhi	r0, #0
    b7e0:	e12fff1e 	bx	lr

0000b7e4 <CTimer::GetTimeZone() const>:
    b7e4:	e5900014 	ldr	r0, [r0, #20]
    b7e8:	e12fff1e 	bx	lr

0000b7ec <CTimer::SetTime(unsigned int, bool)>:
    b7ec:	e5903014 	ldr	r3, [r0, #20]
    b7f0:	e3a0c03c 	mov	ip, #60	@ 0x3c
    b7f4:	e92d4070 	push	{r4, r5, r6, lr}
    b7f8:	e3520000 	cmp	r2, #0
    b7fc:	e1a04000 	mov	r4, r0
    b800:	e1a05001 	mov	r5, r1
    b804:	e003039c 	mul	r3, ip, r3
    b808:	1a000002 	bne	b818 <CTimer::SetTime(unsigned int, bool)+0x2c>
    b80c:	e3530000 	cmp	r3, #0
    b810:	ba000017 	blt	b874 <CTimer::SetTime(unsigned int, bool)+0x88>
    b814:	e0855003 	add	r5, r5, r3
    b818:	e5942028 	ldr	r2, [r4, #40]	@ 0x28
    b81c:	e3520000 	cmp	r2, #0
    b820:	0a000007 	beq	b844 <CTimer::SetTime(unsigned int, bool)+0x58>
    b824:	e594100c 	ldr	r1, [r4, #12]
    b828:	e0450003 	sub	r0, r5, r3
    b82c:	e1530001 	cmp	r3, r1
    b830:	d0411003 	suble	r1, r1, r3
    b834:	c3a01000 	movgt	r1, #0
    b838:	e12fff32 	blx	r2
    b83c:	e3500000 	cmp	r0, #0
    b840:	0a00000e 	beq	b880 <CTimer::SetTime(unsigned int, bool)+0x94>
    b844:	e5940010 	ldr	r0, [r4, #16]
    b848:	e3500000 	cmp	r0, #0
    b84c:	0584500c 	streq	r5, [r4, #12]
    b850:	0a000005 	beq	b86c <CTimer::SetTime(unsigned int, bool)+0x80>
    b854:	eb0014d9 	bl	10bc0 <EnterCritical>
    b858:	e5943010 	ldr	r3, [r4, #16]
    b85c:	e584500c 	str	r5, [r4, #12]
    b860:	e3530000 	cmp	r3, #0
    b864:	0a000000 	beq	b86c <CTimer::SetTime(unsigned int, bool)+0x80>
    b868:	eb0014ff 	bl	10c6c <LeaveCritical>
    b86c:	e3a00001 	mov	r0, #1
    b870:	e8bd8070 	pop	{r4, r5, r6, pc}
    b874:	e2632000 	rsb	r2, r3, #0
    b878:	e1520001 	cmp	r2, r1
    b87c:	daffffe4 	ble	b814 <CTimer::SetTime(unsigned int, bool)+0x28>
    b880:	e3a00000 	mov	r0, #0
    b884:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b888 <CTimer::GetClockTicks()>:
    b888:	f57ff06f 	isb	sy
    b88c:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    b890:	e12fff1e 	bx	lr

0000b894 <CTimer::GetClockTicks64()>:
    b894:	f57ff06f 	isb	sy
    b898:	ec510f0e 	mrrc	15, 0, r0, r1, cr14
    b89c:	e12fff1e 	bx	lr

0000b8a0 <CTimer::GetTicks() const>:
    b8a0:	e5900004 	ldr	r0, [r0, #4]
    b8a4:	e12fff1e 	bx	lr

0000b8a8 <CTimer::GetUptime() const>:
    b8a8:	e5900008 	ldr	r0, [r0, #8]
    b8ac:	e12fff1e 	bx	lr

0000b8b0 <CTimer::GetTime() const>:
    b8b0:	e590000c 	ldr	r0, [r0, #12]
    b8b4:	e12fff1e 	bx	lr

0000b8b8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    b8b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b8bc:	e1a04000 	mov	r4, r0
    b8c0:	e5900010 	ldr	r0, [r0, #16]
    b8c4:	e1a06001 	mov	r6, r1
    b8c8:	e1a07002 	mov	r7, r2
    b8cc:	e3500000 	cmp	r0, #0
    b8d0:	1a000011 	bne	b91c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    b8d4:	e594800c 	ldr	r8, [r4, #12]
    b8d8:	e5945004 	ldr	r5, [r4, #4]
    b8dc:	e3560000 	cmp	r6, #0
    b8e0:	0a000016 	beq	b940 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
    b8e4:	e3570000 	cmp	r7, #0
    b8e8:	e5868000 	str	r8, [r6]
    b8ec:	0a000019 	beq	b958 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    b8f0:	e308351f 	movw	r3, #34079	@ 0x851f
    b8f4:	e34531eb 	movt	r3, #20971	@ 0x51eb
    b8f8:	e3a01064 	mov	r1, #100	@ 0x64
    b8fc:	e3022710 	movw	r2, #10000	@ 0x2710
    b900:	e0830593 	umull	r0, r3, r3, r5
    b904:	e3a00001 	mov	r0, #1
    b908:	e1a032a3 	lsr	r3, r3, #5
    b90c:	e0655391 	mls	r5, r1, r3, r5
    b910:	e0050592 	mul	r5, r2, r5
    b914:	e5875000 	str	r5, [r7]
    b918:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b91c:	eb0014a7 	bl	10bc0 <EnterCritical>
    b920:	e5943010 	ldr	r3, [r4, #16]
    b924:	e594800c 	ldr	r8, [r4, #12]
    b928:	e3530000 	cmp	r3, #0
    b92c:	e5945004 	ldr	r5, [r4, #4]
    b930:	0affffe9 	beq	b8dc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    b934:	eb0014cc 	bl	10c6c <LeaveCritical>
    b938:	e3560000 	cmp	r6, #0
    b93c:	1affffe8 	bne	b8e4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    b940:	e30611b4 	movw	r1, #25012	@ 0x61b4
    b944:	e3401001 	movt	r1, #1
    b948:	e306021c 	movw	r0, #25116	@ 0x621c
    b94c:	e3400001 	movt	r0, #1
    b950:	e3a02e13 	mov	r2, #304	@ 0x130
    b954:	eb0019f7 	bl	12138 <assertion_failed>
    b958:	e30611b4 	movw	r1, #25012	@ 0x61b4
    b95c:	e3401001 	movt	r1, #1
    b960:	e306022c 	movw	r0, #25132	@ 0x622c
    b964:	e3400001 	movt	r0, #1
    b968:	e3002133 	movw	r2, #307	@ 0x133
    b96c:	eb0019f1 	bl	12138 <assertion_failed>

0000b970 <CTimer::GetUniversalTime() const>:
    b970:	e5903014 	ldr	r3, [r0, #20]
    b974:	e3a0203c 	mov	r2, #60	@ 0x3c
    b978:	e590000c 	ldr	r0, [r0, #12]
    b97c:	e0030392 	mul	r3, r2, r3
    b980:	e1500003 	cmp	r0, r3
    b984:	a0400003 	subge	r0, r0, r3
    b988:	b3a00000 	movlt	r0, #0
    b98c:	e12fff1e 	bx	lr

0000b990 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    b990:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b994:	e1a04000 	mov	r4, r0
    b998:	e5900010 	ldr	r0, [r0, #16]
    b99c:	e1a05001 	mov	r5, r1
    b9a0:	e1a06002 	mov	r6, r2
    b9a4:	e3500000 	cmp	r0, #0
    b9a8:	1a000019 	bne	ba14 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    b9ac:	e594700c 	ldr	r7, [r4, #12]
    b9b0:	e5948004 	ldr	r8, [r4, #4]
    b9b4:	e5943014 	ldr	r3, [r4, #20]
    b9b8:	e3a0203c 	mov	r2, #60	@ 0x3c
    b9bc:	e0030392 	mul	r3, r2, r3
    b9c0:	e1570003 	cmp	r7, r3
    b9c4:	ba000010 	blt	ba0c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    b9c8:	e3550000 	cmp	r5, #0
    b9cc:	0a000018 	beq	ba34 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    b9d0:	e0477003 	sub	r7, r7, r3
    b9d4:	e3560000 	cmp	r6, #0
    b9d8:	e5857000 	str	r7, [r5]
    b9dc:	0a00001a 	beq	ba4c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    b9e0:	e308351f 	movw	r3, #34079	@ 0x851f
    b9e4:	e34531eb 	movt	r3, #20971	@ 0x51eb
    b9e8:	e3a01064 	mov	r1, #100	@ 0x64
    b9ec:	e3022710 	movw	r2, #10000	@ 0x2710
    b9f0:	e0830893 	umull	r0, r3, r3, r8
    b9f4:	e3a00001 	mov	r0, #1
    b9f8:	e1a032a3 	lsr	r3, r3, #5
    b9fc:	e0638391 	mls	r3, r1, r3, r8
    ba00:	e0030392 	mul	r3, r2, r3
    ba04:	e5863000 	str	r3, [r6]
    ba08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ba0c:	e3a00000 	mov	r0, #0
    ba10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ba14:	eb001469 	bl	10bc0 <EnterCritical>
    ba18:	e5943010 	ldr	r3, [r4, #16]
    ba1c:	e594700c 	ldr	r7, [r4, #12]
    ba20:	e3530000 	cmp	r3, #0
    ba24:	e5948004 	ldr	r8, [r4, #4]
    ba28:	0affffe1 	beq	b9b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    ba2c:	eb00148e 	bl	10c6c <LeaveCritical>
    ba30:	eaffffdf 	b	b9b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    ba34:	e30611b4 	movw	r1, #25012	@ 0x61b4
    ba38:	e3401001 	movt	r1, #1
    ba3c:	e306021c 	movw	r0, #25116	@ 0x621c
    ba40:	e3400001 	movt	r0, #1
    ba44:	e3002155 	movw	r2, #341	@ 0x155
    ba48:	eb0019ba 	bl	12138 <assertion_failed>
    ba4c:	e30611b4 	movw	r1, #25012	@ 0x61b4
    ba50:	e3401001 	movt	r1, #1
    ba54:	e306022c 	movw	r0, #25132	@ 0x622c
    ba58:	e3400001 	movt	r0, #1
    ba5c:	e3a02f56 	mov	r2, #344	@ 0x158
    ba60:	eb0019b4 	bl	12138 <assertion_failed>

0000ba64 <CTimer::GetTimeString()>:
    ba64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba68:	e1a04000 	mov	r4, r0
    ba6c:	e5900010 	ldr	r0, [r0, #16]
    ba70:	e24dd014 	sub	sp, sp, #20
    ba74:	e3500000 	cmp	r0, #0
    ba78:	1a000067 	bne	bc1c <CTimer::GetTimeString()+0x1b8>
    ba7c:	e594500c 	ldr	r5, [r4, #12]
    ba80:	e594a004 	ldr	sl, [r4, #4]
    ba84:	e195300a 	orrs	r3, r5, sl
    ba88:	01a0a003 	moveq	sl, r3
    ba8c:	0a000054 	beq	bbe4 <CTimer::GetTimeString()+0x180>
    ba90:	e3088889 	movw	r8, #34953	@ 0x8889
    ba94:	e3488888 	movt	r8, #34952	@ 0x8888
    ba98:	e30a4aab 	movw	r4, #43691	@ 0xaaab
    ba9c:	e34a4aaa 	movt	r4, #43690	@ 0xaaaa
    baa0:	e3050c29 	movw	r0, #23593	@ 0x5c29
    baa4:	e34c028f 	movt	r0, #49807	@ 0xc28f
    baa8:	e0832598 	umull	r2, r3, r8, r5
    baac:	e30de70a 	movw	lr, #55050	@ 0xd70a
    bab0:	e340e0a3 	movt	lr, #163	@ 0xa3
    bab4:	e30067b2 	movw	r6, #1970	@ 0x7b2
    bab8:	e300c16d 	movw	ip, #365	@ 0x16d
    babc:	e1a072a3 	lsr	r7, r3, #5
    bac0:	e1a03007 	mov	r3, r7
    bac4:	e0882798 	umull	r2, r8, r8, r7
    bac8:	e3a0203c 	mov	r2, #60	@ 0x3c
    bacc:	e1a092a8 	lsr	r9, r8, #5
    bad0:	e0675792 	mls	r7, r2, r7, r5
    bad4:	e0683992 	mls	r8, r2, r9, r3
    bad8:	e3052c28 	movw	r2, #23592	@ 0x5c28
    badc:	e340228f 	movt	r2, #655	@ 0x28f
    bae0:	e0843994 	umull	r3, r4, r4, r9
    bae4:	e1a04224 	lsr	r4, r4, #4
    bae8:	ea000007 	b	bb0c <CTimer::GetTimeString()+0xa8>
    baec:	e3160003 	tst	r6, #3
    baf0:	03a03001 	moveq	r3, #1
    baf4:	13a03000 	movne	r3, #0
    baf8:	e083100c 	add	r1, r3, ip
    bafc:	e1540001 	cmp	r4, r1
    bb00:	3a00000a 	bcc	bb30 <CTimer::GetTimeString()+0xcc>
    bb04:	e0444001 	sub	r4, r4, r1
    bb08:	e2866001 	add	r6, r6, #1
    bb0c:	e0030690 	mul	r3, r0, r6
    bb10:	e1520163 	cmp	r2, r3, ror #2
    bb14:	3afffff4 	bcc	baec <CTimer::GetTimeString()+0x88>
    bb18:	e15e0263 	cmp	lr, r3, ror #4
    bb1c:	23a03001 	movcs	r3, #1
    bb20:	33a03000 	movcc	r3, #0
    bb24:	e083100c 	add	r1, r3, ip
    bb28:	e1540001 	cmp	r4, r1
    bb2c:	2afffff4 	bcs	bb04 <CTimer::GetTimeString()+0xa0>
    bb30:	e3060f28 	movw	r0, #28456	@ 0x6f28
    bb34:	e3400001 	movt	r0, #1
    bb38:	e3a05000 	mov	r5, #0
    bb3c:	ea000001 	b	bb48 <CTimer::GetTimeString()+0xe4>
    bb40:	e0444001 	sub	r4, r4, r1
    bb44:	e2855001 	add	r5, r5, #1
    bb48:	e3550001 	cmp	r5, #1
    bb4c:	13a02000 	movne	r2, #0
    bb50:	02032001 	andeq	r2, r3, #1
    bb54:	e3520000 	cmp	r2, #0
    bb58:	13a0101d 	movne	r1, #29
    bb5c:	07901105 	ldreq	r1, [r0, r5, lsl #2]
    bb60:	e1540001 	cmp	r4, r1
    bb64:	2afffff5 	bcs	bb40 <CTimer::GetTimeString()+0xdc>
    bb68:	e308b51f 	movw	fp, #34079	@ 0x851f
    bb6c:	e345b1eb 	movt	fp, #20971	@ 0x51eb
    bb70:	e3a00010 	mov	r0, #16
    bb74:	e08b3a9b 	umull	r3, fp, fp, sl
    bb78:	e3a03064 	mov	r3, #100	@ 0x64
    bb7c:	e1a0b2ab 	lsr	fp, fp, #5
    bb80:	e06bab93 	mls	fp, r3, fp, sl
    bb84:	eb000562 	bl	d114 <operator new(unsigned int)>
    bb88:	e1a0a000 	mov	sl, r0
    bb8c:	ebfff856 	bl	9cec <CString::CString()>
    bb90:	e30037b7 	movw	r3, #1975	@ 0x7b7
    bb94:	e1560003 	cmp	r6, r3
    bb98:	9a000014 	bls	bbf0 <CTimer::GetTimeString()+0x18c>
    bb9c:	e30a2aab 	movw	r2, #43691	@ 0xaaab
    bba0:	e34a2aaa 	movt	r2, #43690	@ 0xaaaa
    bba4:	e58db00c 	str	fp, [sp, #12]
    bba8:	e2843001 	add	r3, r4, #1
    bbac:	e58d7008 	str	r7, [sp, #8]
    bbb0:	e1a0000a 	mov	r0, sl
    bbb4:	e0821992 	umull	r1, r2, r2, r9
    bbb8:	e3a01018 	mov	r1, #24
    bbbc:	e58d8004 	str	r8, [sp, #4]
    bbc0:	e1a02222 	lsr	r2, r2, #4
    bbc4:	e0629291 	mls	r2, r1, r2, r9
    bbc8:	e3061240 	movw	r1, #25152	@ 0x6240
    bbcc:	e3401001 	movt	r1, #1
    bbd0:	e58d2000 	str	r2, [sp]
    bbd4:	e3072a30 	movw	r2, #31280	@ 0x7a30
    bbd8:	e3402001 	movt	r2, #1
    bbdc:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    bbe0:	ebfffe26 	bl	b480 <CString::Format(char const*, ...)>
    bbe4:	e1a0000a 	mov	r0, sl
    bbe8:	e28dd014 	add	sp, sp, #20
    bbec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbf0:	e1a0000a 	mov	r0, sl
    bbf4:	e1a03008 	mov	r3, r8
    bbf8:	e1a02009 	mov	r2, r9
    bbfc:	e58db004 	str	fp, [sp, #4]
    bc00:	e58d7000 	str	r7, [sp]
    bc04:	e306125c 	movw	r1, #25180	@ 0x625c
    bc08:	e3401001 	movt	r1, #1
    bc0c:	ebfffe1b 	bl	b480 <CString::Format(char const*, ...)>
    bc10:	e1a0000a 	mov	r0, sl
    bc14:	e28dd014 	add	sp, sp, #20
    bc18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc1c:	eb0013e7 	bl	10bc0 <EnterCritical>
    bc20:	e5943010 	ldr	r3, [r4, #16]
    bc24:	e594500c 	ldr	r5, [r4, #12]
    bc28:	e3530000 	cmp	r3, #0
    bc2c:	e594a004 	ldr	sl, [r4, #4]
    bc30:	0affff93 	beq	ba84 <CTimer::GetTimeString()+0x20>
    bc34:	eb00140c 	bl	10c6c <LeaveCritical>
    bc38:	eaffff91 	b	ba84 <CTimer::GetTimeString()+0x20>

0000bc3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    bc3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bc40:	e1a07000 	mov	r7, r0
    bc44:	e3a00014 	mov	r0, #20
    bc48:	e1a08001 	mov	r8, r1
    bc4c:	e1a04002 	mov	r4, r2
    bc50:	e1a09003 	mov	r9, r3
    bc54:	eb00052e 	bl	d114 <operator new(unsigned int)>
    bc58:	e5976004 	ldr	r6, [r7, #4]
    bc5c:	e3540000 	cmp	r4, #0
    bc60:	e0866008 	add	r6, r6, r8
    bc64:	0a00003e 	beq	bd64 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    bc68:	e1a05000 	mov	r5, r0
    bc6c:	e5804004 	str	r4, [r0, #4]
    bc70:	e597001c 	ldr	r0, [r7, #28]
    bc74:	e59d3020 	ldr	r3, [sp, #32]
    bc78:	e5853010 	str	r3, [r5, #16]
    bc7c:	e3500000 	cmp	r0, #0
    bc80:	e3043d43 	movw	r3, #19779	@ 0x4d43
    bc84:	e3443b54 	movt	r3, #19284	@ 0x4b54
    bc88:	e5856008 	str	r6, [r5, #8]
    bc8c:	e585900c 	str	r9, [r5, #12]
    bc90:	e5853000 	str	r3, [r5]
    bc94:	1a000027 	bne	bd38 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    bc98:	e2879018 	add	r9, r7, #24
    bc9c:	e1a00009 	mov	r0, r9
    bca0:	eb0023e1 	bl	14c2c <CPtrList::GetFirst() const>
    bca4:	e2504000 	subs	r4, r0, #0
    bca8:	0a000035 	beq	bd84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    bcac:	e1a00004 	mov	r0, r4
    bcb0:	e3048d43 	movw	r8, #19779	@ 0x4d43
    bcb4:	e3448b54 	movt	r8, #19284	@ 0x4b54
    bcb8:	eb0023f3 	bl	14c8c <CPtrList::GetPtr(TPtrListElement*)>
    bcbc:	e3500000 	cmp	r0, #0
    bcc0:	0a000010 	beq	bd08 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
    bcc4:	e5903000 	ldr	r3, [r0]
    bcc8:	e1530008 	cmp	r3, r8
    bccc:	1a000013 	bne	bd20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
    bcd0:	e5903008 	ldr	r3, [r0, #8]
    bcd4:	e0433006 	sub	r3, r3, r6
    bcd8:	e3530000 	cmp	r3, #0
    bcdc:	ca000017 	bgt	bd40 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    bce0:	e1a01004 	mov	r1, r4
    bce4:	e1a00009 	mov	r0, r9
    bce8:	eb0023d1 	bl	14c34 <CPtrList::GetNext(TPtrListElement*) const>
    bcec:	e3500000 	cmp	r0, #0
    bcf0:	0a000023 	beq	bd84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    bcf4:	e1a04000 	mov	r4, r0
    bcf8:	e1a00004 	mov	r0, r4
    bcfc:	eb0023e2 	bl	14c8c <CPtrList::GetPtr(TPtrListElement*)>
    bd00:	e3500000 	cmp	r0, #0
    bd04:	1affffee 	bne	bcc4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x88>
    bd08:	e30611b4 	movw	r1, #25012	@ 0x61b4
    bd0c:	e3401001 	movt	r1, #1
    bd10:	e3060270 	movw	r0, #25200	@ 0x6270
    bd14:	e3400001 	movt	r0, #1
    bd18:	e30021bf 	movw	r2, #447	@ 0x1bf
    bd1c:	eb001905 	bl	12138 <assertion_failed>
    bd20:	e30611b4 	movw	r1, #25012	@ 0x61b4
    bd24:	e3401001 	movt	r1, #1
    bd28:	e3060280 	movw	r0, #25216	@ 0x6280
    bd2c:	e3400001 	movt	r0, #1
    bd30:	e3a02d07 	mov	r2, #448	@ 0x1c0
    bd34:	eb0018ff 	bl	12138 <assertion_failed>
    bd38:	eb0013a0 	bl	10bc0 <EnterCritical>
    bd3c:	eaffffd5 	b	bc98 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
    bd40:	e1a02005 	mov	r2, r5
    bd44:	e1a01004 	mov	r1, r4
    bd48:	e1a00009 	mov	r0, r9
    bd4c:	eb0023e4 	bl	14ce4 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    bd50:	e597301c 	ldr	r3, [r7, #28]
    bd54:	e3530000 	cmp	r3, #0
    bd58:	1a000007 	bne	bd7c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    bd5c:	e1a00005 	mov	r0, r5
    bd60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bd64:	e30611b4 	movw	r1, #25012	@ 0x61b4
    bd68:	e3401001 	movt	r1, #1
    bd6c:	e306052c 	movw	r0, #25900	@ 0x652c
    bd70:	e3400001 	movt	r0, #1
    bd74:	e30021af 	movw	r2, #431	@ 0x1af
    bd78:	eb0018ee 	bl	12138 <assertion_failed>
    bd7c:	eb0013ba 	bl	10c6c <LeaveCritical>
    bd80:	eafffff5 	b	bd5c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    bd84:	e1a02005 	mov	r2, r5
    bd88:	e1a01004 	mov	r1, r4
    bd8c:	e1a00009 	mov	r0, r9
    bd90:	eb00240f 	bl	14dd4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    bd94:	eaffffed 	b	bd50 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>

0000bd98 <CTimer::CancelKernelTimer(unsigned int)>:
    bd98:	e92d4070 	push	{r4, r5, r6, lr}
    bd9c:	e2514000 	subs	r4, r1, #0
    bda0:	0a00001a 	beq	be10 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    bda4:	e1a05000 	mov	r5, r0
    bda8:	e590001c 	ldr	r0, [r0, #28]
    bdac:	e3500000 	cmp	r0, #0
    bdb0:	1a000014 	bne	be08 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    bdb4:	e2856018 	add	r6, r5, #24
    bdb8:	e1a01004 	mov	r1, r4
    bdbc:	e1a00006 	mov	r0, r6
    bdc0:	eb002489 	bl	14fec <CPtrList::Find(void*) const>
    bdc4:	e2501000 	subs	r1, r0, #0
    bdc8:	0a000009 	beq	bdf4 <CTimer::CancelKernelTimer(unsigned int)+0x5c>
    bdcc:	e5942000 	ldr	r2, [r4]
    bdd0:	e3043d43 	movw	r3, #19779	@ 0x4d43
    bdd4:	e3443b54 	movt	r3, #19284	@ 0x4b54
    bdd8:	e1520003 	cmp	r2, r3
    bddc:	1a000011 	bne	be28 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    bde0:	e1a00006 	mov	r0, r6
    bde4:	eb002436 	bl	14ec4 <CPtrList::Remove(TPtrListElement*)>
    bde8:	e3a01014 	mov	r1, #20
    bdec:	e1a00004 	mov	r0, r4
    bdf0:	eb0004df 	bl	d174 <operator delete(void*, unsigned int)>
    bdf4:	e595301c 	ldr	r3, [r5, #28]
    bdf8:	e3530000 	cmp	r3, #0
    bdfc:	08bd8070 	popeq	{r4, r5, r6, pc}
    be00:	e8bd4070 	pop	{r4, r5, r6, lr}
    be04:	ea001398 	b	10c6c <LeaveCritical>
    be08:	eb00136c 	bl	10bc0 <EnterCritical>
    be0c:	eaffffe8 	b	bdb4 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    be10:	e30611b4 	movw	r1, #25012	@ 0x61b4
    be14:	e3401001 	movt	r1, #1
    be18:	e30601e8 	movw	r0, #25064	@ 0x61e8
    be1c:	e3400001 	movt	r0, #1
    be20:	e3a02f77 	mov	r2, #476	@ 0x1dc
    be24:	eb0018c3 	bl	12138 <assertion_failed>
    be28:	e30611b4 	movw	r1, #25012	@ 0x61b4
    be2c:	e3401001 	movt	r1, #1
    be30:	e30601f4 	movw	r0, #25076	@ 0x61f4
    be34:	e3400001 	movt	r0, #1
    be38:	e30021e3 	movw	r2, #483	@ 0x1e3
    be3c:	eb0018bd 	bl	12138 <assertion_failed>

0000be40 <CTimer::PollKernelTimers()>:
    be40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    be44:	e1a05000 	mov	r5, r0
    be48:	e590001c 	ldr	r0, [r0, #28]
    be4c:	e3500000 	cmp	r0, #0
    be50:	1a000030 	bne	bf18 <CTimer::PollKernelTimers()+0xd8>
    be54:	e3047d43 	movw	r7, #19779	@ 0x4d43
    be58:	e3447b54 	movt	r7, #19284	@ 0x4b54
    be5c:	e2856018 	add	r6, r5, #24
    be60:	e1a00006 	mov	r0, r6
    be64:	eb002370 	bl	14c2c <CPtrList::GetFirst() const>
    be68:	e2508000 	subs	r8, r0, #0
    be6c:	0a000037 	beq	bf50 <CTimer::PollKernelTimers()+0x110>
    be70:	eb002385 	bl	14c8c <CPtrList::GetPtr(TPtrListElement*)>
    be74:	e2504000 	subs	r4, r0, #0
    be78:	0a000028 	beq	bf20 <CTimer::PollKernelTimers()+0xe0>
    be7c:	e5943000 	ldr	r3, [r4]
    be80:	e1530007 	cmp	r3, r7
    be84:	1a00002b 	bne	bf38 <CTimer::PollKernelTimers()+0xf8>
    be88:	e5952004 	ldr	r2, [r5, #4]
    be8c:	e5943008 	ldr	r3, [r4, #8]
    be90:	e0433002 	sub	r3, r3, r2
    be94:	e3530000 	cmp	r3, #0
    be98:	ca00002c 	bgt	bf50 <CTimer::PollKernelTimers()+0x110>
    be9c:	e1a01008 	mov	r1, r8
    bea0:	e1a00006 	mov	r0, r6
    bea4:	eb002406 	bl	14ec4 <CPtrList::Remove(TPtrListElement*)>
    bea8:	e595301c 	ldr	r3, [r5, #28]
    beac:	e3530000 	cmp	r3, #0
    beb0:	1a00000e 	bne	bef0 <CTimer::PollKernelTimers()+0xb0>
    beb4:	e5943004 	ldr	r3, [r4, #4]
    beb8:	e3530000 	cmp	r3, #0
    bebc:	0a00000f 	beq	bf00 <CTimer::PollKernelTimers()+0xc0>
    bec0:	e5942010 	ldr	r2, [r4, #16]
    bec4:	e1a00004 	mov	r0, r4
    bec8:	e594100c 	ldr	r1, [r4, #12]
    becc:	e12fff33 	blx	r3
    bed0:	e1a00004 	mov	r0, r4
    bed4:	e3a01014 	mov	r1, #20
    bed8:	eb0004a5 	bl	d174 <operator delete(void*, unsigned int)>
    bedc:	e595001c 	ldr	r0, [r5, #28]
    bee0:	e3500000 	cmp	r0, #0
    bee4:	0affffdd 	beq	be60 <CTimer::PollKernelTimers()+0x20>
    bee8:	eb001334 	bl	10bc0 <EnterCritical>
    beec:	eaffffdb 	b	be60 <CTimer::PollKernelTimers()+0x20>
    bef0:	eb00135d 	bl	10c6c <LeaveCritical>
    bef4:	e5943004 	ldr	r3, [r4, #4]
    bef8:	e3530000 	cmp	r3, #0
    befc:	1affffef 	bne	bec0 <CTimer::PollKernelTimers()+0x80>
    bf00:	e30611b4 	movw	r1, #25012	@ 0x61b4
    bf04:	e3401001 	movt	r1, #1
    bf08:	e306052c 	movw	r0, #25900	@ 0x652c
    bf0c:	e3400001 	movt	r0, #1
    bf10:	e3002205 	movw	r2, #517	@ 0x205
    bf14:	eb001887 	bl	12138 <assertion_failed>
    bf18:	eb001328 	bl	10bc0 <EnterCritical>
    bf1c:	eaffffcc 	b	be54 <CTimer::PollKernelTimers()+0x14>
    bf20:	e30611b4 	movw	r1, #25012	@ 0x61b4
    bf24:	e3401001 	movt	r1, #1
    bf28:	e30601e8 	movw	r0, #25064	@ 0x61e8
    bf2c:	e3400001 	movt	r0, #1
    bf30:	e3a02f7e 	mov	r2, #504	@ 0x1f8
    bf34:	eb00187f 	bl	12138 <assertion_failed>
    bf38:	e30611b4 	movw	r1, #25012	@ 0x61b4
    bf3c:	e3401001 	movt	r1, #1
    bf40:	e30601f4 	movw	r0, #25076	@ 0x61f4
    bf44:	e3400001 	movt	r0, #1
    bf48:	e30021f9 	movw	r2, #505	@ 0x1f9
    bf4c:	eb001879 	bl	12138 <assertion_failed>
    bf50:	e595301c 	ldr	r3, [r5, #28]
    bf54:	e3530000 	cmp	r3, #0
    bf58:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    bf5c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bf60:	ea001341 	b	10c6c <LeaveCritical>

0000bf64 <CTimer::InterruptHandler()>:
    bf64:	e92d4070 	push	{r4, r5, r6, lr}
    bf68:	e1a04000 	mov	r4, r0
    bf6c:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
    bf70:	e3a0c000 	mov	ip, #0
    bf74:	e3022710 	movw	r2, #10000	@ 0x2710
    bf78:	e0933002 	adds	r3, r3, r2
    bf7c:	e1a0100c 	mov	r1, ip
    bf80:	e1a00003 	mov	r0, r3
    bf84:	e2ae2000 	adc	r2, lr, #0
    bf88:	e1a0300c 	mov	r3, ip
    bf8c:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    bf90:	e5940010 	ldr	r0, [r4, #16]
    bf94:	e150000c 	cmp	r0, ip
    bf98:	1a00001e 	bne	c018 <CTimer::InterruptHandler()+0xb4>
    bf9c:	e5943004 	ldr	r3, [r4, #4]
    bfa0:	e3051c29 	movw	r1, #23593	@ 0x5c29
    bfa4:	e34c128f 	movt	r1, #49807	@ 0xc28f
    bfa8:	e3052c28 	movw	r2, #23592	@ 0x5c28
    bfac:	e340228f 	movt	r2, #655	@ 0x28f
    bfb0:	e2833001 	add	r3, r3, #1
    bfb4:	e5843004 	str	r3, [r4, #4]
    bfb8:	e0030391 	mul	r3, r1, r3
    bfbc:	e1520163 	cmp	r2, r3, ror #2
    bfc0:	2a00000d 	bcs	bffc <CTimer::InterruptHandler()+0x98>
    bfc4:	e1a00004 	mov	r0, r4
    bfc8:	ebffff9c 	bl	be40 <CTimer::PollKernelTimers()>
    bfcc:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
    bfd0:	e3530000 	cmp	r3, #0
    bfd4:	08bd8070 	popeq	{r4, r5, r6, pc}
    bfd8:	e2846028 	add	r6, r4, #40	@ 0x28
    bfdc:	e3a05000 	mov	r5, #0
    bfe0:	e5b63004 	ldr	r3, [r6, #4]!
    bfe4:	e2855001 	add	r5, r5, #1
    bfe8:	e12fff33 	blx	r3
    bfec:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
    bff0:	e1530005 	cmp	r3, r5
    bff4:	8afffff9 	bhi	bfe0 <CTimer::InterruptHandler()+0x7c>
    bff8:	e8bd8070 	pop	{r4, r5, r6, pc}
    bffc:	e5943008 	ldr	r3, [r4, #8]
    c000:	e2833001 	add	r3, r3, #1
    c004:	e5843008 	str	r3, [r4, #8]
    c008:	e594300c 	ldr	r3, [r4, #12]
    c00c:	e2833001 	add	r3, r3, #1
    c010:	e584300c 	str	r3, [r4, #12]
    c014:	eaffffea 	b	bfc4 <CTimer::InterruptHandler()+0x60>
    c018:	eb0012e8 	bl	10bc0 <EnterCritical>
    c01c:	e5943004 	ldr	r3, [r4, #4]
    c020:	e3051c29 	movw	r1, #23593	@ 0x5c29
    c024:	e34c128f 	movt	r1, #49807	@ 0xc28f
    c028:	e2833001 	add	r3, r3, #1
    c02c:	e5843004 	str	r3, [r4, #4]
    c030:	e3052c28 	movw	r2, #23592	@ 0x5c28
    c034:	e340228f 	movt	r2, #655	@ 0x28f
    c038:	e5940010 	ldr	r0, [r4, #16]
    c03c:	e0030391 	mul	r3, r1, r3
    c040:	e1520163 	cmp	r2, r3, ror #2
    c044:	2a000003 	bcs	c058 <CTimer::InterruptHandler()+0xf4>
    c048:	e3500000 	cmp	r0, #0
    c04c:	0affffdc 	beq	bfc4 <CTimer::InterruptHandler()+0x60>
    c050:	eb001305 	bl	10c6c <LeaveCritical>
    c054:	eaffffda 	b	bfc4 <CTimer::InterruptHandler()+0x60>
    c058:	e5943008 	ldr	r3, [r4, #8]
    c05c:	e2833001 	add	r3, r3, #1
    c060:	e5843008 	str	r3, [r4, #8]
    c064:	e594300c 	ldr	r3, [r4, #12]
    c068:	e2833001 	add	r3, r3, #1
    c06c:	e584300c 	str	r3, [r4, #12]
    c070:	eafffff4 	b	c048 <CTimer::InterruptHandler()+0xe4>

0000c074 <CTimer::InterruptHandler(void*)>:
    c074:	e3500000 	cmp	r0, #0
    c078:	0a000000 	beq	c080 <CTimer::InterruptHandler(void*)+0xc>
    c07c:	eaffffb8 	b	bf64 <CTimer::InterruptHandler()>
    c080:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c084:	e3401001 	movt	r1, #1
    c088:	e30602a8 	movw	r0, #25256	@ 0x62a8
    c08c:	e3400001 	movt	r0, #1
    c090:	e3a02f93 	mov	r2, #588	@ 0x24c
    c094:	e92d4010 	push	{r4, lr}
    c098:	eb001826 	bl	12138 <assertion_failed>

0000c09c <CTimer::TuneMsDelay()>:
    c09c:	e92d4070 	push	{r4, r5, r6, lr}
    c0a0:	e1a06000 	mov	r6, r0
    c0a4:	e5900020 	ldr	r0, [r0, #32]
    c0a8:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
    c0ac:	e24dd008 	sub	sp, sp, #8
    c0b0:	e5964004 	ldr	r4, [r6, #4]
    c0b4:	e3025710 	movw	r5, #10000	@ 0x2710
    c0b8:	e0000092 	mul	r0, r2, r0
    c0bc:	eb001c57 	bl	13220 <DelayLoop>
    c0c0:	e5962004 	ldr	r2, [r6, #4]
    c0c4:	e5963020 	ldr	r3, [r6, #32]
    c0c8:	e0422004 	sub	r2, r2, r4
    c0cc:	e308451f 	movw	r4, #34079	@ 0x851f
    c0d0:	e34541eb 	movt	r4, #20971	@ 0x51eb
    c0d4:	e735f215 	udiv	r5, r5, r2
    c0d8:	e0030593 	mul	r3, r3, r5
    c0dc:	e0832394 	umull	r2, r3, r4, r3
    c0e0:	e3042dd3 	movw	r2, #19923	@ 0x4dd3
    c0e4:	e3412062 	movt	r2, #4194	@ 0x1062
    c0e8:	e1a032a3 	lsr	r3, r3, #5
    c0ec:	e5863020 	str	r3, [r6, #32]
    c0f0:	e2833f7d 	add	r3, r3, #500	@ 0x1f4
    c0f4:	e0832392 	umull	r2, r3, r2, r3
    c0f8:	e1a03323 	lsr	r3, r3, #6
    c0fc:	e5863024 	str	r3, [r6, #36]	@ 0x24
    c100:	e0843594 	umull	r3, r4, r4, r5
    c104:	eb0020a4 	bl	1439c <CLogger::Get()>
    c108:	e3a02064 	mov	r2, #100	@ 0x64
    c10c:	e59f1024 	ldr	r1, [pc, #36]	@ c138 <CTimer::TuneMsDelay()+0x9c>
    c110:	e30632b4 	movw	r3, #25268	@ 0x62b4
    c114:	e3403001 	movt	r3, #1
    c118:	e1a042a4 	lsr	r4, r4, #5
    c11c:	e58d4000 	str	r4, [sp]
    c120:	e0655492 	mls	r5, r2, r4, r5
    c124:	e3a02003 	mov	r2, #3
    c128:	e58d5004 	str	r5, [sp, #4]
    c12c:	eb002263 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c130:	e28dd008 	add	sp, sp, #8
    c134:	e8bd8070 	pop	{r4, r5, r6, pc}
    c138:	00016f58 	.word	0x00016f58

0000c13c <CTimer::Initialize()>:
    c13c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c140:	e1a04000 	mov	r4, r0
    c144:	e5900000 	ldr	r0, [r0]
    c148:	e24dd00c 	sub	sp, sp, #12
    c14c:	e3500000 	cmp	r0, #0
    c150:	0a000028 	beq	c1f8 <CTimer::Initialize()+0xbc>
    c154:	e1a03004 	mov	r3, r4
    c158:	e3a01049 	mov	r1, #73	@ 0x49
    c15c:	e30c2074 	movw	r2, #49268	@ 0xc074
    c160:	e3402000 	movt	r2, #0
    c164:	eb0013b5 	bl	11040 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c168:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
    c16c:	e3a05000 	mov	r5, #0
    c170:	e3022710 	movw	r2, #10000	@ 0x2710
    c174:	e0933002 	adds	r3, r3, r2
    c178:	e1a01005 	mov	r1, r5
    c17c:	e1a00003 	mov	r0, r3
    c180:	e2ac6000 	adc	r6, ip, #0
    c184:	e1a07005 	mov	r7, r5
    c188:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
    c18c:	e3a03001 	mov	r3, #1
    c190:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    c194:	e1a00004 	mov	r0, r4
    c198:	ebffffbf 	bl	c09c <CTimer::TuneMsDelay()>
    c19c:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
    c1a0:	e3a01101 	mov	r1, #1073741824	@ 0x40000000
    c1a4:	e3a02b3e 	mov	r2, #63488	@ 0xf800
    c1a8:	e3402124 	movt	r2, #292	@ 0x124
    c1ac:	e30a3aab 	movw	r3, #43691	@ 0xaaab
    c1b0:	e34036aa 	movt	r3, #1706	@ 0x6aa
    c1b4:	e5916008 	ldr	r6, [r1, #8]
    c1b8:	e1560003 	cmp	r6, r3
    c1bc:	01540002 	cmpeq	r4, r2
    c1c0:	1a000002 	bne	c1d0 <CTimer::Initialize()+0x94>
    c1c4:	e3a00001 	mov	r0, #1
    c1c8:	e28dd00c 	add	sp, sp, #12
    c1cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c1d0:	eb002071 	bl	1439c <CLogger::Get()>
    c1d4:	e59f1034 	ldr	r1, [pc, #52]	@ c210 <CTimer::Initialize()+0xd4>
    c1d8:	e1a02005 	mov	r2, r5
    c1dc:	e88d0050 	stm	sp, {r4, r6}
    c1e0:	e30632cc 	movw	r3, #25292	@ 0x62cc
    c1e4:	e3403001 	movt	r3, #1
    c1e8:	eb002234 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c1ec:	e3a00001 	mov	r0, #1
    c1f0:	e28dd00c 	add	sp, sp, #12
    c1f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c1f8:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c1fc:	e3401001 	movt	r1, #1
    c200:	e30601d0 	movw	r0, #25040	@ 0x61d0
    c204:	e3400001 	movt	r0, #1
    c208:	e3a02064 	mov	r2, #100	@ 0x64
    c20c:	eb0017c9 	bl	12138 <assertion_failed>
    c210:	00016f58 	.word	0x00016f58

0000c214 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
    c214:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
    c218:	e92d4010 	push	{r4, lr}
    c21c:	e3530000 	cmp	r3, #0
    c220:	1a000008 	bne	c248 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
    c224:	e3510000 	cmp	r1, #0
    c228:	e5801028 	str	r1, [r0, #40]	@ 0x28
    c22c:	18bd8010 	popne	{r4, pc}
    c230:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c234:	e3401001 	movt	r1, #1
    c238:	e3060324 	movw	r0, #25380	@ 0x6324
    c23c:	e3400001 	movt	r0, #1
    c240:	e3a02f99 	mov	r2, #612	@ 0x264
    c244:	eb0017bb 	bl	12138 <assertion_failed>
    c248:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c24c:	e3401001 	movt	r1, #1
    c250:	e3060308 	movw	r0, #25352	@ 0x6308
    c254:	e3400001 	movt	r0, #1
    c258:	e3002262 	movw	r2, #610	@ 0x262
    c25c:	eb0017b5 	bl	12138 <assertion_failed>

0000c260 <CTimer::RegisterPeriodicHandler(void (*)())>:
    c260:	e3510000 	cmp	r1, #0
    c264:	e92d4010 	push	{r4, lr}
    c268:	0a00000a 	beq	c298 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
    c26c:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
    c270:	e3530003 	cmp	r3, #3
    c274:	8a00000d 	bhi	c2b0 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    c278:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
    c27c:	e0803103 	add	r3, r0, r3, lsl #2
    c280:	e583102c 	str	r1, [r3, #44]	@ 0x2c
    c284:	f57ff04f 	dsb	sy
    c288:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
    c28c:	e2833001 	add	r3, r3, #1
    c290:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    c294:	e8bd8010 	pop	{r4, pc}
    c298:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c29c:	e3401001 	movt	r1, #1
    c2a0:	e306052c 	movw	r0, #25900	@ 0x652c
    c2a4:	e3400001 	movt	r0, #1
    c2a8:	e3002269 	movw	r2, #617	@ 0x269
    c2ac:	eb0017a1 	bl	12138 <assertion_failed>
    c2b0:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c2b4:	e3401001 	movt	r1, #1
    c2b8:	e3060340 	movw	r0, #25408	@ 0x6340
    c2bc:	e3400001 	movt	r0, #1
    c2c0:	e300226b 	movw	r2, #619	@ 0x26b
    c2c4:	eb00179b 	bl	12138 <assertion_failed>

0000c2c8 <CTimer::SimpleMsDelay(unsigned int)>:
    c2c8:	e3500000 	cmp	r0, #0
    c2cc:	012fff1e 	bxeq	lr
    c2d0:	e3a03ffa 	mov	r3, #1000	@ 0x3e8
    c2d4:	e0000093 	mul	r0, r3, r0
    c2d8:	e3500000 	cmp	r0, #0
    c2dc:	012fff1e 	bxeq	lr
    c2e0:	e2800001 	add	r0, r0, #1
    c2e4:	f57ff06f 	isb	sy
    c2e8:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    c2ec:	f57ff06f 	isb	sy
    c2f0:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    c2f4:	e0433002 	sub	r3, r3, r2
    c2f8:	e1500003 	cmp	r0, r3
    c2fc:	8afffffa 	bhi	c2ec <CTimer::SimpleMsDelay(unsigned int)+0x24>
    c300:	e12fff1e 	bx	lr

0000c304 <CTimer::SimpleusDelay(unsigned int)>:
    c304:	e3500000 	cmp	r0, #0
    c308:	012fff1e 	bxeq	lr
    c30c:	e2800001 	add	r0, r0, #1
    c310:	f57ff06f 	isb	sy
    c314:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    c318:	f57ff06f 	isb	sy
    c31c:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    c320:	e0433002 	sub	r3, r3, r2
    c324:	e1500003 	cmp	r0, r3
    c328:	8afffffa 	bhi	c318 <CTimer::SimpleusDelay(unsigned int)+0x14>
    c32c:	e12fff1e 	bx	lr

0000c330 <CTimer::IsLeapYear(unsigned int)>:
    c330:	e3053c29 	movw	r3, #23593	@ 0x5c29
    c334:	e34c328f 	movt	r3, #49807	@ 0xc28f
    c338:	e3052c28 	movw	r2, #23592	@ 0x5c28
    c33c:	e340228f 	movt	r2, #655	@ 0x28f
    c340:	e0030093 	mul	r3, r3, r0
    c344:	e1520163 	cmp	r2, r3, ror #2
    c348:	2a000003 	bcs	c35c <CTimer::IsLeapYear(unsigned int)+0x2c>
    c34c:	e3100003 	tst	r0, #3
    c350:	03a00001 	moveq	r0, #1
    c354:	13a00000 	movne	r0, #0
    c358:	e12fff1e 	bx	lr
    c35c:	e30d270a 	movw	r2, #55050	@ 0xd70a
    c360:	e34020a3 	movt	r2, #163	@ 0xa3
    c364:	e1520263 	cmp	r2, r3, ror #4
    c368:	23a00001 	movcs	r0, #1
    c36c:	33a00000 	movcc	r0, #0
    c370:	e12fff1e 	bx	lr

0000c374 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    c374:	e3500001 	cmp	r0, #1
    c378:	0a000003 	beq	c38c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    c37c:	e3063f28 	movw	r3, #28456	@ 0x6f28
    c380:	e3403001 	movt	r3, #1
    c384:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    c388:	e12fff1e 	bx	lr
    c38c:	e3053c29 	movw	r3, #23593	@ 0x5c29
    c390:	e34c328f 	movt	r3, #49807	@ 0xc28f
    c394:	e3052c28 	movw	r2, #23592	@ 0x5c28
    c398:	e340228f 	movt	r2, #655	@ 0x28f
    c39c:	e0030193 	mul	r3, r3, r1
    c3a0:	e1520163 	cmp	r2, r3, ror #2
    c3a4:	2a000003 	bcs	c3b8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
    c3a8:	e3110003 	tst	r1, #3
    c3ac:	1afffff2 	bne	c37c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    c3b0:	e3a0001d 	mov	r0, #29
    c3b4:	e12fff1e 	bx	lr
    c3b8:	e30d270a 	movw	r2, #55050	@ 0xd70a
    c3bc:	e34020a3 	movt	r2, #163	@ 0xa3
    c3c0:	e1520263 	cmp	r2, r3, ror #4
    c3c4:	3affffec 	bcc	c37c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    c3c8:	eafffff8 	b	c3b0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

0000c3cc <CTimer::Get()>:
    c3cc:	e3073adc 	movw	r3, #31452	@ 0x7adc
    c3d0:	e3403001 	movt	r3, #1
    c3d4:	e5930000 	ldr	r0, [r3]
    c3d8:	e3500000 	cmp	r0, #0
    c3dc:	112fff1e 	bxne	lr
    c3e0:	e30611b4 	movw	r1, #25012	@ 0x61b4
    c3e4:	e3401001 	movt	r1, #1
    c3e8:	e3060374 	movw	r0, #25460	@ 0x6374
    c3ec:	e3400001 	movt	r0, #1
    c3f0:	e3a02fab 	mov	r2, #684	@ 0x2ac
    c3f4:	e92d4010 	push	{r4, lr}
    c3f8:	eb00174e 	bl	12138 <assertion_failed>

0000c3fc <memmove>:
    c3fc:	e1500001 	cmp	r0, r1
    c400:	9a000002 	bls	c410 <memmove+0x14>
    c404:	e0813002 	add	r3, r1, r2
    c408:	e1530000 	cmp	r3, r0
    c40c:	8a000000 	bhi	c414 <memmove+0x18>
    c410:	ea000237 	b	ccf4 <memcpy>
    c414:	e3520000 	cmp	r2, #0
    c418:	e080c002 	add	ip, r0, r2
    c41c:	012fff1e 	bxeq	lr
    c420:	e1a0200c 	mov	r2, ip
    c424:	e173c0d1 	ldrsb	ip, [r3, #-1]!
    c428:	e562c001 	strb	ip, [r2, #-1]!
    c42c:	e1510003 	cmp	r1, r3
    c430:	1afffffb 	bne	c424 <memmove+0x28>
    c434:	e12fff1e 	bx	lr

0000c438 <memcmp>:
    c438:	e242c001 	sub	ip, r2, #1
    c43c:	e3520000 	cmp	r2, #0
    c440:	0a00000c 	beq	c478 <memcmp+0x40>
    c444:	e2403001 	sub	r3, r0, #1
    c448:	e2411001 	sub	r1, r1, #1
    c44c:	e080000c 	add	r0, r0, ip
    c450:	ea000002 	b	c460 <memcmp+0x28>
    c454:	3a000009 	bcc	c480 <memcmp+0x48>
    c458:	e1530000 	cmp	r3, r0
    c45c:	0a000005 	beq	c478 <memcmp+0x40>
    c460:	e5f3c001 	ldrb	ip, [r3, #1]!
    c464:	e5f12001 	ldrb	r2, [r1, #1]!
    c468:	e15c0002 	cmp	ip, r2
    c46c:	9afffff8 	bls	c454 <memcmp+0x1c>
    c470:	e3a00001 	mov	r0, #1
    c474:	e12fff1e 	bx	lr
    c478:	e3a00000 	mov	r0, #0
    c47c:	e12fff1e 	bx	lr
    c480:	e3e00000 	mvn	r0, #0
    c484:	e12fff1e 	bx	lr

0000c488 <strlen>:
    c488:	e1a03000 	mov	r3, r0
    c48c:	e0d300d1 	ldrsb	r0, [r3], #1
    c490:	e3500000 	cmp	r0, #0
    c494:	012fff1e 	bxeq	lr
    c498:	e3a00000 	mov	r0, #0
    c49c:	e0d320d1 	ldrsb	r2, [r3], #1
    c4a0:	e2800001 	add	r0, r0, #1
    c4a4:	e3520000 	cmp	r2, #0
    c4a8:	1afffffb 	bne	c49c <strlen+0x14>
    c4ac:	e12fff1e 	bx	lr

0000c4b0 <strcmp>:
    c4b0:	e1d030d0 	ldrsb	r3, [r0]
    c4b4:	e3530000 	cmp	r3, #0
    c4b8:	01d120d0 	ldrsbeq	r2, [r1]
    c4bc:	1a000006 	bne	c4dc <strcmp+0x2c>
    c4c0:	ea000009 	b	c4ec <strcmp+0x3c>
    c4c4:	e1520003 	cmp	r2, r3
    c4c8:	ba00000c 	blt	c500 <strcmp+0x50>
    c4cc:	ca00000d 	bgt	c508 <strcmp+0x58>
    c4d0:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c4d4:	e3530000 	cmp	r3, #0
    c4d8:	0a00000c 	beq	c510 <strcmp+0x60>
    c4dc:	e1a0c001 	mov	ip, r1
    c4e0:	e0d120d1 	ldrsb	r2, [r1], #1
    c4e4:	e3520000 	cmp	r2, #0
    c4e8:	1afffff5 	bne	c4c4 <strcmp+0x14>
    c4ec:	e1530002 	cmp	r3, r2
    c4f0:	ca000002 	bgt	c500 <strcmp+0x50>
    c4f4:	a3a00000 	movge	r0, #0
    c4f8:	b3e00000 	mvnlt	r0, #0
    c4fc:	e12fff1e 	bx	lr
    c500:	e3a00001 	mov	r0, #1
    c504:	e12fff1e 	bx	lr
    c508:	e3e00000 	mvn	r0, #0
    c50c:	e12fff1e 	bx	lr
    c510:	e1dc20d1 	ldrsb	r2, [ip, #1]
    c514:	e1530002 	cmp	r3, r2
    c518:	dafffff5 	ble	c4f4 <strcmp+0x44>
    c51c:	eafffff7 	b	c500 <strcmp+0x50>

0000c520 <strcasecmp>:
    c520:	e2400001 	sub	r0, r0, #1
    c524:	ea000009 	b	c550 <strcasecmp+0x30>
    c528:	e0d130d1 	ldrsb	r3, [r1], #1
    c52c:	e243c061 	sub	ip, r3, #97	@ 0x61
    c530:	e35c0019 	cmp	ip, #25
    c534:	92433020 	subls	r3, r3, #32
    c538:	9a000001 	bls	c544 <strcasecmp+0x24>
    c53c:	e3530000 	cmp	r3, #0
    c540:	0a000012 	beq	c590 <strcasecmp+0x70>
    c544:	e1520003 	cmp	r2, r3
    c548:	ca000012 	bgt	c598 <strcasecmp+0x78>
    c54c:	ba000013 	blt	c5a0 <strcasecmp+0x80>
    c550:	e1f020d1 	ldrsb	r2, [r0, #1]!
    c554:	e2423061 	sub	r3, r2, #97	@ 0x61
    c558:	e3530019 	cmp	r3, #25
    c55c:	92422020 	subls	r2, r2, #32
    c560:	9afffff0 	bls	c528 <strcasecmp+0x8>
    c564:	e3520000 	cmp	r2, #0
    c568:	1affffee 	bne	c528 <strcasecmp+0x8>
    c56c:	e1d130d0 	ldrsb	r3, [r1]
    c570:	e2431061 	sub	r1, r3, #97	@ 0x61
    c574:	e3510019 	cmp	r1, #25
    c578:	8a000004 	bhi	c590 <strcasecmp+0x70>
    c57c:	e2433020 	sub	r3, r3, #32
    c580:	e1530002 	cmp	r3, r2
    c584:	d3a00000 	movle	r0, #0
    c588:	c3e00000 	mvngt	r0, #0
    c58c:	e12fff1e 	bx	lr
    c590:	e1530002 	cmp	r3, r2
    c594:	aafffff9 	bge	c580 <strcasecmp+0x60>
    c598:	e3a00001 	mov	r0, #1
    c59c:	e12fff1e 	bx	lr
    c5a0:	e3e00000 	mvn	r0, #0
    c5a4:	e12fff1e 	bx	lr

0000c5a8 <strncmp>:
    c5a8:	e3520000 	cmp	r2, #0
    c5ac:	0a00001b 	beq	c620 <strncmp+0x78>
    c5b0:	e92d4010 	push	{r4, lr}
    c5b4:	ea000007 	b	c5d8 <strncmp+0x30>
    c5b8:	e0d1c0d1 	ldrsb	ip, [r1], #1
    c5bc:	e35c0000 	cmp	ip, #0
    c5c0:	0a000009 	beq	c5ec <strncmp+0x44>
    c5c4:	e153000c 	cmp	r3, ip
    c5c8:	ca00000e 	bgt	c608 <strncmp+0x60>
    c5cc:	ba00000f 	blt	c610 <strncmp+0x68>
    c5d0:	e2522001 	subs	r2, r2, #1
    c5d4:	0a00000f 	beq	c618 <strncmp+0x70>
    c5d8:	e1a04000 	mov	r4, r0
    c5dc:	e0d030d1 	ldrsb	r3, [r0], #1
    c5e0:	e1a0e001 	mov	lr, r1
    c5e4:	e3530000 	cmp	r3, #0
    c5e8:	1afffff2 	bne	c5b8 <strncmp+0x10>
    c5ec:	e1d420d0 	ldrsb	r2, [r4]
    c5f0:	e1de30d0 	ldrsb	r3, [lr]
    c5f4:	e1520003 	cmp	r2, r3
    c5f8:	ca000002 	bgt	c608 <strncmp+0x60>
    c5fc:	a3a00000 	movge	r0, #0
    c600:	b3e00000 	mvnlt	r0, #0
    c604:	e8bd8010 	pop	{r4, pc}
    c608:	e3a00001 	mov	r0, #1
    c60c:	e8bd8010 	pop	{r4, pc}
    c610:	e3e00000 	mvn	r0, #0
    c614:	e8bd8010 	pop	{r4, pc}
    c618:	e1a00002 	mov	r0, r2
    c61c:	e8bd8010 	pop	{r4, pc}
    c620:	e1a00002 	mov	r0, r2
    c624:	e12fff1e 	bx	lr

0000c628 <strncasecmp>:
    c628:	e1a0c000 	mov	ip, r0
    c62c:	e2520000 	subs	r0, r2, #0
    c630:	012fff1e 	bxeq	lr
    c634:	e24cc001 	sub	ip, ip, #1
    c638:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    c63c:	e2432061 	sub	r2, r3, #97	@ 0x61
    c640:	e3520019 	cmp	r2, #25
    c644:	92433020 	subls	r3, r3, #32
    c648:	8a00000c 	bhi	c680 <strncasecmp+0x58>
    c64c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    c650:	e0d120d1 	ldrsb	r2, [r1], #1
    c654:	e242e061 	sub	lr, r2, #97	@ 0x61
    c658:	e35e0019 	cmp	lr, #25
    c65c:	92422020 	subls	r2, r2, #32
    c660:	9a000011 	bls	c6ac <strncasecmp+0x84>
    c664:	e3520000 	cmp	r2, #0
    c668:	1a00000f 	bne	c6ac <strncasecmp+0x84>
    c66c:	e1530002 	cmp	r3, r2
    c670:	ca00001e 	bgt	c6f0 <strncasecmp+0xc8>
    c674:	a3a00000 	movge	r0, #0
    c678:	b3e00000 	mvnlt	r0, #0
    c67c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    c680:	e3530000 	cmp	r3, #0
    c684:	1afffff0 	bne	c64c <strncasecmp+0x24>
    c688:	e1d120d0 	ldrsb	r2, [r1]
    c68c:	e2421061 	sub	r1, r2, #97	@ 0x61
    c690:	e3510019 	cmp	r1, #25
    c694:	92422020 	subls	r2, r2, #32
    c698:	e1530002 	cmp	r3, r2
    c69c:	ca000017 	bgt	c700 <strncasecmp+0xd8>
    c6a0:	a3a00000 	movge	r0, #0
    c6a4:	b3e00000 	mvnlt	r0, #0
    c6a8:	e12fff1e 	bx	lr
    c6ac:	e1520003 	cmp	r2, r3
    c6b0:	ba00000e 	blt	c6f0 <strncasecmp+0xc8>
    c6b4:	ca00000f 	bgt	c6f8 <strncasecmp+0xd0>
    c6b8:	e2500001 	subs	r0, r0, #1
    c6bc:	049df004 	popeq	{pc}		@ (ldreq pc, [sp], #4)
    c6c0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    c6c4:	e2432061 	sub	r2, r3, #97	@ 0x61
    c6c8:	e3520019 	cmp	r2, #25
    c6cc:	92433020 	subls	r3, r3, #32
    c6d0:	9affffde 	bls	c650 <strncasecmp+0x28>
    c6d4:	e3530000 	cmp	r3, #0
    c6d8:	1affffdc 	bne	c650 <strncasecmp+0x28>
    c6dc:	e1d120d0 	ldrsb	r2, [r1]
    c6e0:	e2421061 	sub	r1, r2, #97	@ 0x61
    c6e4:	e3510019 	cmp	r1, #25
    c6e8:	92422020 	subls	r2, r2, #32
    c6ec:	eaffffde 	b	c66c <strncasecmp+0x44>
    c6f0:	e3a00001 	mov	r0, #1
    c6f4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    c6f8:	e3e00000 	mvn	r0, #0
    c6fc:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    c700:	e3a00001 	mov	r0, #1
    c704:	e12fff1e 	bx	lr

0000c708 <strcpy>:
    c708:	e1d130d0 	ldrsb	r3, [r1]
    c70c:	e1a02000 	mov	r2, r0
    c710:	e3530000 	cmp	r3, #0
    c714:	0a000003 	beq	c728 <strcpy+0x20>
    c718:	e4c23001 	strb	r3, [r2], #1
    c71c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    c720:	e3530000 	cmp	r3, #0
    c724:	1afffffb 	bne	c718 <strcpy+0x10>
    c728:	e3a03000 	mov	r3, #0
    c72c:	e5c23000 	strb	r3, [r2]
    c730:	e12fff1e 	bx	lr

0000c734 <strncpy>:
    c734:	e3520000 	cmp	r2, #0
    c738:	012fff1e 	bxeq	lr
    c73c:	e2411001 	sub	r1, r1, #1
    c740:	e1a0c000 	mov	ip, r0
    c744:	ea000002 	b	c754 <strncpy+0x20>
    c748:	e2522001 	subs	r2, r2, #1
    c74c:	e4cc3001 	strb	r3, [ip], #1
    c750:	012fff1e 	bxeq	lr
    c754:	e1f130d1 	ldrsb	r3, [r1, #1]!
    c758:	e3530000 	cmp	r3, #0
    c75c:	1afffff9 	bne	c748 <strncpy+0x14>
    c760:	e5cc3000 	strb	r3, [ip]
    c764:	e12fff1e 	bx	lr

0000c768 <strcat>:
    c768:	e1d030d0 	ldrsb	r3, [r0]
    c76c:	e3530000 	cmp	r3, #0
    c770:	e1a03000 	mov	r3, r0
    c774:	0a000002 	beq	c784 <strcat+0x1c>
    c778:	e1f320d1 	ldrsb	r2, [r3, #1]!
    c77c:	e3520000 	cmp	r2, #0
    c780:	1afffffc 	bne	c778 <strcat+0x10>
    c784:	e1d120d0 	ldrsb	r2, [r1]
    c788:	e3520000 	cmp	r2, #0
    c78c:	0a000003 	beq	c7a0 <strcat+0x38>
    c790:	e4c32001 	strb	r2, [r3], #1
    c794:	e1f120d1 	ldrsb	r2, [r1, #1]!
    c798:	e3520000 	cmp	r2, #0
    c79c:	1afffffb 	bne	c790 <strcat+0x28>
    c7a0:	e3a02000 	mov	r2, #0
    c7a4:	e5c32000 	strb	r2, [r3]
    c7a8:	e12fff1e 	bx	lr

0000c7ac <strncat>:
    c7ac:	e1d030d0 	ldrsb	r3, [r0]
    c7b0:	e3530000 	cmp	r3, #0
    c7b4:	e1a03000 	mov	r3, r0
    c7b8:	0a000002 	beq	c7c8 <strncat+0x1c>
    c7bc:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
    c7c0:	e35c0000 	cmp	ip, #0
    c7c4:	1afffffc 	bne	c7bc <strncat+0x10>
    c7c8:	e1d1c0d0 	ldrsb	ip, [r1]
    c7cc:	e35c0000 	cmp	ip, #0
    c7d0:	0a000009 	beq	c7fc <strncat+0x50>
    c7d4:	e3520000 	cmp	r2, #0
    c7d8:	0a000007 	beq	c7fc <strncat+0x50>
    c7dc:	e0832002 	add	r2, r3, r2
    c7e0:	ea000001 	b	c7ec <strncat+0x40>
    c7e4:	e1530002 	cmp	r3, r2
    c7e8:	0a000003 	beq	c7fc <strncat+0x50>
    c7ec:	e4c3c001 	strb	ip, [r3], #1
    c7f0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    c7f4:	e35c0000 	cmp	ip, #0
    c7f8:	1afffff9 	bne	c7e4 <strncat+0x38>
    c7fc:	e3a02000 	mov	r2, #0
    c800:	e5c32000 	strb	r2, [r3]
    c804:	e12fff1e 	bx	lr

0000c808 <strchr>:
    c808:	e1d030d0 	ldrsb	r3, [r0]
    c80c:	e3530000 	cmp	r3, #0
    c810:	0a000004 	beq	c828 <strchr+0x20>
    c814:	e1530001 	cmp	r3, r1
    c818:	012fff1e 	bxeq	lr
    c81c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c820:	e3530000 	cmp	r3, #0
    c824:	1afffffa 	bne	c814 <strchr+0xc>
    c828:	e1a00003 	mov	r0, r3
    c82c:	e12fff1e 	bx	lr

0000c830 <strstr>:
    c830:	e92d4010 	push	{r4, lr}
    c834:	e1d140d0 	ldrsb	r4, [r1]
    c838:	e1d030d0 	ldrsb	r3, [r0]
    c83c:	e3530000 	cmp	r3, #0
    c840:	1a000002 	bne	c850 <strstr+0x20>
    c844:	e3540000 	cmp	r4, #0
    c848:	13a00000 	movne	r0, #0
    c84c:	e8bd8010 	pop	{r4, pc}
    c850:	e3540000 	cmp	r4, #0
    c854:	08bd8010 	popeq	{r4, pc}
    c858:	e2402001 	sub	r2, r0, #1
    c85c:	e1a0e001 	mov	lr, r1
    c860:	e1a03004 	mov	r3, r4
    c864:	ea000002 	b	c874 <strstr+0x44>
    c868:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    c86c:	e3530000 	cmp	r3, #0
    c870:	08bd8010 	popeq	{r4, pc}
    c874:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
    c878:	e15c0003 	cmp	ip, r3
    c87c:	0afffff9 	beq	c868 <strstr+0x38>
    c880:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c884:	e3530000 	cmp	r3, #0
    c888:	1afffff2 	bne	c858 <strstr+0x28>
    c88c:	e1a00003 	mov	r0, r3
    c890:	e8bd8010 	pop	{r4, pc}

0000c894 <strtok_r>:
    c894:	e92d4030 	push	{r4, r5, lr}
    c898:	e3500000 	cmp	r0, #0
    c89c:	e1a05001 	mov	r5, r1
    c8a0:	e1a04002 	mov	r4, r2
    c8a4:	0a00002d 	beq	c960 <strtok_r+0xcc>
    c8a8:	e1d0c0d0 	ldrsb	ip, [r0]
    c8ac:	e35c0000 	cmp	ip, #0
    c8b0:	0a000026 	beq	c950 <strtok_r+0xbc>
    c8b4:	e1d510d0 	ldrsb	r1, [r5]
    c8b8:	e2802001 	add	r2, r0, #1
    c8bc:	e3510000 	cmp	r1, #0
    c8c0:	0a00000a 	beq	c8f0 <strtok_r+0x5c>
    c8c4:	e1a0e005 	mov	lr, r5
    c8c8:	e1a03001 	mov	r3, r1
    c8cc:	ea000002 	b	c8dc <strtok_r+0x48>
    c8d0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    c8d4:	e3530000 	cmp	r3, #0
    c8d8:	0a000004 	beq	c8f0 <strtok_r+0x5c>
    c8dc:	e153000c 	cmp	r3, ip
    c8e0:	1afffffa 	bne	c8d0 <strtok_r+0x3c>
    c8e4:	e1a00002 	mov	r0, r2
    c8e8:	e0d2c0d1 	ldrsb	ip, [r2], #1
    c8ec:	eafffff4 	b	c8c4 <strtok_r+0x30>
    c8f0:	e35c0000 	cmp	ip, #0
    c8f4:	0a000015 	beq	c950 <strtok_r+0xbc>
    c8f8:	e1a02000 	mov	r2, r0
    c8fc:	e3510000 	cmp	r1, #0
    c900:	1a000006 	bne	c920 <strtok_r+0x8c>
    c904:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
    c908:	e35c0000 	cmp	ip, #0
    c90c:	1afffffc 	bne	c904 <strtok_r+0x70>
    c910:	ea00000c 	b	c948 <strtok_r+0xb4>
    c914:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
    c918:	e35c0000 	cmp	ip, #0
    c91c:	0a000009 	beq	c948 <strtok_r+0xb4>
    c920:	e1a0e005 	mov	lr, r5
    c924:	e1a03001 	mov	r3, r1
    c928:	ea000002 	b	c938 <strtok_r+0xa4>
    c92c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    c930:	e3530000 	cmp	r3, #0
    c934:	0afffff6 	beq	c914 <strtok_r+0x80>
    c938:	e153000c 	cmp	r3, ip
    c93c:	1afffffa 	bne	c92c <strtok_r+0x98>
    c940:	e3a03000 	mov	r3, #0
    c944:	e4c23001 	strb	r3, [r2], #1
    c948:	e5842000 	str	r2, [r4]
    c94c:	e8bd8030 	pop	{r4, r5, pc}
    c950:	e3a03000 	mov	r3, #0
    c954:	e5843000 	str	r3, [r4]
    c958:	e3a00000 	mov	r0, #0
    c95c:	e8bd8030 	pop	{r4, r5, pc}
    c960:	e5920000 	ldr	r0, [r2]
    c964:	e3500000 	cmp	r0, #0
    c968:	1affffce 	bne	c8a8 <strtok_r+0x14>
    c96c:	eafffff9 	b	c958 <strtok_r+0xc4>

0000c970 <strtoul>:
    c970:	e92d4070 	push	{r4, r5, r6, lr}
    c974:	e2515000 	subs	r5, r1, #0
    c978:	e2423002 	sub	r3, r2, #2
    c97c:	15850000 	strne	r0, [r5]
    c980:	e3520000 	cmp	r2, #0
    c984:	13530022 	cmpne	r3, #34	@ 0x22
    c988:	8a000049 	bhi	cab4 <strtoul+0x144>
    c98c:	e1d030d0 	ldrsb	r3, [r0]
    c990:	e1a0e000 	mov	lr, r0
    c994:	e2800001 	add	r0, r0, #1
    c998:	e243c009 	sub	ip, r3, #9
    c99c:	e3530020 	cmp	r3, #32
    c9a0:	0afffff9 	beq	c98c <strtoul+0x1c>
    c9a4:	e6efc07c 	uxtb	ip, ip
    c9a8:	e35c0004 	cmp	ip, #4
    c9ac:	9afffff6 	bls	c98c <strtoul+0x1c>
    c9b0:	e353002b 	cmp	r3, #43	@ 0x2b
    c9b4:	0a00002c 	beq	ca6c <strtoul+0xfc>
    c9b8:	e353002d 	cmp	r3, #45	@ 0x2d
    c9bc:	03a06001 	moveq	r6, #1
    c9c0:	13a06000 	movne	r6, #0
    c9c4:	01de30d1 	ldrsbeq	r3, [lr, #1]
    c9c8:	01a0e000 	moveq	lr, r0
    c9cc:	e3530030 	cmp	r3, #48	@ 0x30
    c9d0:	0a00002a 	beq	ca80 <strtoul+0x110>
    c9d4:	e3520000 	cmp	r2, #0
    c9d8:	03a0200a 	moveq	r2, #10
    c9dc:	e353002f 	cmp	r3, #47	@ 0x2f
    c9e0:	e1a0c003 	mov	ip, r3
    c9e4:	da000030 	ble	caac <strtoul+0x13c>
    c9e8:	e3a04001 	mov	r4, #1
    c9ec:	e3a01000 	mov	r1, #0
    c9f0:	ea00000d 	b	ca2c <strtoul+0xbc>
    c9f4:	e35c0040 	cmp	ip, #64	@ 0x40
    c9f8:	ca00000f 	bgt	ca3c <strtoul+0xcc>
    c9fc:	e24cc030 	sub	ip, ip, #48	@ 0x30
    ca00:	e15c0002 	cmp	ip, r2
    ca04:	aa000010 	bge	ca4c <strtoul+0xdc>
    ca08:	e020c291 	mla	r0, r1, r2, ip
    ca0c:	e3a04000 	mov	r4, #0
    ca10:	e1500001 	cmp	r0, r1
    ca14:	3a00002c 	bcc	cacc <strtoul+0x15c>
    ca18:	e1fec0d1 	ldrsb	ip, [lr, #1]!
    ca1c:	e1a01000 	mov	r1, r0
    ca20:	e1a0300c 	mov	r3, ip
    ca24:	e35c002f 	cmp	ip, #47	@ 0x2f
    ca28:	da00002b 	ble	cadc <strtoul+0x16c>
    ca2c:	e2433061 	sub	r3, r3, #97	@ 0x61
    ca30:	e3530019 	cmp	r3, #25
    ca34:	924cc020 	subls	ip, ip, #32
    ca38:	8affffed 	bhi	c9f4 <strtoul+0x84>
    ca3c:	e24cc007 	sub	ip, ip, #7
    ca40:	e24cc030 	sub	ip, ip, #48	@ 0x30
    ca44:	e15c0002 	cmp	ip, r2
    ca48:	baffffee 	blt	ca08 <strtoul+0x98>
    ca4c:	e2243001 	eor	r3, r4, #1
    ca50:	e1a00001 	mov	r0, r1
    ca54:	e0033006 	and	r3, r3, r6
    ca58:	e3550000 	cmp	r5, #0
    ca5c:	1585e000 	strne	lr, [r5]
    ca60:	e3530000 	cmp	r3, #0
    ca64:	12600000 	rsbne	r0, r0, #0
    ca68:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca6c:	e1de30d1 	ldrsb	r3, [lr, #1]
    ca70:	e3a06000 	mov	r6, #0
    ca74:	e1a0e000 	mov	lr, r0
    ca78:	e3530030 	cmp	r3, #48	@ 0x30
    ca7c:	1affffd4 	bne	c9d4 <strtoul+0x64>
    ca80:	e1de30d1 	ldrsb	r3, [lr, #1]
    ca84:	e28e0001 	add	r0, lr, #1
    ca88:	e3c31020 	bic	r1, r3, #32
    ca8c:	e3510058 	cmp	r1, #88	@ 0x58
    ca90:	1a000009 	bne	cabc <strtoul+0x14c>
    ca94:	e3d23010 	bics	r3, r2, #16
    ca98:	1a000005 	bne	cab4 <strtoul+0x144>
    ca9c:	e1de30d2 	ldrsb	r3, [lr, #2]
    caa0:	e3a02010 	mov	r2, #16
    caa4:	e28ee002 	add	lr, lr, #2
    caa8:	eaffffcb 	b	c9dc <strtoul+0x6c>
    caac:	e3550000 	cmp	r5, #0
    cab0:	1585e000 	strne	lr, [r5]
    cab4:	e3a00000 	mov	r0, #0
    cab8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cabc:	e3520000 	cmp	r2, #0
    cac0:	e1a0e000 	mov	lr, r0
    cac4:	03a02008 	moveq	r2, #8
    cac8:	eaffffc3 	b	c9dc <strtoul+0x6c>
    cacc:	e1550004 	cmp	r5, r4
    cad0:	e3e00000 	mvn	r0, #0
    cad4:	1585e000 	strne	lr, [r5]
    cad8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cadc:	e3a03001 	mov	r3, #1
    cae0:	eaffffdb 	b	ca54 <strtoul+0xe4>

0000cae4 <strtoull>:
    cae4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    cae8:	e2514000 	subs	r4, r1, #0
    caec:	e2423002 	sub	r3, r2, #2
    caf0:	15840000 	strne	r0, [r4]
    caf4:	e3520000 	cmp	r2, #0
    caf8:	13530022 	cmpne	r3, #34	@ 0x22
    cafc:	8a000048 	bhi	cc24 <strtoull+0x140>
    cb00:	e1d030d0 	ldrsb	r3, [r0]
    cb04:	e1a0e000 	mov	lr, r0
    cb08:	e2800001 	add	r0, r0, #1
    cb0c:	e243c009 	sub	ip, r3, #9
    cb10:	e3530020 	cmp	r3, #32
    cb14:	0afffff9 	beq	cb00 <strtoull+0x1c>
    cb18:	e6efc07c 	uxtb	ip, ip
    cb1c:	e35c0004 	cmp	ip, #4
    cb20:	9afffff6 	bls	cb00 <strtoull+0x1c>
    cb24:	e353002b 	cmp	r3, #43	@ 0x2b
    cb28:	0a00002b 	beq	cbdc <strtoull+0xf8>
    cb2c:	e353002d 	cmp	r3, #45	@ 0x2d
    cb30:	03a07001 	moveq	r7, #1
    cb34:	13a07000 	movne	r7, #0
    cb38:	01de30d1 	ldrsbeq	r3, [lr, #1]
    cb3c:	01a0e000 	moveq	lr, r0
    cb40:	e3530030 	cmp	r3, #48	@ 0x30
    cb44:	0a000029 	beq	cbf0 <strtoull+0x10c>
    cb48:	e3520000 	cmp	r2, #0
    cb4c:	03a0200a 	moveq	r2, #10
    cb50:	e353002f 	cmp	r3, #47	@ 0x2f
    cb54:	e1a0c003 	mov	ip, r3
    cb58:	da00002f 	ble	cc1c <strtoull+0x138>
    cb5c:	e3a05000 	mov	r5, #0
    cb60:	e3a09001 	mov	r9, #1
    cb64:	e1a06005 	mov	r6, r5
    cb68:	e1a08fc2 	asr	r8, r2, #31
    cb6c:	ea000014 	b	cbc4 <strtoull+0xe0>
    cb70:	e35c0040 	cmp	ip, #64	@ 0x40
    cb74:	ca000016 	bgt	cbd4 <strtoull+0xf0>
    cb78:	e0010692 	mul	r1, r2, r6
    cb7c:	e24cc030 	sub	ip, ip, #48	@ 0x30
    cb80:	e0830592 	umull	r0, r3, r2, r5
    cb84:	e15c0002 	cmp	ip, r2
    cb88:	e0211895 	mla	r1, r5, r8, r1
    cb8c:	aa000027 	bge	cc30 <strtoull+0x14c>
    cb90:	e09c0000 	adds	r0, ip, r0
    cb94:	e0811003 	add	r1, r1, r3
    cb98:	e0a11fcc 	adc	r1, r1, ip, asr #31
    cb9c:	e1500005 	cmp	r0, r5
    cba0:	e0d16006 	sbcs	r6, r1, r6
    cba4:	3a000030 	bcc	cc6c <strtoull+0x188>
    cba8:	e1fec0d1 	ldrsb	ip, [lr, #1]!
    cbac:	e3a09000 	mov	r9, #0
    cbb0:	e1a05000 	mov	r5, r0
    cbb4:	e1a06001 	mov	r6, r1
    cbb8:	e1a0300c 	mov	r3, ip
    cbbc:	e35c002f 	cmp	ip, #47	@ 0x2f
    cbc0:	da00002e 	ble	cc80 <strtoull+0x19c>
    cbc4:	e2433061 	sub	r3, r3, #97	@ 0x61
    cbc8:	e3530019 	cmp	r3, #25
    cbcc:	924cc020 	subls	ip, ip, #32
    cbd0:	8affffe6 	bhi	cb70 <strtoull+0x8c>
    cbd4:	e24cc007 	sub	ip, ip, #7
    cbd8:	eaffffe6 	b	cb78 <strtoull+0x94>
    cbdc:	e1de30d1 	ldrsb	r3, [lr, #1]
    cbe0:	e3a07000 	mov	r7, #0
    cbe4:	e1a0e000 	mov	lr, r0
    cbe8:	e3530030 	cmp	r3, #48	@ 0x30
    cbec:	1affffd5 	bne	cb48 <strtoull+0x64>
    cbf0:	e1de30d1 	ldrsb	r3, [lr, #1]
    cbf4:	e28e0001 	add	r0, lr, #1
    cbf8:	e3c31020 	bic	r1, r3, #32
    cbfc:	e3510058 	cmp	r1, #88	@ 0x58
    cc00:	1a000015 	bne	cc5c <strtoull+0x178>
    cc04:	e3d23010 	bics	r3, r2, #16
    cc08:	1a000005 	bne	cc24 <strtoull+0x140>
    cc0c:	e1de30d2 	ldrsb	r3, [lr, #2]
    cc10:	e3a02010 	mov	r2, #16
    cc14:	e28ee002 	add	lr, lr, #2
    cc18:	eaffffcc 	b	cb50 <strtoull+0x6c>
    cc1c:	e3540000 	cmp	r4, #0
    cc20:	1584e000 	strne	lr, [r4]
    cc24:	e3a00000 	mov	r0, #0
    cc28:	e1a01000 	mov	r1, r0
    cc2c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    cc30:	e2293001 	eor	r3, r9, #1
    cc34:	e1a00005 	mov	r0, r5
    cc38:	e1a01006 	mov	r1, r6
    cc3c:	e0033007 	and	r3, r3, r7
    cc40:	e3540000 	cmp	r4, #0
    cc44:	1584e000 	strne	lr, [r4]
    cc48:	e3530000 	cmp	r3, #0
    cc4c:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
    cc50:	e2700000 	rsbs	r0, r0, #0
    cc54:	e2e11000 	rsc	r1, r1, #0
    cc58:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    cc5c:	e3520000 	cmp	r2, #0
    cc60:	e1a0e000 	mov	lr, r0
    cc64:	03a02008 	moveq	r2, #8
    cc68:	eaffffb8 	b	cb50 <strtoull+0x6c>
    cc6c:	e3540000 	cmp	r4, #0
    cc70:	e3a01000 	mov	r1, #0
    cc74:	1584e000 	strne	lr, [r4]
    cc78:	e3e00000 	mvn	r0, #0
    cc7c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    cc80:	e3a03001 	mov	r3, #1
    cc84:	eaffffec 	b	cc3c <strtoull+0x158>

0000cc88 <atoi>:
    cc88:	e3a0200a 	mov	r2, #10
    cc8c:	e3a01000 	mov	r1, #0
    cc90:	eaffff36 	b	c970 <strtoul>

0000cc94 <char2int>:
    cc94:	e12fff1e 	bx	lr

0000cc98 <memset>:
    cc98:	e3100003 	tst	r0, #3
    cc9c:	1a00000d 	bne	ccd8 <memset+0x40>
    cca0:	e3520010 	cmp	r2, #16
    cca4:	3a00000b 	bcc	ccd8 <memset+0x40>
    cca8:	e1813401 	orr	r3, r1, r1, lsl #8
    ccac:	e183c803 	orr	ip, r3, r3, lsl #16
    ccb0:	e1a03000 	mov	r3, r0
    ccb4:	e583c000 	str	ip, [r3]
    ccb8:	e583c004 	str	ip, [r3, #4]
    ccbc:	e583c008 	str	ip, [r3, #8]
    ccc0:	e583c00c 	str	ip, [r3, #12]
    ccc4:	e2833010 	add	r3, r3, #16
    ccc8:	e2422010 	sub	r2, r2, #16
    cccc:	e352000f 	cmp	r2, #15
    ccd0:	8afffff7 	bhi	ccb4 <memset+0x1c>
    ccd4:	ea000000 	b	ccdc <memset+0x44>
    ccd8:	e1a03000 	mov	r3, r0
    ccdc:	e3520000 	cmp	r2, #0
    cce0:	012fff1e 	bxeq	lr
    cce4:	e4c31001 	strb	r1, [r3], #1
    cce8:	e2522001 	subs	r2, r2, #1
    ccec:	1afffffc 	bne	cce4 <memset+0x4c>
    ccf0:	e12fff1e 	bx	lr

0000ccf4 <memcpy>:
    ccf4:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
    ccf8:	e352007f 	cmp	r2, #127	@ 0x7f
    ccfc:	9a00000b 	bls	cd30 <memcpy+0x3c>
    cd00:	e3110003 	tst	r1, #3
    cd04:	1a000009 	bne	cd30 <memcpy+0x3c>
    cd08:	e3100003 	tst	r0, #3
    cd0c:	1a000007 	bne	cd30 <memcpy+0x3c>
    cd10:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    cd14:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd18:	e2422020 	sub	r2, r2, #32
    cd1c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd20:	f5d1f040 	pld	[r1, #64]	@ 0x40
    cd24:	e352001f 	cmp	r2, #31
    cd28:	8afffff9 	bhi	cd14 <memcpy+0x20>
    cd2c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    cd30:	e3520000 	cmp	r2, #0
    cd34:	0a000003 	beq	cd48 <memcpy+0x54>
    cd38:	e4d13001 	ldrb	r3, [r1], #1
    cd3c:	e2522001 	subs	r2, r2, #1
    cd40:	e4c03001 	strb	r3, [r0], #1
    cd44:	1afffffb 	bne	cd38 <memcpy+0x44>
    cd48:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
    cd4c:	e12fff1e 	bx	lr

0000cd50 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    cd50:	e12fff1e 	bx	lr

0000cd54 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    cd54:	e92d4010 	push	{r4, lr}
    cd58:	e3a01014 	mov	r1, #20
    cd5c:	e1a04000 	mov	r4, r0
    cd60:	eb000103 	bl	d174 <operator delete(void*, unsigned int)>
    cd64:	e1a00004 	mov	r0, r4
    cd68:	e8bd8010 	pop	{r4, pc}

0000cd6c <CVirtualGPIOPin::Write(unsigned int)>:
    cd6c:	e92d4070 	push	{r4, r5, r6, lr}
    cd70:	e1a05001 	mov	r5, r1
    cd74:	e5d03004 	ldrb	r3, [r0, #4]
    cd78:	e5901008 	ldr	r1, [r0, #8]
    cd7c:	e24dd028 	sub	sp, sp, #40	@ 0x28
    cd80:	e3530000 	cmp	r3, #0
    cd84:	0a000012 	beq	cdd4 <CVirtualGPIOPin::Write(unsigned int)+0x68>
    cd88:	e3510000 	cmp	r1, #0
    cd8c:	1a000032 	bne	ce5c <CVirtualGPIOPin::Write(unsigned int)+0xf0>
    cd90:	e28d000c 	add	r0, sp, #12
    cd94:	eb0017fd 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    cd98:	e3a03014 	mov	r3, #20
    cd9c:	e3a01008 	mov	r1, #8
    cda0:	e08d2003 	add	r2, sp, r3
    cda4:	e58d1000 	str	r1, [sp]
    cda8:	e28d000c 	add	r0, sp, #12
    cdac:	e3a01082 	mov	r1, #130	@ 0x82
    cdb0:	e58d1020 	str	r1, [sp, #32]
    cdb4:	e3081041 	movw	r1, #32833	@ 0x8041
    cdb8:	e3401003 	movt	r1, #3
    cdbc:	e58d5024 	str	r5, [sp, #36]	@ 0x24
    cdc0:	eb001844 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cdc4:	e28d000c 	add	r0, sp, #12
    cdc8:	eb0017f7 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
    cdcc:	e28dd028 	add	sp, sp, #40	@ 0x28
    cdd0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cdd4:	e1853001 	orr	r3, r5, r1
    cdd8:	e3530001 	cmp	r3, #1
    cddc:	8afffffa 	bhi	cdcc <CVirtualGPIOPin::Write(unsigned int)+0x60>
    cde0:	e3076ae0 	movw	r6, #31456	@ 0x7ae0
    cde4:	e3406001 	movt	r6, #1
    cde8:	e5963000 	ldr	r3, [r6]
    cdec:	e3530000 	cmp	r3, #0
    cdf0:	0afffff5 	beq	cdcc <CVirtualGPIOPin::Write(unsigned int)+0x60>
    cdf4:	e1a04000 	mov	r4, r0
    cdf8:	e5960004 	ldr	r0, [r6, #4]
    cdfc:	e3500000 	cmp	r0, #0
    ce00:	1a000020 	bne	ce88 <CVirtualGPIOPin::Write(unsigned int)+0x11c>
    ce04:	e1d421b0 	ldrh	r2, [r4, #16]
    ce08:	e1d431b2 	ldrh	r3, [r4, #18]
    ce0c:	e584500c 	str	r5, [r4, #12]
    ce10:	e0421003 	sub	r1, r2, r3
    ce14:	e6bf1071 	sxth	r1, r1
    ce18:	e3510000 	cmp	r1, #0
    ce1c:	da000013 	ble	ce70 <CVirtualGPIOPin::Write(unsigned int)+0x104>
    ce20:	e3550000 	cmp	r5, #0
    ce24:	1a000006 	bne	ce44 <CVirtualGPIOPin::Write(unsigned int)+0xd8>
    ce28:	e2833001 	add	r3, r3, #1
    ce2c:	e6ff3073 	uxth	r3, r3
    ce30:	e1c431b2 	strh	r3, [r4, #18]
    ce34:	e5940008 	ldr	r0, [r4, #8]
    ce38:	e1833802 	orr	r3, r3, r2, lsl #16
    ce3c:	e5961000 	ldr	r1, [r6]
    ce40:	e7813100 	str	r3, [r1, r0, lsl #2]
    ce44:	e5963004 	ldr	r3, [r6, #4]
    ce48:	e3530000 	cmp	r3, #0
    ce4c:	0affffde 	beq	cdcc <CVirtualGPIOPin::Write(unsigned int)+0x60>
    ce50:	e28dd028 	add	sp, sp, #40	@ 0x28
    ce54:	e8bd4070 	pop	{r4, r5, r6, lr}
    ce58:	ea000f83 	b	10c6c <LeaveCritical>
    ce5c:	e3061f60 	movw	r1, #28512	@ 0x6f60
    ce60:	e3401001 	movt	r1, #1
    ce64:	e3a0205b 	mov	r2, #91	@ 0x5b
    ce68:	e2810014 	add	r0, r1, #20
    ce6c:	eb0014b1 	bl	12138 <assertion_failed>
    ce70:	e3550000 	cmp	r5, #0
    ce74:	0afffff2 	beq	ce44 <CVirtualGPIOPin::Write(unsigned int)+0xd8>
    ce78:	e2822001 	add	r2, r2, #1
    ce7c:	e6ff2072 	uxth	r2, r2
    ce80:	e1c421b0 	strh	r2, [r4, #16]
    ce84:	eaffffea 	b	ce34 <CVirtualGPIOPin::Write(unsigned int)+0xc8>
    ce88:	eb000f4c 	bl	10bc0 <EnterCritical>
    ce8c:	eaffffdc 	b	ce04 <CVirtualGPIOPin::Write(unsigned int)+0x98>

0000ce90 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
    ce90:	e92d4070 	push	{r4, r5, r6, lr}
    ce94:	e1a04000 	mov	r4, r0
    ce98:	e59f313c 	ldr	r3, [pc, #316]	@ cfdc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
    ce9c:	e3a00000 	mov	r0, #0
    cea0:	e3510001 	cmp	r1, #1
    cea4:	91a0c002 	movls	ip, r2
    cea8:	8382c001 	orrhi	ip, r2, #1
    ceac:	e24dd020 	sub	sp, sp, #32
    ceb0:	e15c0000 	cmp	ip, r0
    ceb4:	e5840010 	str	r0, [r4, #16]
    ceb8:	e5843000 	str	r3, [r4]
    cebc:	e5c42004 	strb	r2, [r4, #4]
    cec0:	e5841008 	str	r1, [r4, #8]
    cec4:	0a000002 	beq	ced4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
    cec8:	e1a00004 	mov	r0, r4
    cecc:	e28dd020 	add	sp, sp, #32
    ced0:	e8bd8070 	pop	{r4, r5, r6, pc}
    ced4:	e3075ae0 	movw	r5, #31456	@ 0x7ae0
    ced8:	e3405001 	movt	r5, #1
    cedc:	e5950004 	ldr	r0, [r5, #4]
    cee0:	e3500000 	cmp	r0, #0
    cee4:	1a00000e 	bne	cf24 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
    cee8:	e5956000 	ldr	r6, [r5]
    ceec:	e3560000 	cmp	r6, #0
    cef0:	0a00000f 	beq	cf34 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa4>
    cef4:	e5943008 	ldr	r3, [r4, #8]
    cef8:	e3a02000 	mov	r2, #0
    cefc:	e7862103 	str	r2, [r6, r3, lsl #2]
    cf00:	e5953004 	ldr	r3, [r5, #4]
    cf04:	e3530000 	cmp	r3, #0
    cf08:	1a000024 	bne	cfa0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
    cf0c:	e1a00004 	mov	r0, r4
    cf10:	e3a01000 	mov	r1, #0
    cf14:	ebffff94 	bl	cd6c <CVirtualGPIOPin::Write(unsigned int)>
    cf18:	e1a00004 	mov	r0, r4
    cf1c:	e28dd020 	add	sp, sp, #32
    cf20:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf24:	eb000f25 	bl	10bc0 <EnterCritical>
    cf28:	e5956000 	ldr	r6, [r5]
    cf2c:	e3560000 	cmp	r6, #0
    cf30:	1affffef 	bne	cef4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
    cf34:	e3a00001 	mov	r0, #1
    cf38:	eb000ef1 	bl	10b04 <CMemorySystem::GetCoherentPage(unsigned int)>
    cf3c:	e1a01006 	mov	r1, r6
    cf40:	e5850000 	str	r0, [r5]
    cf44:	e28d0008 	add	r0, sp, #8
    cf48:	eb001790 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    cf4c:	e5953000 	ldr	r3, [r5]
    cf50:	e28d0008 	add	r0, sp, #8
    cf54:	e3081020 	movw	r1, #32800	@ 0x8020
    cf58:	e3401004 	movt	r1, #4
    cf5c:	e3833103 	orr	r3, r3, #-1073741824	@ 0xc0000000
    cf60:	e58d301c 	str	r3, [sp, #28]
    cf64:	e3a03004 	mov	r3, #4
    cf68:	e58d3000 	str	r3, [sp]
    cf6c:	e3a03010 	mov	r3, #16
    cf70:	e08d2003 	add	r2, sp, r3
    cf74:	eb0017d7 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cf78:	e3500000 	cmp	r0, #0
    cf7c:	0a000009 	beq	cfa8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
    cf80:	e28d0008 	add	r0, sp, #8
    cf84:	eb001788 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
    cf88:	e5956000 	ldr	r6, [r5]
    cf8c:	e3560000 	cmp	r6, #0
    cf90:	1affffd7 	bne	cef4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
    cf94:	e5953004 	ldr	r3, [r5, #4]
    cf98:	e3530000 	cmp	r3, #0
    cf9c:	0affffda 	beq	cf0c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
    cfa0:	eb000f31 	bl	10c6c <LeaveCritical>
    cfa4:	eaffffd8 	b	cf0c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
    cfa8:	e3a03010 	mov	r3, #16
    cfac:	e58d0000 	str	r0, [sp]
    cfb0:	e1a01003 	mov	r1, r3
    cfb4:	e28d2010 	add	r2, sp, #16
    cfb8:	e3401004 	movt	r1, #4
    cfbc:	e28d0008 	add	r0, sp, #8
    cfc0:	eb0017c4 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cfc4:	e3500000 	cmp	r0, #0
    cfc8:	05850000 	streq	r0, [r5]
    cfcc:	159d301c 	ldrne	r3, [sp, #28]
    cfd0:	13c33103 	bicne	r3, r3, #-1073741824	@ 0xc0000000
    cfd4:	15853000 	strne	r3, [r5]
    cfd8:	eaffffe8 	b	cf80 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
    cfdc:	00016f88 	.word	0x00016f88

0000cfe0 <CVirtualGPIOPin::Invert()>:
    cfe0:	e590100c 	ldr	r1, [r0, #12]
    cfe4:	e2211001 	eor	r1, r1, #1
    cfe8:	eaffff5f 	b	cd6c <CVirtualGPIOPin::Write(unsigned int)>

0000cfec <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    cfec:	e3073ae0 	movw	r3, #31456	@ 0x7ae0
    cff0:	e3403001 	movt	r3, #1
    cff4:	e3a02000 	mov	r2, #0
    cff8:	e5832004 	str	r2, [r3, #4]
    cffc:	e12fff1e 	bx	lr

0000d000 <ChainBootStub(void const*, unsigned int)>:
    d000:	e2811003 	add	r1, r1, #3
    d004:	e1b01121 	lsrs	r1, r1, #2
    d008:	0a000007 	beq	d02c <ChainBootStub(void const*, unsigned int)+0x2c>
    d00c:	e1a03000 	mov	r3, r0
    d010:	e0800101 	add	r0, r0, r1, lsl #2
    d014:	e263c902 	rsb	ip, r3, #32768	@ 0x8000
    d018:	e083200c 	add	r2, r3, ip
    d01c:	e4931004 	ldr	r1, [r3], #4
    d020:	e1530000 	cmp	r3, r0
    d024:	e5821000 	str	r1, [r2]
    d028:	1afffffa 	bne	d018 <ChainBootStub(void const*, unsigned int)+0x18>
    d02c:	e3a03000 	mov	r3, #0
    d030:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    d034:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    d038:	f57ff04f 	dsb	sy
    d03c:	f57ff06f 	isb	sy
    d040:	e3a03902 	mov	r3, #32768	@ 0x8000
    d044:	e12fff13 	bx	r3

0000d048 <EnableChainBoot>:
    d048:	e3073ae8 	movw	r3, #31464	@ 0x7ae8
    d04c:	e3403001 	movt	r3, #1
    d050:	e1a0c001 	mov	ip, r1
    d054:	e92d4010 	push	{r4, lr}
    d058:	e3a02b01 	mov	r2, #1024	@ 0x400
    d05c:	e8831001 	stm	r3, {r0, ip}
    d060:	e30d1000 	movw	r1, #53248	@ 0xd000
    d064:	e3401000 	movt	r1, #0
    d068:	e3a00b1f 	mov	r0, #31744	@ 0x7c00
    d06c:	ebffff20 	bl	ccf4 <memcpy>
    d070:	e3a03000 	mov	r3, #0
    d074:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    d078:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    d07c:	f57ff04f 	dsb	sy
    d080:	f57ff06f 	isb	sy
    d084:	e8bd8010 	pop	{r4, pc}

0000d088 <IsChainBootEnabled>:
    d088:	e3073ae8 	movw	r3, #31464	@ 0x7ae8
    d08c:	e3403001 	movt	r3, #1
    d090:	e5930000 	ldr	r0, [r3]
    d094:	e2500000 	subs	r0, r0, #0
    d098:	13a00001 	movne	r0, #1
    d09c:	e12fff1e 	bx	lr

0000d0a0 <DoChainBoot>:
    d0a0:	e3073ae8 	movw	r3, #31464	@ 0x7ae8
    d0a4:	e3403001 	movt	r3, #1
    d0a8:	e3a02b1f 	mov	r2, #31744	@ 0x7c00
    d0ac:	e8930003 	ldm	r3, {r0, r1}
    d0b0:	e12fff12 	bx	r2

0000d0b4 <operator new(unsigned int, int)>:
    d0b4:	e3d13002 	bics	r3, r1, #2
    d0b8:	0a000001 	beq	d0c4 <operator new(unsigned int, int)+0x10>
    d0bc:	e3a00000 	mov	r0, #0
    d0c0:	e12fff1e 	bx	lr
    d0c4:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d0c8:	e3403001 	movt	r3, #1
    d0cc:	e1a01000 	mov	r1, r0
    d0d0:	e5930000 	ldr	r0, [r3]
    d0d4:	e280000c 	add	r0, r0, #12
    d0d8:	ea00004f 	b	d21c <CHeapAllocator::Allocate(unsigned int)>

0000d0dc <operator new[](unsigned int, int)>:
    d0dc:	e3d13002 	bics	r3, r1, #2
    d0e0:	0a000001 	beq	d0ec <operator new[](unsigned int, int)+0x10>
    d0e4:	e3a00000 	mov	r0, #0
    d0e8:	e12fff1e 	bx	lr
    d0ec:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d0f0:	e3403001 	movt	r3, #1
    d0f4:	e1a01000 	mov	r1, r0
    d0f8:	e5930000 	ldr	r0, [r3]
    d0fc:	e280000c 	add	r0, r0, #12
    d100:	ea000045 	b	d21c <CHeapAllocator::Allocate(unsigned int)>

0000d104 <operator new(unsigned int, void*)>:
    d104:	e1a00001 	mov	r0, r1
    d108:	e12fff1e 	bx	lr

0000d10c <operator new[](unsigned int, void*)>:
    d10c:	e1a00001 	mov	r0, r1
    d110:	e12fff1e 	bx	lr

0000d114 <operator new(unsigned int)>:
    d114:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d118:	e3403001 	movt	r3, #1
    d11c:	e1a01000 	mov	r1, r0
    d120:	e5930000 	ldr	r0, [r3]
    d124:	e280000c 	add	r0, r0, #12
    d128:	ea00003b 	b	d21c <CHeapAllocator::Allocate(unsigned int)>

0000d12c <operator new[](unsigned int)>:
    d12c:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d130:	e3403001 	movt	r3, #1
    d134:	e1a01000 	mov	r1, r0
    d138:	e5930000 	ldr	r0, [r3]
    d13c:	e280000c 	add	r0, r0, #12
    d140:	ea000035 	b	d21c <CHeapAllocator::Allocate(unsigned int)>

0000d144 <operator delete(void*)>:
    d144:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d148:	e3403001 	movt	r3, #1
    d14c:	e1a01000 	mov	r1, r0
    d150:	e5930000 	ldr	r0, [r3]
    d154:	e280000c 	add	r0, r0, #12
    d158:	ea0000a9 	b	d404 <CHeapAllocator::Free(void*)>

0000d15c <operator delete[](void*)>:
    d15c:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d160:	e3403001 	movt	r3, #1
    d164:	e1a01000 	mov	r1, r0
    d168:	e5930000 	ldr	r0, [r3]
    d16c:	e280000c 	add	r0, r0, #12
    d170:	ea0000a3 	b	d404 <CHeapAllocator::Free(void*)>

0000d174 <operator delete(void*, unsigned int)>:
    d174:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d178:	e3403001 	movt	r3, #1
    d17c:	e1a01000 	mov	r1, r0
    d180:	e5930000 	ldr	r0, [r3]
    d184:	e280000c 	add	r0, r0, #12
    d188:	ea00009d 	b	d404 <CHeapAllocator::Free(void*)>

0000d18c <operator delete[](void*, unsigned int)>:
    d18c:	e3073af0 	movw	r3, #31472	@ 0x7af0
    d190:	e3403001 	movt	r3, #1
    d194:	e1a01000 	mov	r1, r0
    d198:	e5930000 	ldr	r0, [r3]
    d19c:	e280000c 	add	r0, r0, #12
    d1a0:	ea000097 	b	d404 <CHeapAllocator::Free(void*)>

0000d1a4 <CHeapAllocator::CHeapAllocator(char const*)>:
    d1a4:	e92d4010 	push	{r4, lr}
    d1a8:	e1a04000 	mov	r4, r0
    d1ac:	e3a03000 	mov	r3, #0
    d1b0:	e3a00001 	mov	r0, #1
    d1b4:	e3a020a8 	mov	r2, #168	@ 0xa8
    d1b8:	e884000a 	stm	r4, {r1, r3}
    d1bc:	e1a01003 	mov	r1, r3
    d1c0:	e5843008 	str	r3, [r4, #8]
    d1c4:	e584300c 	str	r3, [r4, #12]
    d1c8:	e58400b8 	str	r0, [r4, #184]	@ 0xb8
    d1cc:	e2840010 	add	r0, r4, #16
    d1d0:	ebfffeb0 	bl	cc98 <memset>
    d1d4:	e59f3020 	ldr	r3, [pc, #32]	@ d1fc <CHeapAllocator::CHeapAllocator(char const*)+0x58>
    d1d8:	e1a02004 	mov	r2, r4
    d1dc:	e283001c 	add	r0, r3, #28
    d1e0:	e2822008 	add	r2, r2, #8
    d1e4:	e5b31004 	ldr	r1, [r3, #4]!
    d1e8:	e1530000 	cmp	r3, r0
    d1ec:	e5821008 	str	r1, [r2, #8]
    d1f0:	1afffffa 	bne	d1e0 <CHeapAllocator::CHeapAllocator(char const*)+0x3c>
    d1f4:	e1a00004 	mov	r0, r4
    d1f8:	e8bd8010 	pop	{r4, pc}
    d1fc:	00017a5c 	.word	0x00017a5c

0000d200 <CHeapAllocator::~CHeapAllocator()>:
    d200:	e12fff1e 	bx	lr

0000d204 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
    d204:	e0812002 	add	r2, r1, r2
    d208:	e980000e 	stmib	r0, {r1, r2, r3}
    d20c:	e12fff1e 	bx	lr

0000d210 <CHeapAllocator::GetFreeSpace() const>:
    d210:	e9900005 	ldmib	r0, {r0, r2}
    d214:	e0420000 	sub	r0, r2, r0
    d218:	e12fff1e 	bx	lr

0000d21c <CHeapAllocator::Allocate(unsigned int)>:
    d21c:	e5903004 	ldr	r3, [r0, #4]
    d220:	e3530000 	cmp	r3, #0
    d224:	0a000074 	beq	d3fc <CHeapAllocator::Allocate(unsigned int)+0x1e0>
    d228:	e92d4070 	push	{r4, r5, r6, lr}
    d22c:	e1a06000 	mov	r6, r0
    d230:	e59000b8 	ldr	r0, [r0, #184]	@ 0xb8
    d234:	e1a04001 	mov	r4, r1
    d238:	e3500000 	cmp	r0, #0
    d23c:	1a000060 	bne	d3c4 <CHeapAllocator::Allocate(unsigned int)+0x1a8>
    d240:	e5963010 	ldr	r3, [r6, #16]
    d244:	e2862010 	add	r2, r6, #16
    d248:	e3530000 	cmp	r3, #0
    d24c:	1a000003 	bne	d260 <CHeapAllocator::Allocate(unsigned int)+0x44>
    d250:	ea00002c 	b	d308 <CHeapAllocator::Allocate(unsigned int)+0xec>
    d254:	e5b23008 	ldr	r3, [r2, #8]!
    d258:	e3530000 	cmp	r3, #0
    d25c:	0a000029 	beq	d308 <CHeapAllocator::Allocate(unsigned int)+0xec>
    d260:	e1530004 	cmp	r3, r4
    d264:	3afffffa 	bcc	d254 <CHeapAllocator::Allocate(unsigned int)+0x38>
    d268:	e5925004 	ldr	r5, [r2, #4]
    d26c:	e3550000 	cmp	r5, #0
    d270:	01a04003 	moveq	r4, r3
    d274:	0a000023 	beq	d308 <CHeapAllocator::Allocate(unsigned int)+0xec>
    d278:	e5d51001 	ldrb	r1, [r5, #1]
    d27c:	e5d53000 	ldrb	r3, [r5]
    d280:	e1833401 	orr	r3, r3, r1, lsl #8
    d284:	e5d51002 	ldrb	r1, [r5, #2]
    d288:	e1833801 	orr	r3, r3, r1, lsl #16
    d28c:	e5d51003 	ldrb	r1, [r5, #3]
    d290:	e1833c01 	orr	r3, r3, r1, lsl #24
    d294:	e3041d43 	movw	r1, #19779	@ 0x4d43
    d298:	e344124c 	movt	r1, #16972	@ 0x424c
    d29c:	e1530001 	cmp	r3, r1
    d2a0:	1a00004f 	bne	d3e4 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
    d2a4:	e5d51009 	ldrb	r1, [r5, #9]
    d2a8:	e5d53008 	ldrb	r3, [r5, #8]
    d2ac:	e1833401 	orr	r3, r3, r1, lsl #8
    d2b0:	e5d5100a 	ldrb	r1, [r5, #10]
    d2b4:	e1833801 	orr	r3, r3, r1, lsl #16
    d2b8:	e5d5100b 	ldrb	r1, [r5, #11]
    d2bc:	e1833c01 	orr	r3, r3, r1, lsl #24
    d2c0:	e5823004 	str	r3, [r2, #4]
    d2c4:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
    d2c8:	e3530000 	cmp	r3, #0
    d2cc:	1a00002b 	bne	d380 <CHeapAllocator::Allocate(unsigned int)+0x164>
    d2d0:	e315003f 	tst	r5, #63	@ 0x3f
    d2d4:	e3a03000 	mov	r3, #0
    d2d8:	e2850040 	add	r0, r5, #64	@ 0x40
    d2dc:	e5c53008 	strb	r3, [r5, #8]
    d2e0:	e5c53009 	strb	r3, [r5, #9]
    d2e4:	e5c5300a 	strb	r3, [r5, #10]
    d2e8:	e5c5300b 	strb	r3, [r5, #11]
    d2ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    d2f0:	e30613b4 	movw	r1, #25524	@ 0x63b4
    d2f4:	e3401001 	movt	r1, #1
    d2f8:	e3060404 	movw	r0, #25604	@ 0x6404
    d2fc:	e3400001 	movt	r0, #1
    d300:	e3a0208e 	mov	r2, #142	@ 0x8e
    d304:	eb00138b 	bl	12138 <assertion_failed>
    d308:	e5965004 	ldr	r5, [r6, #4]
    d30c:	e284307f 	add	r3, r4, #127	@ 0x7f
    d310:	e3c3303f 	bic	r3, r3, #63	@ 0x3f
    d314:	e596100c 	ldr	r1, [r6, #12]
    d318:	e0853003 	add	r3, r5, r3
    d31c:	e1550003 	cmp	r5, r3
    d320:	2a000018 	bcs	d388 <CHeapAllocator::Allocate(unsigned int)+0x16c>
    d324:	e5962008 	ldr	r2, [r6, #8]
    d328:	e0422001 	sub	r2, r2, r1
    d32c:	e1530002 	cmp	r3, r2
    d330:	8a000014 	bhi	d388 <CHeapAllocator::Allocate(unsigned int)+0x16c>
    d334:	e5863004 	str	r3, [r6, #4]
    d338:	e3a02043 	mov	r2, #67	@ 0x43
    d33c:	e3a0304d 	mov	r3, #77	@ 0x4d
    d340:	e5c52000 	strb	r2, [r5]
    d344:	e5c53001 	strb	r3, [r5, #1]
    d348:	e3a0204c 	mov	r2, #76	@ 0x4c
    d34c:	e3a03042 	mov	r3, #66	@ 0x42
    d350:	e5c52002 	strb	r2, [r5, #2]
    d354:	e5c53003 	strb	r3, [r5, #3]
    d358:	e7e72454 	ubfx	r2, r4, #8, #8
    d35c:	e7e73854 	ubfx	r3, r4, #16, #8
    d360:	e5c54004 	strb	r4, [r5, #4]
    d364:	e5c52005 	strb	r2, [r5, #5]
    d368:	e1a04c24 	lsr	r4, r4, #24
    d36c:	e5c53006 	strb	r3, [r5, #6]
    d370:	e5c54007 	strb	r4, [r5, #7]
    d374:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
    d378:	e3530000 	cmp	r3, #0
    d37c:	0affffd3 	beq	d2d0 <CHeapAllocator::Allocate(unsigned int)+0xb4>
    d380:	eb000e39 	bl	10c6c <LeaveCritical>
    d384:	eaffffd1 	b	d2d0 <CHeapAllocator::Allocate(unsigned int)+0xb4>
    d388:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
    d38c:	e3510000 	cmp	r1, #0
    d390:	0a00000d 	beq	d3cc <CHeapAllocator::Allocate(unsigned int)+0x1b0>
    d394:	e3a02000 	mov	r2, #0
    d398:	e586200c 	str	r2, [r6, #12]
    d39c:	e1530002 	cmp	r3, r2
    d3a0:	1a00000d 	bne	d3dc <CHeapAllocator::Allocate(unsigned int)+0x1c0>
    d3a4:	eb001bfc 	bl	1439c <CLogger::Get()>
    d3a8:	e30633f4 	movw	r3, #25588	@ 0x63f4
    d3ac:	e3403001 	movt	r3, #1
    d3b0:	e5961000 	ldr	r1, [r6]
    d3b4:	e3a02000 	mov	r2, #0
    d3b8:	eb001dc0 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d3bc:	e3a00000 	mov	r0, #0
    d3c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d3c4:	eb000dfd 	bl	10bc0 <EnterCritical>
    d3c8:	eaffff9c 	b	d240 <CHeapAllocator::Allocate(unsigned int)+0x24>
    d3cc:	e3530000 	cmp	r3, #0
    d3d0:	0afffff9 	beq	d3bc <CHeapAllocator::Allocate(unsigned int)+0x1a0>
    d3d4:	eb000e24 	bl	10c6c <LeaveCritical>
    d3d8:	eafffff7 	b	d3bc <CHeapAllocator::Allocate(unsigned int)+0x1a0>
    d3dc:	eb000e22 	bl	10c6c <LeaveCritical>
    d3e0:	eaffffef 	b	d3a4 <CHeapAllocator::Allocate(unsigned int)+0x188>
    d3e4:	e30613b4 	movw	r1, #25524	@ 0x63b4
    d3e8:	e3401001 	movt	r1, #1
    d3ec:	e30603c8 	movw	r0, #25544	@ 0x63c8
    d3f0:	e3400001 	movt	r0, #1
    d3f4:	e3a0205e 	mov	r2, #94	@ 0x5e
    d3f8:	eb00134e 	bl	12138 <assertion_failed>
    d3fc:	e3a00000 	mov	r0, #0
    d400:	e12fff1e 	bx	lr

0000d404 <CHeapAllocator::Free(void*)>:
    d404:	e3510000 	cmp	r1, #0
    d408:	012fff1e 	bxeq	lr
    d40c:	e92d4070 	push	{r4, r5, r6, lr}
    d410:	e1a05000 	mov	r5, r0
    d414:	e2416040 	sub	r6, r1, #64	@ 0x40
    d418:	e5513040 	ldrb	r3, [r1, #-64]	@ 0xffffffc0
    d41c:	e551003f 	ldrb	r0, [r1, #-63]	@ 0xffffffc1
    d420:	e551203e 	ldrb	r2, [r1, #-62]	@ 0xffffffc2
    d424:	e551103d 	ldrb	r1, [r1, #-61]	@ 0xffffffc3
    d428:	e1833400 	orr	r3, r3, r0, lsl #8
    d42c:	e1833802 	orr	r3, r3, r2, lsl #16
    d430:	e3042d43 	movw	r2, #19779	@ 0x4d43
    d434:	e344224c 	movt	r2, #16972	@ 0x424c
    d438:	e1833c01 	orr	r3, r3, r1, lsl #24
    d43c:	e1530002 	cmp	r3, r2
    d440:	1a00002c 	bne	d4f8 <CHeapAllocator::Free(void*)+0xf4>
    d444:	e5953010 	ldr	r3, [r5, #16]
    d448:	e3530000 	cmp	r3, #0
    d44c:	08bd8070 	popeq	{r4, r5, r6, pc}
    d450:	e5d61005 	ldrb	r1, [r6, #5]
    d454:	e2854010 	add	r4, r5, #16
    d458:	e5d62004 	ldrb	r2, [r6, #4]
    d45c:	e1822401 	orr	r2, r2, r1, lsl #8
    d460:	e5d61006 	ldrb	r1, [r6, #6]
    d464:	e1822801 	orr	r2, r2, r1, lsl #16
    d468:	e5d61007 	ldrb	r1, [r6, #7]
    d46c:	e1822c01 	orr	r2, r2, r1, lsl #24
    d470:	ea000002 	b	d480 <CHeapAllocator::Free(void*)+0x7c>
    d474:	e5b43008 	ldr	r3, [r4, #8]!
    d478:	e3530000 	cmp	r3, #0
    d47c:	08bd8070 	popeq	{r4, r5, r6, pc}
    d480:	e1530002 	cmp	r3, r2
    d484:	1afffffa 	bne	d474 <CHeapAllocator::Free(void*)+0x70>
    d488:	e59500b8 	ldr	r0, [r5, #184]	@ 0xb8
    d48c:	e3500000 	cmp	r0, #0
    d490:	1a000009 	bne	d4bc <CHeapAllocator::Free(void*)+0xb8>
    d494:	e5943004 	ldr	r3, [r4, #4]
    d498:	e5c63008 	strb	r3, [r6, #8]
    d49c:	e7e71453 	ubfx	r1, r3, #8, #8
    d4a0:	e7e72853 	ubfx	r2, r3, #16, #8
    d4a4:	e5c61009 	strb	r1, [r6, #9]
    d4a8:	e1a03c23 	lsr	r3, r3, #24
    d4ac:	e5c6200a 	strb	r2, [r6, #10]
    d4b0:	e5c6300b 	strb	r3, [r6, #11]
    d4b4:	e5846004 	str	r6, [r4, #4]
    d4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d4bc:	eb000dbf 	bl	10bc0 <EnterCritical>
    d4c0:	e59510b8 	ldr	r1, [r5, #184]	@ 0xb8
    d4c4:	e5943004 	ldr	r3, [r4, #4]
    d4c8:	e3510000 	cmp	r1, #0
    d4cc:	e5c63008 	strb	r3, [r6, #8]
    d4d0:	e7e72453 	ubfx	r2, r3, #8, #8
    d4d4:	e5c62009 	strb	r2, [r6, #9]
    d4d8:	e7e72853 	ubfx	r2, r3, #16, #8
    d4dc:	e1a03c23 	lsr	r3, r3, #24
    d4e0:	e5c6200a 	strb	r2, [r6, #10]
    d4e4:	e5c6300b 	strb	r3, [r6, #11]
    d4e8:	e5846004 	str	r6, [r4, #4]
    d4ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    d4f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d4f4:	ea000ddc 	b	10c6c <LeaveCritical>
    d4f8:	e30613b4 	movw	r1, #25524	@ 0x63b4
    d4fc:	e3401001 	movt	r1, #1
    d500:	e30603c8 	movw	r0, #25544	@ 0x63c8
    d504:	e3400001 	movt	r0, #1
    d508:	e3a020bf 	mov	r2, #191	@ 0xbf
    d50c:	eb001309 	bl	12138 <assertion_failed>

0000d510 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
    d510:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d514:	e1a05002 	mov	r5, r2
    d518:	e2514000 	subs	r4, r1, #0
    d51c:	0a00002c 	beq	d5d4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc4>
    d520:	e3520000 	cmp	r2, #0
    d524:	0a000027 	beq	d5c8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xb8>
    d528:	e554203f 	ldrb	r2, [r4, #-63]	@ 0xffffffc1
    d52c:	e2447040 	sub	r7, r4, #64	@ 0x40
    d530:	e5543040 	ldrb	r3, [r4, #-64]	@ 0xffffffc0
    d534:	e1833402 	orr	r3, r3, r2, lsl #8
    d538:	e554203e 	ldrb	r2, [r4, #-62]	@ 0xffffffc2
    d53c:	e1833802 	orr	r3, r3, r2, lsl #16
    d540:	e554203d 	ldrb	r2, [r4, #-61]	@ 0xffffffc3
    d544:	e1833c02 	orr	r3, r3, r2, lsl #24
    d548:	e3042d43 	movw	r2, #19779	@ 0x4d43
    d54c:	e344224c 	movt	r2, #16972	@ 0x424c
    d550:	e1530002 	cmp	r3, r2
    d554:	1a000021 	bne	d5e0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd0>
    d558:	e5d72005 	ldrb	r2, [r7, #5]
    d55c:	e5d73004 	ldrb	r3, [r7, #4]
    d560:	e1833402 	orr	r3, r3, r2, lsl #8
    d564:	e5d72006 	ldrb	r2, [r7, #6]
    d568:	e1833802 	orr	r3, r3, r2, lsl #16
    d56c:	e5d72007 	ldrb	r2, [r7, #7]
    d570:	e1833c02 	orr	r3, r3, r2, lsl #24
    d574:	e1530005 	cmp	r3, r5
    d578:	21a05004 	movcs	r5, r4
    d57c:	3a000001 	bcc	d588 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
    d580:	e1a00005 	mov	r0, r5
    d584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d588:	e1a01005 	mov	r1, r5
    d58c:	e1a06000 	mov	r6, r0
    d590:	ebffff21 	bl	d21c <CHeapAllocator::Allocate(unsigned int)>
    d594:	e2505000 	subs	r5, r0, #0
    d598:	0afffff8 	beq	d580 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x70>
    d59c:	e5d72005 	ldrb	r2, [r7, #5]
    d5a0:	e1a01004 	mov	r1, r4
    d5a4:	e5d73004 	ldrb	r3, [r7, #4]
    d5a8:	e1833402 	orr	r3, r3, r2, lsl #8
    d5ac:	e5d72006 	ldrb	r2, [r7, #6]
    d5b0:	e1833802 	orr	r3, r3, r2, lsl #16
    d5b4:	e5d72007 	ldrb	r2, [r7, #7]
    d5b8:	e1832c02 	orr	r2, r3, r2, lsl #24
    d5bc:	ebfffdcc 	bl	ccf4 <memcpy>
    d5c0:	e1a01004 	mov	r1, r4
    d5c4:	e1a00006 	mov	r0, r6
    d5c8:	ebffff8d 	bl	d404 <CHeapAllocator::Free(void*)>
    d5cc:	e1a00005 	mov	r0, r5
    d5d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d5d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d5d8:	e1a01002 	mov	r1, r2
    d5dc:	eaffff0e 	b	d21c <CHeapAllocator::Allocate(unsigned int)>
    d5e0:	e30613b4 	movw	r1, #25524	@ 0x63b4
    d5e4:	e3401001 	movt	r1, #1
    d5e8:	e30603c8 	movw	r0, #25544	@ 0x63c8
    d5ec:	e3400001 	movt	r0, #1
    d5f0:	e3a020a3 	mov	r2, #163	@ 0xa3
    d5f4:	eb0012cf 	bl	12138 <assertion_failed>

0000d5f8 <C2DImage::C2DImage(C2DGraphics*)>:
    d5f8:	e5911010 	ldr	r1, [r1, #16]
    d5fc:	e3a02000 	mov	r2, #0
    d600:	e8800006 	stm	r0, {r1, r2}
    d604:	e5802008 	str	r2, [r0, #8]
    d608:	e580200c 	str	r2, [r0, #12]
    d60c:	e5802010 	str	r2, [r0, #16]
    d610:	e12fff1e 	bx	lr

0000d614 <C2DImage::~C2DImage()>:
    d614:	e92d4010 	push	{r4, lr}
    d618:	e1a04000 	mov	r4, r0
    d61c:	e5900010 	ldr	r0, [r0, #16]
    d620:	e3500000 	cmp	r0, #0
    d624:	0a000000 	beq	d62c <C2DImage::~C2DImage()+0x18>
    d628:	ebfffecb 	bl	d15c <operator delete[](void*)>
    d62c:	e1a00004 	mov	r0, r4
    d630:	e8bd8010 	pop	{r4, pc}

0000d634 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)>:
    d634:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d638:	e1a05000 	mov	r5, r0
    d63c:	e5900000 	ldr	r0, [r0]
    d640:	e3500000 	cmp	r0, #0
    d644:	0a000090 	beq	d88c <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x258>
    d648:	e1a07003 	mov	r7, r3
    d64c:	e5903000 	ldr	r3, [r0]
    d650:	e1a06001 	mov	r6, r1
    d654:	e5851004 	str	r1, [r5, #4]
    d658:	e5852008 	str	r2, [r5, #8]
    d65c:	e1a04002 	mov	r4, r2
    d660:	e5933010 	ldr	r3, [r3, #16]
    d664:	e12fff33 	blx	r3
    d668:	e0000096 	mul	r0, r6, r0
    d66c:	e2800007 	add	r0, r0, #7
    d670:	e1a001a0 	lsr	r0, r0, #3
    d674:	e0000094 	mul	r0, r4, r0
    d678:	e585000c 	str	r0, [r5, #12]
    d67c:	e3500000 	cmp	r0, #0
    d680:	0a000086 	beq	d8a0 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x26c>
    d684:	e5953010 	ldr	r3, [r5, #16]
    d688:	e3530000 	cmp	r3, #0
    d68c:	0a000002 	beq	d69c <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x68>
    d690:	e1a00003 	mov	r0, r3
    d694:	ebfffeb0 	bl	d15c <operator delete[](void*)>
    d698:	e595000c 	ldr	r0, [r5, #12]
    d69c:	ebfffea2 	bl	d12c <operator new[](unsigned int)>
    d6a0:	e3570000 	cmp	r7, #0
    d6a4:	e5850010 	str	r0, [r5, #16]
    d6a8:	0a000081 	beq	d8b4 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x280>
    d6ac:	e5950000 	ldr	r0, [r5]
    d6b0:	e5903000 	ldr	r3, [r0]
    d6b4:	e5933010 	ldr	r3, [r3, #16]
    d6b8:	e12fff33 	blx	r3
    d6bc:	e2403001 	sub	r3, r0, #1
    d6c0:	e353001f 	cmp	r3, #31
    d6c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d6c8:	ea00001f 	b	d74c <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x118>
    d6cc:	0000d788 	.word	0x0000d788
    d6d0:	0000d74c 	.word	0x0000d74c
    d6d4:	0000d74c 	.word	0x0000d74c
    d6d8:	0000d74c 	.word	0x0000d74c
    d6dc:	0000d74c 	.word	0x0000d74c
    d6e0:	0000d74c 	.word	0x0000d74c
    d6e4:	0000d74c 	.word	0x0000d74c
    d6e8:	0000d81c 	.word	0x0000d81c
    d6ec:	0000d74c 	.word	0x0000d74c
    d6f0:	0000d74c 	.word	0x0000d74c
    d6f4:	0000d74c 	.word	0x0000d74c
    d6f8:	0000d74c 	.word	0x0000d74c
    d6fc:	0000d74c 	.word	0x0000d74c
    d700:	0000d74c 	.word	0x0000d74c
    d704:	0000d74c 	.word	0x0000d74c
    d708:	0000d854 	.word	0x0000d854
    d70c:	0000d74c 	.word	0x0000d74c
    d710:	0000d74c 	.word	0x0000d74c
    d714:	0000d74c 	.word	0x0000d74c
    d718:	0000d74c 	.word	0x0000d74c
    d71c:	0000d74c 	.word	0x0000d74c
    d720:	0000d74c 	.word	0x0000d74c
    d724:	0000d74c 	.word	0x0000d74c
    d728:	0000d74c 	.word	0x0000d74c
    d72c:	0000d74c 	.word	0x0000d74c
    d730:	0000d74c 	.word	0x0000d74c
    d734:	0000d74c 	.word	0x0000d74c
    d738:	0000d74c 	.word	0x0000d74c
    d73c:	0000d74c 	.word	0x0000d74c
    d740:	0000d74c 	.word	0x0000d74c
    d744:	0000d74c 	.word	0x0000d74c
    d748:	0000d750 	.word	0x0000d750
    d74c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d750:	e595300c 	ldr	r3, [r5, #12]
    d754:	e5956010 	ldr	r6, [r5, #16]
    d758:	e3530000 	cmp	r3, #0
    d75c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d760:	e3a04000 	mov	r4, #0
    d764:	e4971004 	ldr	r1, [r7], #4
    d768:	e2844004 	add	r4, r4, #4
    d76c:	e5950000 	ldr	r0, [r5]
    d770:	eb00129c 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    d774:	e4860004 	str	r0, [r6], #4
    d778:	e595300c 	ldr	r3, [r5, #12]
    d77c:	e1530004 	cmp	r3, r4
    d780:	8afffff7 	bhi	d764 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x130>
    d784:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d788:	e5951008 	ldr	r1, [r5, #8]
    d78c:	e595a010 	ldr	sl, [r5, #16]
    d790:	e3510000 	cmp	r1, #0
    d794:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d798:	e5952004 	ldr	r2, [r5, #4]
    d79c:	e3a0b000 	mov	fp, #0
    d7a0:	e3a09080 	mov	r9, #128	@ 0x80
    d7a4:	e2523000 	subs	r3, r2, #0
    d7a8:	13a08000 	movne	r8, #0
    d7ac:	0a000016 	beq	d80c <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x1d8>
    d7b0:	e3a04000 	mov	r4, #0
    d7b4:	e1a06004 	mov	r6, r4
    d7b8:	ea000000 	b	d7c0 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x18c>
    d7bc:	e5953004 	ldr	r3, [r5, #4]
    d7c0:	e0882004 	add	r2, r8, r4
    d7c4:	e1520003 	cmp	r2, r3
    d7c8:	2a000008 	bcs	d7f0 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x1bc>
    d7cc:	e4971004 	ldr	r1, [r7], #4
    d7d0:	e5950000 	ldr	r0, [r5]
    d7d4:	eb001283 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    d7d8:	e3500000 	cmp	r0, #0
    d7dc:	11866459 	orrne	r6, r6, r9, asr r4
    d7e0:	e2844001 	add	r4, r4, #1
    d7e4:	16ef6076 	uxtbne	r6, r6
    d7e8:	e3540008 	cmp	r4, #8
    d7ec:	1afffff2 	bne	d7bc <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x188>
    d7f0:	e4ca6001 	strb	r6, [sl], #1
    d7f4:	e2888008 	add	r8, r8, #8
    d7f8:	e5952004 	ldr	r2, [r5, #4]
    d7fc:	e1a03002 	mov	r3, r2
    d800:	e1520008 	cmp	r2, r8
    d804:	8affffe9 	bhi	d7b0 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x17c>
    d808:	e5951008 	ldr	r1, [r5, #8]
    d80c:	e28bb001 	add	fp, fp, #1
    d810:	e151000b 	cmp	r1, fp
    d814:	8affffe2 	bhi	d7a4 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x170>
    d818:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d81c:	e595300c 	ldr	r3, [r5, #12]
    d820:	e5956010 	ldr	r6, [r5, #16]
    d824:	e3530000 	cmp	r3, #0
    d828:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d82c:	e3a04000 	mov	r4, #0
    d830:	e4971004 	ldr	r1, [r7], #4
    d834:	e2844001 	add	r4, r4, #1
    d838:	e5950000 	ldr	r0, [r5]
    d83c:	eb001269 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    d840:	e4c60001 	strb	r0, [r6], #1
    d844:	e595300c 	ldr	r3, [r5, #12]
    d848:	e1530004 	cmp	r3, r4
    d84c:	8afffff7 	bhi	d830 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x1fc>
    d850:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d854:	e595300c 	ldr	r3, [r5, #12]
    d858:	e5956010 	ldr	r6, [r5, #16]
    d85c:	e3530000 	cmp	r3, #0
    d860:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d864:	e3a04000 	mov	r4, #0
    d868:	e4971004 	ldr	r1, [r7], #4
    d86c:	e2844002 	add	r4, r4, #2
    d870:	e5950000 	ldr	r0, [r5]
    d874:	eb00125b 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    d878:	e595300c 	ldr	r3, [r5, #12]
    d87c:	e0c600b2 	strh	r0, [r6], #2
    d880:	e1530004 	cmp	r3, r4
    d884:	8afffff7 	bhi	d868 <C2DImage::Set(unsigned int, unsigned int, CDisplay::TColor const*)+0x234>
    d888:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d88c:	e3061f90 	movw	r1, #28560	@ 0x6f90
    d890:	e3401001 	movt	r1, #1
    d894:	e3a02031 	mov	r2, #49	@ 0x31
    d898:	e2810010 	add	r0, r1, #16
    d89c:	eb001225 	bl	12138 <assertion_failed>
    d8a0:	e3061f90 	movw	r1, #28560	@ 0x6f90
    d8a4:	e3401001 	movt	r1, #1
    d8a8:	e3a02036 	mov	r2, #54	@ 0x36
    d8ac:	e281001c 	add	r0, r1, #28
    d8b0:	eb001220 	bl	12138 <assertion_failed>
    d8b4:	e3061f90 	movw	r1, #28560	@ 0x6f90
    d8b8:	e3401001 	movt	r1, #1
    d8bc:	e3a0203c 	mov	r2, #60	@ 0x3c
    d8c0:	e2810028 	add	r0, r1, #40	@ 0x28
    d8c4:	eb00121b 	bl	12138 <assertion_failed>

0000d8c8 <C2DImage::GetWidth() const>:
    d8c8:	e5900004 	ldr	r0, [r0, #4]
    d8cc:	e12fff1e 	bx	lr

0000d8d0 <C2DImage::GetHeight() const>:
    d8d0:	e5900008 	ldr	r0, [r0, #8]
    d8d4:	e12fff1e 	bx	lr

0000d8d8 <C2DImage::GetPixels() const>:
    d8d8:	e5900010 	ldr	r0, [r0, #16]
    d8dc:	e3500000 	cmp	r0, #0
    d8e0:	112fff1e 	bxne	lr
    d8e4:	e3061f90 	movw	r1, #28560	@ 0x6f90
    d8e8:	e3401001 	movt	r1, #1
    d8ec:	e3a0207d 	mov	r2, #125	@ 0x7d
    d8f0:	e2810030 	add	r0, r1, #48	@ 0x30
    d8f4:	e92d4010 	push	{r4, lr}
    d8f8:	eb00120e 	bl	12138 <assertion_failed>

0000d8fc <C2DGraphics::C2DGraphics(CDisplay*)>:
    d8fc:	e3a02000 	mov	r2, #0
    d900:	e5801010 	str	r1, [r0, #16]
    d904:	e5802000 	str	r2, [r0]
    d908:	e5802004 	str	r2, [r0, #4]
    d90c:	e5802008 	str	r2, [r0, #8]
    d910:	e5802014 	str	r2, [r0, #20]
    d914:	e5c02018 	strb	r2, [r0, #24]
    d918:	e580201c 	str	r2, [r0, #28]
    d91c:	e5c02020 	strb	r2, [r0, #32]
    d920:	e12fff1e 	bx	lr

0000d924 <C2DGraphics::C2DGraphics(unsigned int, unsigned int, bool, unsigned int)>:
    d924:	e5c03020 	strb	r3, [r0, #32]
    d928:	e3a03001 	mov	r3, #1
    d92c:	e5c03018 	strb	r3, [r0, #24]
    d930:	e5c03021 	strb	r3, [r0, #33]	@ 0x21
    d934:	e59d3000 	ldr	r3, [sp]
    d938:	e5801000 	str	r1, [r0]
    d93c:	e3a01000 	mov	r1, #0
    d940:	e5802004 	str	r2, [r0, #4]
    d944:	e5801008 	str	r1, [r0, #8]
    d948:	e5801010 	str	r1, [r0, #16]
    d94c:	e5801014 	str	r1, [r0, #20]
    d950:	e580101c 	str	r1, [r0, #28]
    d954:	e580300c 	str	r3, [r0, #12]
    d958:	e12fff1e 	bx	lr

0000d95c <C2DGraphics::~C2DGraphics()>:
    d95c:	e92d4010 	push	{r4, lr}
    d960:	e1a04000 	mov	r4, r0
    d964:	e590001c 	ldr	r0, [r0, #28]
    d968:	e3500000 	cmp	r0, #0
    d96c:	0a000000 	beq	d974 <C2DGraphics::~C2DGraphics()+0x18>
    d970:	ebfffdf9 	bl	d15c <operator delete[](void*)>
    d974:	e5940014 	ldr	r0, [r4, #20]
    d978:	e3500000 	cmp	r0, #0
    d97c:	0a000002 	beq	d98c <C2DGraphics::~C2DGraphics()+0x30>
    d980:	e5903000 	ldr	r3, [r0]
    d984:	e5933004 	ldr	r3, [r3, #4]
    d988:	e12fff33 	blx	r3
    d98c:	e1a00004 	mov	r0, r4
    d990:	e8bd8010 	pop	{r4, pc}

0000d994 <C2DGraphics::Initialize()>:
    d994:	e92d4030 	push	{r4, r5, lr}
    d998:	e1a04000 	mov	r4, r0
    d99c:	e5d03018 	ldrb	r3, [r0, #24]
    d9a0:	e24dd014 	sub	sp, sp, #20
    d9a4:	e3530000 	cmp	r3, #0
    d9a8:	1a000021 	bne	da34 <C2DGraphics::Initialize()+0xa0>
    d9ac:	e5940010 	ldr	r0, [r4, #16]
    d9b0:	e5903000 	ldr	r3, [r0]
    d9b4:	e5933008 	ldr	r3, [r3, #8]
    d9b8:	e12fff33 	blx	r3
    d9bc:	e5943010 	ldr	r3, [r4, #16]
    d9c0:	e5840000 	str	r0, [r4]
    d9c4:	e1a00003 	mov	r0, r3
    d9c8:	e5933000 	ldr	r3, [r3]
    d9cc:	e593300c 	ldr	r3, [r3, #12]
    d9d0:	e12fff33 	blx	r3
    d9d4:	e5943010 	ldr	r3, [r4, #16]
    d9d8:	e5840004 	str	r0, [r4, #4]
    d9dc:	e1a00003 	mov	r0, r3
    d9e0:	e5933000 	ldr	r3, [r3]
    d9e4:	e5933010 	ldr	r3, [r3, #16]
    d9e8:	e12fff33 	blx	r3
    d9ec:	e3500001 	cmp	r0, #1
    d9f0:	e5840008 	str	r0, [r4, #8]
    d9f4:	1a00000c 	bne	da2c <C2DGraphics::Initialize()+0x98>
    d9f8:	e5943000 	ldr	r3, [r4]
    d9fc:	e3130007 	tst	r3, #7
    da00:	1a00001e 	bne	da80 <C2DGraphics::Initialize()+0xec>
    da04:	e5942004 	ldr	r2, [r4, #4]
    da08:	e0000092 	mul	r0, r2, r0
    da0c:	e0000093 	mul	r0, r3, r0
    da10:	e1a001a0 	lsr	r0, r0, #3
    da14:	ebfffdc4 	bl	d12c <operator new[](unsigned int)>
    da18:	e1a03000 	mov	r3, r0
    da1c:	e3a00001 	mov	r0, #1
    da20:	e584301c 	str	r3, [r4, #28]
    da24:	e28dd014 	add	sp, sp, #20
    da28:	e8bd8030 	pop	{r4, r5, pc}
    da2c:	e5943000 	ldr	r3, [r4]
    da30:	eafffff3 	b	da04 <C2DGraphics::Initialize()+0x70>
    da34:	e3a000f4 	mov	r0, #244	@ 0xf4
    da38:	ebfffdb5 	bl	d114 <operator new(unsigned int)>
    da3c:	e1a05000 	mov	r5, r0
    da40:	e8940006 	ldm	r4, {r1, r2}
    da44:	e58d1000 	str	r1, [sp]
    da48:	e594300c 	ldr	r3, [r4, #12]
    da4c:	e58d3008 	str	r3, [sp, #8]
    da50:	e3a03001 	mov	r3, #1
    da54:	e58d300c 	str	r3, [sp, #12]
    da58:	e1a03312 	lsl	r3, r2, r3
    da5c:	e58d3004 	str	r3, [sp, #4]
    da60:	e3a03010 	mov	r3, #16
    da64:	eb00135e 	bl	127e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    da68:	e1a00005 	mov	r0, r5
    da6c:	e5845014 	str	r5, [r4, #20]
    da70:	e5845010 	str	r5, [r4, #16]
    da74:	eb001431 	bl	12b40 <CBcmFrameBuffer::Initialize()>
    da78:	e3500000 	cmp	r0, #0
    da7c:	1affffca 	bne	d9ac <C2DGraphics::Initialize()+0x18>
    da80:	e3a00000 	mov	r0, #0
    da84:	e28dd014 	add	sp, sp, #20
    da88:	e8bd8030 	pop	{r4, r5, pc}

0000da8c <C2DGraphics::Resize(unsigned int, unsigned int)>:
    da8c:	e5d03018 	ldrb	r3, [r0, #24]
    da90:	e92d4070 	push	{r4, r5, r6, lr}
    da94:	e3530000 	cmp	r3, #0
    da98:	0a000017 	beq	dafc <C2DGraphics::Resize(unsigned int, unsigned int)+0x70>
    da9c:	e1a04000 	mov	r4, r0
    daa0:	e5900014 	ldr	r0, [r0, #20]
    daa4:	e1a06001 	mov	r6, r1
    daa8:	e1a05002 	mov	r5, r2
    daac:	e3500000 	cmp	r0, #0
    dab0:	0a000002 	beq	dac0 <C2DGraphics::Resize(unsigned int, unsigned int)+0x34>
    dab4:	e5903000 	ldr	r3, [r0]
    dab8:	e5933004 	ldr	r3, [r3, #4]
    dabc:	e12fff33 	blx	r3
    dac0:	e594001c 	ldr	r0, [r4, #28]
    dac4:	e3a03000 	mov	r3, #0
    dac8:	e5846000 	str	r6, [r4]
    dacc:	e1500003 	cmp	r0, r3
    dad0:	e5843014 	str	r3, [r4, #20]
    dad4:	e5845004 	str	r5, [r4, #4]
    dad8:	0a000000 	beq	dae0 <C2DGraphics::Resize(unsigned int, unsigned int)+0x54>
    dadc:	ebfffd9e 	bl	d15c <operator delete[](void*)>
    dae0:	e3a02000 	mov	r2, #0
    dae4:	e3a03001 	mov	r3, #1
    dae8:	e1a00004 	mov	r0, r4
    daec:	e584201c 	str	r2, [r4, #28]
    daf0:	e5c43021 	strb	r3, [r4, #33]	@ 0x21
    daf4:	e8bd4070 	pop	{r4, r5, r6, lr}
    daf8:	eaffffa5 	b	d994 <C2DGraphics::Initialize()>
    dafc:	e3061f90 	movw	r1, #28560	@ 0x6f90
    db00:	e3401001 	movt	r1, #1
    db04:	e3a020e4 	mov	r2, #228	@ 0xe4
    db08:	e2810038 	add	r0, r1, #56	@ 0x38
    db0c:	eb001189 	bl	12138 <assertion_failed>

0000db10 <C2DGraphics::GetWidth() const>:
    db10:	e5900000 	ldr	r0, [r0]
    db14:	e12fff1e 	bx	lr

0000db18 <C2DGraphics::GetHeight() const>:
    db18:	e5900004 	ldr	r0, [r0, #4]
    db1c:	e12fff1e 	bx	lr

0000db20 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>:
    db20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    db24:	e0816003 	add	r6, r1, r3
    db28:	e5903000 	ldr	r3, [r0]
    db2c:	e1560003 	cmp	r6, r3
    db30:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
    db34:	e59d3020 	ldr	r3, [sp, #32]
    db38:	e1a04000 	mov	r4, r0
    db3c:	e1a05002 	mov	r5, r2
    db40:	e0828003 	add	r8, r2, r3
    db44:	e5903004 	ldr	r3, [r0, #4]
    db48:	e1580003 	cmp	r8, r3
    db4c:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
    db50:	e5900010 	ldr	r0, [r0, #16]
    db54:	e1a07001 	mov	r7, r1
    db58:	e59d1024 	ldr	r1, [sp, #36]	@ 0x24
    db5c:	eb0011a1 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    db60:	e1580005 	cmp	r8, r5
    db64:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    db68:	e3a02080 	mov	r2, #128	@ 0x80
    db6c:	e1560007 	cmp	r6, r7
    db70:	81a0e007 	movhi	lr, r7
    db74:	9a00002c 	bls	dc2c <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x10c>
    db78:	e594c008 	ldr	ip, [r4, #8]
    db7c:	e24cc001 	sub	ip, ip, #1
    db80:	e35c001f 	cmp	ip, #31
    db84:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    db88:	ea000024 	b	dc20 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x100>
    db8c:	0000dc7c 	.word	0x0000dc7c
    db90:	0000dc20 	.word	0x0000dc20
    db94:	0000dc20 	.word	0x0000dc20
    db98:	0000dc20 	.word	0x0000dc20
    db9c:	0000dc20 	.word	0x0000dc20
    dba0:	0000dc20 	.word	0x0000dc20
    dba4:	0000dc20 	.word	0x0000dc20
    dba8:	0000dc5c 	.word	0x0000dc5c
    dbac:	0000dc20 	.word	0x0000dc20
    dbb0:	0000dc20 	.word	0x0000dc20
    dbb4:	0000dc20 	.word	0x0000dc20
    dbb8:	0000dc20 	.word	0x0000dc20
    dbbc:	0000dc20 	.word	0x0000dc20
    dbc0:	0000dc20 	.word	0x0000dc20
    dbc4:	0000dc20 	.word	0x0000dc20
    dbc8:	0000dc0c 	.word	0x0000dc0c
    dbcc:	0000dc20 	.word	0x0000dc20
    dbd0:	0000dc20 	.word	0x0000dc20
    dbd4:	0000dc20 	.word	0x0000dc20
    dbd8:	0000dc20 	.word	0x0000dc20
    dbdc:	0000dc20 	.word	0x0000dc20
    dbe0:	0000dc20 	.word	0x0000dc20
    dbe4:	0000dc20 	.word	0x0000dc20
    dbe8:	0000dc20 	.word	0x0000dc20
    dbec:	0000dc20 	.word	0x0000dc20
    dbf0:	0000dc20 	.word	0x0000dc20
    dbf4:	0000dc20 	.word	0x0000dc20
    dbf8:	0000dc20 	.word	0x0000dc20
    dbfc:	0000dc20 	.word	0x0000dc20
    dc00:	0000dc20 	.word	0x0000dc20
    dc04:	0000dc20 	.word	0x0000dc20
    dc08:	0000dc3c 	.word	0x0000dc3c
    dc0c:	e5943000 	ldr	r3, [r4]
    dc10:	e594101c 	ldr	r1, [r4, #28]
    dc14:	e023e593 	mla	r3, r3, r5, lr
    dc18:	e1a03083 	lsl	r3, r3, #1
    dc1c:	e18100b3 	strh	r0, [r1, r3]
    dc20:	e28ee001 	add	lr, lr, #1
    dc24:	e156000e 	cmp	r6, lr
    dc28:	1affffd2 	bne	db78 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x58>
    dc2c:	e2855001 	add	r5, r5, #1
    dc30:	e1580005 	cmp	r8, r5
    dc34:	1affffcc 	bne	db6c <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    dc38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dc3c:	e5943000 	ldr	r3, [r4]
    dc40:	e594101c 	ldr	r1, [r4, #28]
    dc44:	e023e593 	mla	r3, r3, r5, lr
    dc48:	e28ee001 	add	lr, lr, #1
    dc4c:	e156000e 	cmp	r6, lr
    dc50:	e7810103 	str	r0, [r1, r3, lsl #2]
    dc54:	1affffc7 	bne	db78 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x58>
    dc58:	eafffff3 	b	dc2c <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x10c>
    dc5c:	e5941000 	ldr	r1, [r4]
    dc60:	e594301c 	ldr	r3, [r4, #28]
    dc64:	e0233591 	mla	r3, r1, r5, r3
    dc68:	e7c3000e 	strb	r0, [r3, lr]
    dc6c:	e28ee001 	add	lr, lr, #1
    dc70:	e156000e 	cmp	r6, lr
    dc74:	1affffbf 	bne	db78 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x58>
    dc78:	eaffffeb 	b	dc2c <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x10c>
    dc7c:	e5943000 	ldr	r3, [r4]
    dc80:	e20e9007 	and	r9, lr, #7
    dc84:	e594c01c 	ldr	ip, [r4, #28]
    dc88:	e3500000 	cmp	r0, #0
    dc8c:	e1a09952 	asr	r9, r2, r9
    dc90:	e023e593 	mla	r3, r3, r5, lr
    dc94:	e28ee001 	add	lr, lr, #1
    dc98:	e7dc11a3 	ldrb	r1, [ip, r3, lsr #3]
    dc9c:	11811009 	orrne	r1, r1, r9
    dca0:	01c11009 	biceq	r1, r1, r9
    dca4:	e156000e 	cmp	r6, lr
    dca8:	e7cc11a3 	strb	r1, [ip, r3, lsr #3]
    dcac:	1affffb1 	bne	db78 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x58>
    dcb0:	eaffffdd 	b	dc2c <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x10c>

0000dcb4 <C2DGraphics::ClearScreen(CDisplay::TColor)>:
    dcb4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    dcb8:	e3a02000 	mov	r2, #0
    dcbc:	e1a0c001 	mov	ip, r1
    dcc0:	e24dd00c 	sub	sp, sp, #12
    dcc4:	e1a01002 	mov	r1, r2
    dcc8:	e58dc004 	str	ip, [sp, #4]
    dccc:	e8901008 	ldm	r0, {r3, ip}
    dcd0:	e58dc000 	str	ip, [sp]
    dcd4:	ebffff91 	bl	db20 <C2DGraphics::DrawRect(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>
    dcd8:	e28dd00c 	add	sp, sp, #12
    dcdc:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0000dce0 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>:
    dce0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dce4:	e1a05001 	mov	r5, r1
    dce8:	e5901000 	ldr	r1, [r0]
    dcec:	e24dd00c 	sub	sp, sp, #12
    dcf0:	e1510005 	cmp	r1, r5
    dcf4:	9a00000c 	bls	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    dcf8:	e1a07003 	mov	r7, r3
    dcfc:	e5903004 	ldr	r3, [r0, #4]
    dd00:	e1a06002 	mov	r6, r2
    dd04:	e1a04000 	mov	r4, r0
    dd08:	e1530002 	cmp	r3, r2
    dd0c:	81510007 	cmphi	r1, r7
    dd10:	e59d2030 	ldr	r2, [sp, #48]	@ 0x30
    dd14:	93a01001 	movls	r1, #1
    dd18:	83a01000 	movhi	r1, #0
    dd1c:	e1530002 	cmp	r3, r2
    dd20:	93811001 	orrls	r1, r1, #1
    dd24:	e3510000 	cmp	r1, #0
    dd28:	0a000001 	beq	dd34 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x54>
    dd2c:	e28dd00c 	add	sp, sp, #12
    dd30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd34:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
    dd38:	e5900010 	ldr	r0, [r0, #16]
    dd3c:	eb001129 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    dd40:	e0473005 	sub	r3, r7, r5
    dd44:	e59d2030 	ldr	r2, [sp, #48]	@ 0x30
    dd48:	e3530000 	cmp	r3, #0
    dd4c:	e5947008 	ldr	r7, [r4, #8]
    dd50:	c3a0e001 	movgt	lr, #1
    dd54:	e042c006 	sub	ip, r2, r6
    dd58:	d3e0e000 	mvnle	lr, #0
    dd5c:	e35c0000 	cmp	ip, #0
    dd60:	e0231fc3 	eor	r1, r3, r3, asr #31
    dd64:	e02c2fcc 	eor	r2, ip, ip, asr #31
    dd68:	e2477001 	sub	r7, r7, #1
    dd6c:	e0411fc3 	sub	r1, r1, r3, asr #31
    dd70:	e0422fcc 	sub	r2, r2, ip, asr #31
    dd74:	c3a0b001 	movgt	fp, #1
    dd78:	d3e0b000 	mvnle	fp, #0
    dd7c:	e357001f 	cmp	r7, #31
    dd80:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    dd84:	ea000024 	b	de1c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x13c>
    dd88:	0000e108 	.word	0x0000e108
    dd8c:	0000de1c 	.word	0x0000de1c
    dd90:	0000de1c 	.word	0x0000de1c
    dd94:	0000de1c 	.word	0x0000de1c
    dd98:	0000de1c 	.word	0x0000de1c
    dd9c:	0000de1c 	.word	0x0000de1c
    dda0:	0000de1c 	.word	0x0000de1c
    dda4:	0000e0f4 	.word	0x0000e0f4
    dda8:	0000de1c 	.word	0x0000de1c
    ddac:	0000de1c 	.word	0x0000de1c
    ddb0:	0000de1c 	.word	0x0000de1c
    ddb4:	0000de1c 	.word	0x0000de1c
    ddb8:	0000de1c 	.word	0x0000de1c
    ddbc:	0000de1c 	.word	0x0000de1c
    ddc0:	0000de1c 	.word	0x0000de1c
    ddc4:	0000de08 	.word	0x0000de08
    ddc8:	0000de1c 	.word	0x0000de1c
    ddcc:	0000de1c 	.word	0x0000de1c
    ddd0:	0000de1c 	.word	0x0000de1c
    ddd4:	0000de1c 	.word	0x0000de1c
    ddd8:	0000de1c 	.word	0x0000de1c
    dddc:	0000de1c 	.word	0x0000de1c
    dde0:	0000de1c 	.word	0x0000de1c
    dde4:	0000de1c 	.word	0x0000de1c
    dde8:	0000de1c 	.word	0x0000de1c
    ddec:	0000de1c 	.word	0x0000de1c
    ddf0:	0000de1c 	.word	0x0000de1c
    ddf4:	0000de1c 	.word	0x0000de1c
    ddf8:	0000de1c 	.word	0x0000de1c
    ddfc:	0000de1c 	.word	0x0000de1c
    de00:	0000de1c 	.word	0x0000de1c
    de04:	0000e0e0 	.word	0x0000e0e0
    de08:	e594c000 	ldr	ip, [r4]
    de0c:	e594701c 	ldr	r7, [r4, #28]
    de10:	e02c569c 	mla	ip, ip, r6, r5
    de14:	e1a0c08c 	lsl	ip, ip, #1
    de18:	e18700bc 	strh	r0, [r7, ip]
    de1c:	e1510002 	cmp	r1, r2
    de20:	b1a030c2 	asrlt	r3, r2, #1
    de24:	b3a0c000 	movlt	ip, #0
    de28:	ba000035 	blt	df04 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x224>
    de2c:	e3530000 	cmp	r3, #0
    de30:	0affffbd 	beq	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    de34:	e1a030c1 	asr	r3, r1, #1
    de38:	e3a0c000 	mov	ip, #0
    de3c:	e5947008 	ldr	r7, [r4, #8]
    de40:	e0833002 	add	r3, r3, r2
    de44:	e1510003 	cmp	r1, r3
    de48:	e085500e 	add	r5, r5, lr
    de4c:	e2477001 	sub	r7, r7, #1
    de50:	d0433001 	suble	r3, r3, r1
    de54:	d086600b 	addle	r6, r6, fp
    de58:	e357001f 	cmp	r7, #31
    de5c:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    de60:	ea000056 	b	dfc0 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x2e0>
    de64:	0000dff0 	.word	0x0000dff0
    de68:	0000dfc0 	.word	0x0000dfc0
    de6c:	0000dfc0 	.word	0x0000dfc0
    de70:	0000dfc0 	.word	0x0000dfc0
    de74:	0000dfc0 	.word	0x0000dfc0
    de78:	0000dfc0 	.word	0x0000dfc0
    de7c:	0000dfc0 	.word	0x0000dfc0
    de80:	0000e038 	.word	0x0000e038
    de84:	0000dfc0 	.word	0x0000dfc0
    de88:	0000dfc0 	.word	0x0000dfc0
    de8c:	0000dfc0 	.word	0x0000dfc0
    de90:	0000dfc0 	.word	0x0000dfc0
    de94:	0000dfc0 	.word	0x0000dfc0
    de98:	0000dfc0 	.word	0x0000dfc0
    de9c:	0000dfc0 	.word	0x0000dfc0
    dea0:	0000dfac 	.word	0x0000dfac
    dea4:	0000dfc0 	.word	0x0000dfc0
    dea8:	0000dfc0 	.word	0x0000dfc0
    deac:	0000dfc0 	.word	0x0000dfc0
    deb0:	0000dfc0 	.word	0x0000dfc0
    deb4:	0000dfc0 	.word	0x0000dfc0
    deb8:	0000dfc0 	.word	0x0000dfc0
    debc:	0000dfc0 	.word	0x0000dfc0
    dec0:	0000dfc0 	.word	0x0000dfc0
    dec4:	0000dfc0 	.word	0x0000dfc0
    dec8:	0000dfc0 	.word	0x0000dfc0
    decc:	0000dfc0 	.word	0x0000dfc0
    ded0:	0000dfc0 	.word	0x0000dfc0
    ded4:	0000dfc0 	.word	0x0000dfc0
    ded8:	0000dfc0 	.word	0x0000dfc0
    dedc:	0000dfc0 	.word	0x0000dfc0
    dee0:	0000dfd0 	.word	0x0000dfd0
    dee4:	e5947000 	ldr	r7, [r4]
    dee8:	e594801c 	ldr	r8, [r4, #28]
    deec:	e0275697 	mla	r7, r7, r6, r5
    def0:	e1a07087 	lsl	r7, r7, #1
    def4:	e18800b7 	strh	r0, [r8, r7]
    def8:	e28cc001 	add	ip, ip, #1
    defc:	e152000c 	cmp	r2, ip
    df00:	0affff89 	beq	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    df04:	e5947008 	ldr	r7, [r4, #8]
    df08:	e0833001 	add	r3, r3, r1
    df0c:	e1520003 	cmp	r2, r3
    df10:	e086600b 	add	r6, r6, fp
    df14:	e2477001 	sub	r7, r7, #1
    df18:	d0433002 	suble	r3, r3, r2
    df1c:	d085500e 	addle	r5, r5, lr
    df20:	e357001f 	cmp	r7, #31
    df24:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    df28:	eafffff2 	b	def8 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x218>
    df2c:	0000e098 	.word	0x0000e098
    df30:	0000def8 	.word	0x0000def8
    df34:	0000def8 	.word	0x0000def8
    df38:	0000def8 	.word	0x0000def8
    df3c:	0000def8 	.word	0x0000def8
    df40:	0000def8 	.word	0x0000def8
    df44:	0000def8 	.word	0x0000def8
    df48:	0000e078 	.word	0x0000e078
    df4c:	0000def8 	.word	0x0000def8
    df50:	0000def8 	.word	0x0000def8
    df54:	0000def8 	.word	0x0000def8
    df58:	0000def8 	.word	0x0000def8
    df5c:	0000def8 	.word	0x0000def8
    df60:	0000def8 	.word	0x0000def8
    df64:	0000def8 	.word	0x0000def8
    df68:	0000dee4 	.word	0x0000dee4
    df6c:	0000def8 	.word	0x0000def8
    df70:	0000def8 	.word	0x0000def8
    df74:	0000def8 	.word	0x0000def8
    df78:	0000def8 	.word	0x0000def8
    df7c:	0000def8 	.word	0x0000def8
    df80:	0000def8 	.word	0x0000def8
    df84:	0000def8 	.word	0x0000def8
    df88:	0000def8 	.word	0x0000def8
    df8c:	0000def8 	.word	0x0000def8
    df90:	0000def8 	.word	0x0000def8
    df94:	0000def8 	.word	0x0000def8
    df98:	0000def8 	.word	0x0000def8
    df9c:	0000def8 	.word	0x0000def8
    dfa0:	0000def8 	.word	0x0000def8
    dfa4:	0000def8 	.word	0x0000def8
    dfa8:	0000e058 	.word	0x0000e058
    dfac:	e5947000 	ldr	r7, [r4]
    dfb0:	e594801c 	ldr	r8, [r4, #28]
    dfb4:	e0275697 	mla	r7, r7, r6, r5
    dfb8:	e1a07087 	lsl	r7, r7, #1
    dfbc:	e18800b7 	strh	r0, [r8, r7]
    dfc0:	e28cc001 	add	ip, ip, #1
    dfc4:	e151000c 	cmp	r1, ip
    dfc8:	1affff9b 	bne	de3c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x15c>
    dfcc:	eaffff56 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    dfd0:	e5947000 	ldr	r7, [r4]
    dfd4:	e28cc001 	add	ip, ip, #1
    dfd8:	e594801c 	ldr	r8, [r4, #28]
    dfdc:	e151000c 	cmp	r1, ip
    dfe0:	e0275697 	mla	r7, r7, r6, r5
    dfe4:	e7880107 	str	r0, [r8, r7, lsl #2]
    dfe8:	1affff93 	bne	de3c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x15c>
    dfec:	eaffff4e 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    dff0:	e3a08080 	mov	r8, #128	@ 0x80
    dff4:	e2057007 	and	r7, r5, #7
    dff8:	e594a01c 	ldr	sl, [r4, #28]
    dffc:	e28cc001 	add	ip, ip, #1
    e000:	e1a07758 	asr	r7, r8, r7
    e004:	e5948000 	ldr	r8, [r4]
    e008:	e3500000 	cmp	r0, #0
    e00c:	e0285698 	mla	r8, r8, r6, r5
    e010:	e58d8004 	str	r8, [sp, #4]
    e014:	e7da91a8 	ldrb	r9, [sl, r8, lsr #3]
    e018:	e1898007 	orr	r8, r9, r7
    e01c:	e1c99007 	bic	r9, r9, r7
    e020:	e59d7004 	ldr	r7, [sp, #4]
    e024:	17ca81a7 	strbne	r8, [sl, r7, lsr #3]
    e028:	07ca91a7 	strbeq	r9, [sl, r7, lsr #3]
    e02c:	e151000c 	cmp	r1, ip
    e030:	1affff81 	bne	de3c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x15c>
    e034:	eaffff3c 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    e038:	e5948000 	ldr	r8, [r4]
    e03c:	e28cc001 	add	ip, ip, #1
    e040:	e594701c 	ldr	r7, [r4, #28]
    e044:	e151000c 	cmp	r1, ip
    e048:	e0277698 	mla	r7, r8, r6, r7
    e04c:	e7c70005 	strb	r0, [r7, r5]
    e050:	1affff79 	bne	de3c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x15c>
    e054:	eaffff34 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    e058:	e5947000 	ldr	r7, [r4]
    e05c:	e28cc001 	add	ip, ip, #1
    e060:	e594801c 	ldr	r8, [r4, #28]
    e064:	e152000c 	cmp	r2, ip
    e068:	e0275697 	mla	r7, r7, r6, r5
    e06c:	e7880107 	str	r0, [r8, r7, lsl #2]
    e070:	1affffa3 	bne	df04 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x224>
    e074:	eaffff2c 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    e078:	e5948000 	ldr	r8, [r4]
    e07c:	e28cc001 	add	ip, ip, #1
    e080:	e594701c 	ldr	r7, [r4, #28]
    e084:	e152000c 	cmp	r2, ip
    e088:	e0277698 	mla	r7, r8, r6, r7
    e08c:	e7c70005 	strb	r0, [r7, r5]
    e090:	1affff9b 	bne	df04 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x224>
    e094:	eaffff24 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    e098:	e3a08080 	mov	r8, #128	@ 0x80
    e09c:	e2057007 	and	r7, r5, #7
    e0a0:	e594a01c 	ldr	sl, [r4, #28]
    e0a4:	e28cc001 	add	ip, ip, #1
    e0a8:	e1a07758 	asr	r7, r8, r7
    e0ac:	e5948000 	ldr	r8, [r4]
    e0b0:	e3500000 	cmp	r0, #0
    e0b4:	e0285698 	mla	r8, r8, r6, r5
    e0b8:	e58d8004 	str	r8, [sp, #4]
    e0bc:	e7da91a8 	ldrb	r9, [sl, r8, lsr #3]
    e0c0:	e1898007 	orr	r8, r9, r7
    e0c4:	e1c99007 	bic	r9, r9, r7
    e0c8:	e59d7004 	ldr	r7, [sp, #4]
    e0cc:	17ca81a7 	strbne	r8, [sl, r7, lsr #3]
    e0d0:	07ca91a7 	strbeq	r9, [sl, r7, lsr #3]
    e0d4:	e152000c 	cmp	r2, ip
    e0d8:	1affff89 	bne	df04 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x224>
    e0dc:	eaffff12 	b	dd2c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4c>
    e0e0:	e594c000 	ldr	ip, [r4]
    e0e4:	e594701c 	ldr	r7, [r4, #28]
    e0e8:	e02c569c 	mla	ip, ip, r6, r5
    e0ec:	e787010c 	str	r0, [r7, ip, lsl #2]
    e0f0:	eaffff49 	b	de1c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x13c>
    e0f4:	e5947000 	ldr	r7, [r4]
    e0f8:	e594c01c 	ldr	ip, [r4, #28]
    e0fc:	e02cc697 	mla	ip, r7, r6, ip
    e100:	e7cc0005 	strb	r0, [ip, r5]
    e104:	eaffff44 	b	de1c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x13c>
    e108:	e594c000 	ldr	ip, [r4]
    e10c:	e2057007 	and	r7, r5, #7
    e110:	e594801c 	ldr	r8, [r4, #28]
    e114:	e3a09080 	mov	r9, #128	@ 0x80
    e118:	e3500000 	cmp	r0, #0
    e11c:	e1a09759 	asr	r9, r9, r7
    e120:	e02c569c 	mla	ip, ip, r6, r5
    e124:	e7d871ac 	ldrb	r7, [r8, ip, lsr #3]
    e128:	11877009 	orrne	r7, r7, r9
    e12c:	01c77009 	biceq	r7, r7, r9
    e130:	e7c871ac 	strb	r7, [r8, ip, lsr #3]
    e134:	eaffff38 	b	de1c <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x13c>

0000e138 <C2DGraphics::DrawRectOutline(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>:
    e138:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e13c:	e0815003 	add	r5, r1, r3
    e140:	e5903000 	ldr	r3, [r0]
    e144:	e24dd00c 	sub	sp, sp, #12
    e148:	e1550003 	cmp	r5, r3
    e14c:	e1cd82d8 	ldrd	r8, [sp, #40]	@ 0x28
    e150:	8a000005 	bhi	e16c <C2DGraphics::DrawRectOutline(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x34>
    e154:	e5903004 	ldr	r3, [r0, #4]
    e158:	e0828008 	add	r8, r2, r8
    e15c:	e1a04000 	mov	r4, r0
    e160:	e1a07002 	mov	r7, r2
    e164:	e1580003 	cmp	r8, r3
    e168:	9a000001 	bls	e174 <C2DGraphics::DrawRectOutline(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x3c>
    e16c:	e28dd00c 	add	sp, sp, #12
    e170:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e174:	e1a03005 	mov	r3, r5
    e178:	e88d0280 	stm	sp, {r7, r9}
    e17c:	e1a06001 	mov	r6, r1
    e180:	ebfffed6 	bl	dce0 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>
    e184:	e1a03005 	mov	r3, r5
    e188:	e1a02007 	mov	r2, r7
    e18c:	e1a01005 	mov	r1, r5
    e190:	e1a00004 	mov	r0, r4
    e194:	e88d0300 	stm	sp, {r8, r9}
    e198:	ebfffed0 	bl	dce0 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>
    e19c:	e1a03005 	mov	r3, r5
    e1a0:	e1a02008 	mov	r2, r8
    e1a4:	e1a01006 	mov	r1, r6
    e1a8:	e1a00004 	mov	r0, r4
    e1ac:	e88d0300 	stm	sp, {r8, r9}
    e1b0:	ebfffeca 	bl	dce0 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>
    e1b4:	e1a02007 	mov	r2, r7
    e1b8:	e1a00004 	mov	r0, r4
    e1bc:	e1a03006 	mov	r3, r6
    e1c0:	e1a01006 	mov	r1, r6
    e1c4:	e58d902c 	str	r9, [sp, #44]	@ 0x2c
    e1c8:	e58d8028 	str	r8, [sp, #40]	@ 0x28
    e1cc:	e28dd00c 	add	sp, sp, #12
    e1d0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    e1d4:	eafffec1 	b	dce0 <C2DGraphics::DrawLine(unsigned int, unsigned int, unsigned int, unsigned int, CDisplay::TColor)>

0000e1d8 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)>:
    e1d8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1dc:	e1a04003 	mov	r4, r3
    e1e0:	e5903000 	ldr	r3, [r0]
    e1e4:	e1a07002 	mov	r7, r2
    e1e8:	e0812004 	add	r2, r1, r4
    e1ec:	e1520003 	cmp	r2, r3
    e1f0:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1f4:	e5902004 	ldr	r2, [r0, #4]
    e1f8:	e1a06001 	mov	r6, r1
    e1fc:	e0841007 	add	r1, r4, r7
    e200:	e1a05000 	mov	r5, r0
    e204:	e1510002 	cmp	r1, r2
    e208:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e20c:	e0461004 	sub	r1, r6, r4
    e210:	e1530001 	cmp	r3, r1
    e214:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e218:	e0473004 	sub	r3, r7, r4
    e21c:	e1520003 	cmp	r2, r3
    e220:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e224:	e0080494 	mul	r8, r4, r4
    e228:	e59d1028 	ldr	r1, [sp, #40]	@ 0x28
    e22c:	e5900010 	ldr	r0, [r0, #16]
    e230:	eb000fec 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    e234:	e1a02084 	lsl	r2, r4, #1
    e238:	e1b09108 	lsls	r9, r8, #2
    e23c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e240:	e3a0e000 	mov	lr, #0
    e244:	ea000002 	b	e254 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x7c>
    e248:	e28ee001 	add	lr, lr, #1
    e24c:	e159000e 	cmp	r9, lr
    e250:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e254:	e733f21e 	udiv	r3, lr, r2
    e258:	e06ce392 	mls	ip, r2, r3, lr
    e25c:	e0433004 	sub	r3, r3, r4
    e260:	e04cc004 	sub	ip, ip, r4
    e264:	e0010393 	mul	r1, r3, r3
    e268:	e0211c9c 	mla	r1, ip, ip, r1
    e26c:	e1510008 	cmp	r1, r8
    e270:	aafffff4 	bge	e248 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x70>
    e274:	e5951008 	ldr	r1, [r5, #8]
    e278:	e08cc006 	add	ip, ip, r6
    e27c:	e0833007 	add	r3, r3, r7
    e280:	e2411001 	sub	r1, r1, #1
    e284:	e351001f 	cmp	r1, #31
    e288:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    e28c:	eaffffed 	b	e248 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x70>
    e290:	0000e350 	.word	0x0000e350
    e294:	0000e248 	.word	0x0000e248
    e298:	0000e248 	.word	0x0000e248
    e29c:	0000e248 	.word	0x0000e248
    e2a0:	0000e248 	.word	0x0000e248
    e2a4:	0000e248 	.word	0x0000e248
    e2a8:	0000e248 	.word	0x0000e248
    e2ac:	0000e33c 	.word	0x0000e33c
    e2b0:	0000e248 	.word	0x0000e248
    e2b4:	0000e248 	.word	0x0000e248
    e2b8:	0000e248 	.word	0x0000e248
    e2bc:	0000e248 	.word	0x0000e248
    e2c0:	0000e248 	.word	0x0000e248
    e2c4:	0000e248 	.word	0x0000e248
    e2c8:	0000e248 	.word	0x0000e248
    e2cc:	0000e324 	.word	0x0000e324
    e2d0:	0000e248 	.word	0x0000e248
    e2d4:	0000e248 	.word	0x0000e248
    e2d8:	0000e248 	.word	0x0000e248
    e2dc:	0000e248 	.word	0x0000e248
    e2e0:	0000e248 	.word	0x0000e248
    e2e4:	0000e248 	.word	0x0000e248
    e2e8:	0000e248 	.word	0x0000e248
    e2ec:	0000e248 	.word	0x0000e248
    e2f0:	0000e248 	.word	0x0000e248
    e2f4:	0000e248 	.word	0x0000e248
    e2f8:	0000e248 	.word	0x0000e248
    e2fc:	0000e248 	.word	0x0000e248
    e300:	0000e248 	.word	0x0000e248
    e304:	0000e248 	.word	0x0000e248
    e308:	0000e248 	.word	0x0000e248
    e30c:	0000e310 	.word	0x0000e310
    e310:	e5951000 	ldr	r1, [r5]
    e314:	e02cc391 	mla	ip, r1, r3, ip
    e318:	e595301c 	ldr	r3, [r5, #28]
    e31c:	e783010c 	str	r0, [r3, ip, lsl #2]
    e320:	eaffffc8 	b	e248 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x70>
    e324:	e5951000 	ldr	r1, [r5]
    e328:	e023c391 	mla	r3, r1, r3, ip
    e32c:	e595101c 	ldr	r1, [r5, #28]
    e330:	e1a03083 	lsl	r3, r3, #1
    e334:	e18100b3 	strh	r0, [r1, r3]
    e338:	eaffffc2 	b	e248 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x70>
    e33c:	e595a000 	ldr	sl, [r5]
    e340:	e595101c 	ldr	r1, [r5, #28]
    e344:	e023139a 	mla	r3, sl, r3, r1
    e348:	e7c3000c 	strb	r0, [r3, ip]
    e34c:	eaffffbd 	b	e248 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x70>
    e350:	e20ca007 	and	sl, ip, #7
    e354:	e3a01080 	mov	r1, #128	@ 0x80
    e358:	e3500000 	cmp	r0, #0
    e35c:	e1a01a51 	asr	r1, r1, sl
    e360:	e595a000 	ldr	sl, [r5]
    e364:	e023c39a 	mla	r3, sl, r3, ip
    e368:	e595a01c 	ldr	sl, [r5, #28]
    e36c:	e7dac1a3 	ldrb	ip, [sl, r3, lsr #3]
    e370:	e18cb001 	orr	fp, ip, r1
    e374:	e1ccc001 	bic	ip, ip, r1
    e378:	17cab1a3 	strbne	fp, [sl, r3, lsr #3]
    e37c:	07cac1a3 	strbeq	ip, [sl, r3, lsr #3]
    e380:	eaffffb0 	b	e248 <C2DGraphics::DrawCircle(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x70>

0000e384 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)>:
    e384:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e388:	e0818003 	add	r8, r1, r3
    e38c:	e1a05003 	mov	r5, r3
    e390:	e5903000 	ldr	r3, [r0]
    e394:	e24dd014 	sub	sp, sp, #20
    e398:	e1580003 	cmp	r8, r3
    e39c:	2a00000c 	bcs	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e3a0:	e1a07002 	mov	r7, r2
    e3a4:	e5902004 	ldr	r2, [r0, #4]
    e3a8:	e0859007 	add	r9, r5, r7
    e3ac:	e1a04000 	mov	r4, r0
    e3b0:	e1590002 	cmp	r9, r2
    e3b4:	2a000006 	bcs	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e3b8:	e1a06001 	mov	r6, r1
    e3bc:	e0411005 	sub	r1, r1, r5
    e3c0:	e1530001 	cmp	r3, r1
    e3c4:	9a000002 	bls	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e3c8:	e047a005 	sub	sl, r7, r5
    e3cc:	e152000a 	cmp	r2, sl
    e3d0:	8a000001 	bhi	e3dc <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x58>
    e3d4:	e28dd014 	add	sp, sp, #20
    e3d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3dc:	e5900010 	ldr	r0, [r0, #16]
    e3e0:	e59d1038 	ldr	r1, [sp, #56]	@ 0x38
    e3e4:	eb000f7f 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
    e3e8:	e5943008 	ldr	r3, [r4, #8]
    e3ec:	e2433001 	sub	r3, r3, #1
    e3f0:	e353001f 	cmp	r3, #31
    e3f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e3f8:	ea000023 	b	e48c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x108>
    e3fc:	0000f384 	.word	0x0000f384
    e400:	0000e48c 	.word	0x0000e48c
    e404:	0000e48c 	.word	0x0000e48c
    e408:	0000e48c 	.word	0x0000e48c
    e40c:	0000e48c 	.word	0x0000e48c
    e410:	0000e48c 	.word	0x0000e48c
    e414:	0000e48c 	.word	0x0000e48c
    e418:	0000e47c 	.word	0x0000e47c
    e41c:	0000e48c 	.word	0x0000e48c
    e420:	0000e48c 	.word	0x0000e48c
    e424:	0000e48c 	.word	0x0000e48c
    e428:	0000e48c 	.word	0x0000e48c
    e42c:	0000e48c 	.word	0x0000e48c
    e430:	0000e48c 	.word	0x0000e48c
    e434:	0000e48c 	.word	0x0000e48c
    e438:	0000e670 	.word	0x0000e670
    e43c:	0000e48c 	.word	0x0000e48c
    e440:	0000e48c 	.word	0x0000e48c
    e444:	0000e48c 	.word	0x0000e48c
    e448:	0000e48c 	.word	0x0000e48c
    e44c:	0000e48c 	.word	0x0000e48c
    e450:	0000e48c 	.word	0x0000e48c
    e454:	0000e48c 	.word	0x0000e48c
    e458:	0000e48c 	.word	0x0000e48c
    e45c:	0000e48c 	.word	0x0000e48c
    e460:	0000e48c 	.word	0x0000e48c
    e464:	0000e48c 	.word	0x0000e48c
    e468:	0000e48c 	.word	0x0000e48c
    e46c:	0000e48c 	.word	0x0000e48c
    e470:	0000e48c 	.word	0x0000e48c
    e474:	0000e48c 	.word	0x0000e48c
    e478:	0000f370 	.word	0x0000f370
    e47c:	e5942000 	ldr	r2, [r4]
    e480:	e594301c 	ldr	r3, [r4, #28]
    e484:	e0233792 	mla	r3, r2, r7, r3
    e488:	e7c30008 	strb	r0, [r3, r8]
    e48c:	e3550000 	cmp	r5, #0
    e490:	0affffcf 	beq	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e494:	e5943008 	ldr	r3, [r4, #8]
    e498:	e2433001 	sub	r3, r3, #1
    e49c:	e353001f 	cmp	r3, #31
    e4a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e4a4:	ea000025 	b	e540 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1bc>
    e4a8:	0000f484 	.word	0x0000f484
    e4ac:	0000e540 	.word	0x0000e540
    e4b0:	0000e540 	.word	0x0000e540
    e4b4:	0000e540 	.word	0x0000e540
    e4b8:	0000e540 	.word	0x0000e540
    e4bc:	0000e540 	.word	0x0000e540
    e4c0:	0000e540 	.word	0x0000e540
    e4c4:	0000f468 	.word	0x0000f468
    e4c8:	0000e540 	.word	0x0000e540
    e4cc:	0000e540 	.word	0x0000e540
    e4d0:	0000e540 	.word	0x0000e540
    e4d4:	0000e540 	.word	0x0000e540
    e4d8:	0000e540 	.word	0x0000e540
    e4dc:	0000e540 	.word	0x0000e540
    e4e0:	0000e540 	.word	0x0000e540
    e4e4:	0000f544 	.word	0x0000f544
    e4e8:	0000e540 	.word	0x0000e540
    e4ec:	0000e540 	.word	0x0000e540
    e4f0:	0000e540 	.word	0x0000e540
    e4f4:	0000e540 	.word	0x0000e540
    e4f8:	0000e540 	.word	0x0000e540
    e4fc:	0000e540 	.word	0x0000e540
    e500:	0000e540 	.word	0x0000e540
    e504:	0000e540 	.word	0x0000e540
    e508:	0000e540 	.word	0x0000e540
    e50c:	0000e540 	.word	0x0000e540
    e510:	0000e540 	.word	0x0000e540
    e514:	0000e540 	.word	0x0000e540
    e518:	0000e540 	.word	0x0000e540
    e51c:	0000e540 	.word	0x0000e540
    e520:	0000e540 	.word	0x0000e540
    e524:	0000e528 	.word	0x0000e528
    e528:	e5943000 	ldr	r3, [r4]
    e52c:	e02a6a93 	mla	sl, r3, sl, r6
    e530:	e594301c 	ldr	r3, [r4, #28]
    e534:	e783010a 	str	r0, [r3, sl, lsl #2]
    e538:	e5943008 	ldr	r3, [r4, #8]
    e53c:	e2433001 	sub	r3, r3, #1
    e540:	e353001f 	cmp	r3, #31
    e544:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e548:	ea000025 	b	e5e4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x260>
    e54c:	0000f5d8 	.word	0x0000f5d8
    e550:	0000e5e4 	.word	0x0000e5e4
    e554:	0000e5e4 	.word	0x0000e5e4
    e558:	0000e5e4 	.word	0x0000e5e4
    e55c:	0000e5e4 	.word	0x0000e5e4
    e560:	0000e5e4 	.word	0x0000e5e4
    e564:	0000e5e4 	.word	0x0000e5e4
    e568:	0000f55c 	.word	0x0000f55c
    e56c:	0000e5e4 	.word	0x0000e5e4
    e570:	0000e5e4 	.word	0x0000e5e4
    e574:	0000e5e4 	.word	0x0000e5e4
    e578:	0000e5e4 	.word	0x0000e5e4
    e57c:	0000e5e4 	.word	0x0000e5e4
    e580:	0000e5e4 	.word	0x0000e5e4
    e584:	0000e5e4 	.word	0x0000e5e4
    e588:	0000f6a0 	.word	0x0000f6a0
    e58c:	0000e5e4 	.word	0x0000e5e4
    e590:	0000e5e4 	.word	0x0000e5e4
    e594:	0000e5e4 	.word	0x0000e5e4
    e598:	0000e5e4 	.word	0x0000e5e4
    e59c:	0000e5e4 	.word	0x0000e5e4
    e5a0:	0000e5e4 	.word	0x0000e5e4
    e5a4:	0000e5e4 	.word	0x0000e5e4
    e5a8:	0000e5e4 	.word	0x0000e5e4
    e5ac:	0000e5e4 	.word	0x0000e5e4
    e5b0:	0000e5e4 	.word	0x0000e5e4
    e5b4:	0000e5e4 	.word	0x0000e5e4
    e5b8:	0000e5e4 	.word	0x0000e5e4
    e5bc:	0000e5e4 	.word	0x0000e5e4
    e5c0:	0000e5e4 	.word	0x0000e5e4
    e5c4:	0000e5e4 	.word	0x0000e5e4
    e5c8:	0000e5cc 	.word	0x0000e5cc
    e5cc:	e5943000 	ldr	r3, [r4]
    e5d0:	e594201c 	ldr	r2, [r4, #28]
    e5d4:	e0238793 	mla	r3, r3, r7, r8
    e5d8:	e7820103 	str	r0, [r2, r3, lsl #2]
    e5dc:	e5943008 	ldr	r3, [r4, #8]
    e5e0:	e2433001 	sub	r3, r3, #1
    e5e4:	e353001f 	cmp	r3, #31
    e5e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e5ec:	ea00002f 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    e5f0:	0000f5a0 	.word	0x0000f5a0
    e5f4:	0000e6b0 	.word	0x0000e6b0
    e5f8:	0000e6b0 	.word	0x0000e6b0
    e5fc:	0000e6b0 	.word	0x0000e6b0
    e600:	0000e6b0 	.word	0x0000e6b0
    e604:	0000e6b0 	.word	0x0000e6b0
    e608:	0000e6b0 	.word	0x0000e6b0
    e60c:	0000f58c 	.word	0x0000f58c
    e610:	0000e6b0 	.word	0x0000e6b0
    e614:	0000e6b0 	.word	0x0000e6b0
    e618:	0000e6b0 	.word	0x0000e6b0
    e61c:	0000e6b0 	.word	0x0000e6b0
    e620:	0000e6b0 	.word	0x0000e6b0
    e624:	0000e6b0 	.word	0x0000e6b0
    e628:	0000e6b0 	.word	0x0000e6b0
    e62c:	0000f6b8 	.word	0x0000f6b8
    e630:	0000e6b0 	.word	0x0000e6b0
    e634:	0000e6b0 	.word	0x0000e6b0
    e638:	0000e6b0 	.word	0x0000e6b0
    e63c:	0000e6b0 	.word	0x0000e6b0
    e640:	0000e6b0 	.word	0x0000e6b0
    e644:	0000e6b0 	.word	0x0000e6b0
    e648:	0000e6b0 	.word	0x0000e6b0
    e64c:	0000e6b0 	.word	0x0000e6b0
    e650:	0000e6b0 	.word	0x0000e6b0
    e654:	0000e6b0 	.word	0x0000e6b0
    e658:	0000e6b0 	.word	0x0000e6b0
    e65c:	0000e6b0 	.word	0x0000e6b0
    e660:	0000e6b0 	.word	0x0000e6b0
    e664:	0000e6b0 	.word	0x0000e6b0
    e668:	0000e6b0 	.word	0x0000e6b0
    e66c:	0000f578 	.word	0x0000f578
    e670:	e5943000 	ldr	r3, [r4]
    e674:	e6ff1070 	uxth	r1, r0
    e678:	e594201c 	ldr	r2, [r4, #28]
    e67c:	e3550000 	cmp	r5, #0
    e680:	e0288793 	mla	r8, r3, r7, r8
    e684:	e1a08088 	lsl	r8, r8, #1
    e688:	e18210b8 	strh	r1, [r2, r8]
    e68c:	e0828008 	add	r8, r2, r8
    e690:	0affff4f 	beq	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e694:	e02c6a93 	mla	ip, r3, sl, r6
    e698:	e1a0c08c 	lsl	ip, ip, #1
    e69c:	e18210bc 	strh	r1, [r2, ip]
    e6a0:	e1c810b0 	strh	r1, [r8]
    e6a4:	e0236993 	mla	r3, r3, r9, r6
    e6a8:	e1a03083 	lsl	r3, r3, #1
    e6ac:	e18210b3 	strh	r1, [r2, r3]
    e6b0:	e3550000 	cmp	r5, #0
    e6b4:	e265b001 	rsb	fp, r5, #1
    e6b8:	daffff45 	ble	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e6bc:	e247e001 	sub	lr, r7, #1
    e6c0:	e3a03000 	mov	r3, #0
    e6c4:	e6ff2070 	uxth	r2, r0
    e6c8:	e58d7004 	str	r7, [sp, #4]
    e6cc:	e58d200c 	str	r2, [sp, #12]
    e6d0:	e2833001 	add	r3, r3, #1
    e6d4:	e35b0000 	cmp	fp, #0
    e6d8:	c2455001 	subgt	r5, r5, #1
    e6dc:	e08bb083 	add	fp, fp, r3, lsl #1
    e6e0:	c28bb001 	addgt	fp, fp, #1
    e6e4:	d28bb001 	addle	fp, fp, #1
    e6e8:	c04bb085 	subgt	fp, fp, r5, lsl #1
    e6ec:	e1550003 	cmp	r5, r3
    e6f0:	baffff37 	blt	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e6f4:	e5947008 	ldr	r7, [r4, #8]
    e6f8:	e0852006 	add	r2, r5, r6
    e6fc:	e59d1004 	ldr	r1, [sp, #4]
    e700:	e2477001 	sub	r7, r7, #1
    e704:	e081c003 	add	ip, r1, r3
    e708:	e0461005 	sub	r1, r6, r5
    e70c:	e357001f 	cmp	r7, #31
    e710:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    e714:	ea000025 	b	e7b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x42c>
    e718:	0000ece0 	.word	0x0000ece0
    e71c:	0000e7b0 	.word	0x0000e7b0
    e720:	0000e7b0 	.word	0x0000e7b0
    e724:	0000e7b0 	.word	0x0000e7b0
    e728:	0000e7b0 	.word	0x0000e7b0
    e72c:	0000e7b0 	.word	0x0000e7b0
    e730:	0000e7b0 	.word	0x0000e7b0
    e734:	0000ecc4 	.word	0x0000ecc4
    e738:	0000e7b0 	.word	0x0000e7b0
    e73c:	0000e7b0 	.word	0x0000e7b0
    e740:	0000e7b0 	.word	0x0000e7b0
    e744:	0000e7b0 	.word	0x0000e7b0
    e748:	0000e7b0 	.word	0x0000e7b0
    e74c:	0000e7b0 	.word	0x0000e7b0
    e750:	0000e7b0 	.word	0x0000e7b0
    e754:	0000ec04 	.word	0x0000ec04
    e758:	0000e7b0 	.word	0x0000e7b0
    e75c:	0000e7b0 	.word	0x0000e7b0
    e760:	0000e7b0 	.word	0x0000e7b0
    e764:	0000e7b0 	.word	0x0000e7b0
    e768:	0000e7b0 	.word	0x0000e7b0
    e76c:	0000e7b0 	.word	0x0000e7b0
    e770:	0000e7b0 	.word	0x0000e7b0
    e774:	0000e7b0 	.word	0x0000e7b0
    e778:	0000e7b0 	.word	0x0000e7b0
    e77c:	0000e7b0 	.word	0x0000e7b0
    e780:	0000e7b0 	.word	0x0000e7b0
    e784:	0000e7b0 	.word	0x0000e7b0
    e788:	0000e7b0 	.word	0x0000e7b0
    e78c:	0000e7b0 	.word	0x0000e7b0
    e790:	0000e7b0 	.word	0x0000e7b0
    e794:	0000e798 	.word	0x0000e798
    e798:	e5947000 	ldr	r7, [r4]
    e79c:	e594801c 	ldr	r8, [r4, #28]
    e7a0:	e0272c97 	mla	r7, r7, ip, r2
    e7a4:	e7880107 	str	r0, [r8, r7, lsl #2]
    e7a8:	e5947008 	ldr	r7, [r4, #8]
    e7ac:	e2477001 	sub	r7, r7, #1
    e7b0:	e357001f 	cmp	r7, #31
    e7b4:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    e7b8:	ea000025 	b	e854 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4d0>
    e7bc:	0000edec 	.word	0x0000edec
    e7c0:	0000e854 	.word	0x0000e854
    e7c4:	0000e854 	.word	0x0000e854
    e7c8:	0000e854 	.word	0x0000e854
    e7cc:	0000e854 	.word	0x0000e854
    e7d0:	0000e854 	.word	0x0000e854
    e7d4:	0000e854 	.word	0x0000e854
    e7d8:	0000edd0 	.word	0x0000edd0
    e7dc:	0000e854 	.word	0x0000e854
    e7e0:	0000e854 	.word	0x0000e854
    e7e4:	0000e854 	.word	0x0000e854
    e7e8:	0000e854 	.word	0x0000e854
    e7ec:	0000e854 	.word	0x0000e854
    e7f0:	0000e854 	.word	0x0000e854
    e7f4:	0000e854 	.word	0x0000e854
    e7f8:	0000efcc 	.word	0x0000efcc
    e7fc:	0000e854 	.word	0x0000e854
    e800:	0000e854 	.word	0x0000e854
    e804:	0000e854 	.word	0x0000e854
    e808:	0000e854 	.word	0x0000e854
    e80c:	0000e854 	.word	0x0000e854
    e810:	0000e854 	.word	0x0000e854
    e814:	0000e854 	.word	0x0000e854
    e818:	0000e854 	.word	0x0000e854
    e81c:	0000e854 	.word	0x0000e854
    e820:	0000e854 	.word	0x0000e854
    e824:	0000e854 	.word	0x0000e854
    e828:	0000e854 	.word	0x0000e854
    e82c:	0000e854 	.word	0x0000e854
    e830:	0000e854 	.word	0x0000e854
    e834:	0000e854 	.word	0x0000e854
    e838:	0000e83c 	.word	0x0000e83c
    e83c:	e5947000 	ldr	r7, [r4]
    e840:	e02c1c97 	mla	ip, r7, ip, r1
    e844:	e594701c 	ldr	r7, [r4, #28]
    e848:	e787010c 	str	r0, [r7, ip, lsl #2]
    e84c:	e5947008 	ldr	r7, [r4, #8]
    e850:	e2477001 	sub	r7, r7, #1
    e854:	e357001f 	cmp	r7, #31
    e858:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    e85c:	ea000025 	b	e8f8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x574>
    e860:	0000eeec 	.word	0x0000eeec
    e864:	0000e8f8 	.word	0x0000e8f8
    e868:	0000e8f8 	.word	0x0000e8f8
    e86c:	0000e8f8 	.word	0x0000e8f8
    e870:	0000e8f8 	.word	0x0000e8f8
    e874:	0000e8f8 	.word	0x0000e8f8
    e878:	0000e8f8 	.word	0x0000e8f8
    e87c:	0000eda0 	.word	0x0000eda0
    e880:	0000e8f8 	.word	0x0000e8f8
    e884:	0000e8f8 	.word	0x0000e8f8
    e888:	0000e8f8 	.word	0x0000e8f8
    e88c:	0000e8f8 	.word	0x0000e8f8
    e890:	0000e8f8 	.word	0x0000e8f8
    e894:	0000e8f8 	.word	0x0000e8f8
    e898:	0000e8f8 	.word	0x0000e8f8
    e89c:	0000efe4 	.word	0x0000efe4
    e8a0:	0000e8f8 	.word	0x0000e8f8
    e8a4:	0000e8f8 	.word	0x0000e8f8
    e8a8:	0000e8f8 	.word	0x0000e8f8
    e8ac:	0000e8f8 	.word	0x0000e8f8
    e8b0:	0000e8f8 	.word	0x0000e8f8
    e8b4:	0000e8f8 	.word	0x0000e8f8
    e8b8:	0000e8f8 	.word	0x0000e8f8
    e8bc:	0000e8f8 	.word	0x0000e8f8
    e8c0:	0000e8f8 	.word	0x0000e8f8
    e8c4:	0000e8f8 	.word	0x0000e8f8
    e8c8:	0000e8f8 	.word	0x0000e8f8
    e8cc:	0000e8f8 	.word	0x0000e8f8
    e8d0:	0000e8f8 	.word	0x0000e8f8
    e8d4:	0000e8f8 	.word	0x0000e8f8
    e8d8:	0000e8f8 	.word	0x0000e8f8
    e8dc:	0000e8e0 	.word	0x0000e8e0
    e8e0:	e594c000 	ldr	ip, [r4]
    e8e4:	e0222e9c 	mla	r2, ip, lr, r2
    e8e8:	e594c01c 	ldr	ip, [r4, #28]
    e8ec:	e78c0102 	str	r0, [ip, r2, lsl #2]
    e8f0:	e5947008 	ldr	r7, [r4, #8]
    e8f4:	e2477001 	sub	r7, r7, #1
    e8f8:	e357001f 	cmp	r7, #31
    e8fc:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    e900:	ea000023 	b	e994 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x610>
    e904:	0000eeb4 	.word	0x0000eeb4
    e908:	0000e994 	.word	0x0000e994
    e90c:	0000e994 	.word	0x0000e994
    e910:	0000e994 	.word	0x0000e994
    e914:	0000e994 	.word	0x0000e994
    e918:	0000e994 	.word	0x0000e994
    e91c:	0000e994 	.word	0x0000e994
    e920:	0000edbc 	.word	0x0000edbc
    e924:	0000e994 	.word	0x0000e994
    e928:	0000e994 	.word	0x0000e994
    e92c:	0000e994 	.word	0x0000e994
    e930:	0000e994 	.word	0x0000e994
    e934:	0000e994 	.word	0x0000e994
    e938:	0000e994 	.word	0x0000e994
    e93c:	0000e994 	.word	0x0000e994
    e940:	0000efb4 	.word	0x0000efb4
    e944:	0000e994 	.word	0x0000e994
    e948:	0000e994 	.word	0x0000e994
    e94c:	0000e994 	.word	0x0000e994
    e950:	0000e994 	.word	0x0000e994
    e954:	0000e994 	.word	0x0000e994
    e958:	0000e994 	.word	0x0000e994
    e95c:	0000e994 	.word	0x0000e994
    e960:	0000e994 	.word	0x0000e994
    e964:	0000e994 	.word	0x0000e994
    e968:	0000e994 	.word	0x0000e994
    e96c:	0000e994 	.word	0x0000e994
    e970:	0000e994 	.word	0x0000e994
    e974:	0000e994 	.word	0x0000e994
    e978:	0000e994 	.word	0x0000e994
    e97c:	0000e994 	.word	0x0000e994
    e980:	0000e984 	.word	0x0000e984
    e984:	e5942000 	ldr	r2, [r4]
    e988:	e0221e92 	mla	r2, r2, lr, r1
    e98c:	e594101c 	ldr	r1, [r4, #28]
    e990:	e7810102 	str	r0, [r1, r2, lsl #2]
    e994:	e1550003 	cmp	r5, r3
    e998:	0afffe8d 	beq	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    e99c:	e5947008 	ldr	r7, [r4, #8]
    e9a0:	e0862003 	add	r2, r6, r3
    e9a4:	e59d1004 	ldr	r1, [sp, #4]
    e9a8:	e046a003 	sub	sl, r6, r3
    e9ac:	e247c001 	sub	ip, r7, #1
    e9b0:	e0851001 	add	r1, r5, r1
    e9b4:	e35c001f 	cmp	ip, #31
    e9b8:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    e9bc:	ea000025 	b	ea58 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x6d4>
    e9c0:	0000f014 	.word	0x0000f014
    e9c4:	0000ea58 	.word	0x0000ea58
    e9c8:	0000ea58 	.word	0x0000ea58
    e9cc:	0000ea58 	.word	0x0000ea58
    e9d0:	0000ea58 	.word	0x0000ea58
    e9d4:	0000ea58 	.word	0x0000ea58
    e9d8:	0000ea58 	.word	0x0000ea58
    e9dc:	0000eff8 	.word	0x0000eff8
    e9e0:	0000ea58 	.word	0x0000ea58
    e9e4:	0000ea58 	.word	0x0000ea58
    e9e8:	0000ea58 	.word	0x0000ea58
    e9ec:	0000ea58 	.word	0x0000ea58
    e9f0:	0000ea58 	.word	0x0000ea58
    e9f4:	0000ea58 	.word	0x0000ea58
    e9f8:	0000ea58 	.word	0x0000ea58
    e9fc:	0000f0d4 	.word	0x0000f0d4
    ea00:	0000ea58 	.word	0x0000ea58
    ea04:	0000ea58 	.word	0x0000ea58
    ea08:	0000ea58 	.word	0x0000ea58
    ea0c:	0000ea58 	.word	0x0000ea58
    ea10:	0000ea58 	.word	0x0000ea58
    ea14:	0000ea58 	.word	0x0000ea58
    ea18:	0000ea58 	.word	0x0000ea58
    ea1c:	0000ea58 	.word	0x0000ea58
    ea20:	0000ea58 	.word	0x0000ea58
    ea24:	0000ea58 	.word	0x0000ea58
    ea28:	0000ea58 	.word	0x0000ea58
    ea2c:	0000ea58 	.word	0x0000ea58
    ea30:	0000ea58 	.word	0x0000ea58
    ea34:	0000ea58 	.word	0x0000ea58
    ea38:	0000ea58 	.word	0x0000ea58
    ea3c:	0000ea40 	.word	0x0000ea40
    ea40:	e594c000 	ldr	ip, [r4]
    ea44:	e594701c 	ldr	r7, [r4, #28]
    ea48:	e02c219c 	mla	ip, ip, r1, r2
    ea4c:	e787010c 	str	r0, [r7, ip, lsl #2]
    ea50:	e5947008 	ldr	r7, [r4, #8]
    ea54:	e247c001 	sub	ip, r7, #1
    ea58:	e35c001f 	cmp	ip, #31
    ea5c:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    ea60:	ea000025 	b	eafc <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x778>
    ea64:	0000f260 	.word	0x0000f260
    ea68:	0000eafc 	.word	0x0000eafc
    ea6c:	0000eafc 	.word	0x0000eafc
    ea70:	0000eafc 	.word	0x0000eafc
    ea74:	0000eafc 	.word	0x0000eafc
    ea78:	0000eafc 	.word	0x0000eafc
    ea7c:	0000eafc 	.word	0x0000eafc
    ea80:	0000f0e8 	.word	0x0000f0e8
    ea84:	0000eafc 	.word	0x0000eafc
    ea88:	0000eafc 	.word	0x0000eafc
    ea8c:	0000eafc 	.word	0x0000eafc
    ea90:	0000eafc 	.word	0x0000eafc
    ea94:	0000eafc 	.word	0x0000eafc
    ea98:	0000eafc 	.word	0x0000eafc
    ea9c:	0000eafc 	.word	0x0000eafc
    eaa0:	0000f358 	.word	0x0000f358
    eaa4:	0000eafc 	.word	0x0000eafc
    eaa8:	0000eafc 	.word	0x0000eafc
    eaac:	0000eafc 	.word	0x0000eafc
    eab0:	0000eafc 	.word	0x0000eafc
    eab4:	0000eafc 	.word	0x0000eafc
    eab8:	0000eafc 	.word	0x0000eafc
    eabc:	0000eafc 	.word	0x0000eafc
    eac0:	0000eafc 	.word	0x0000eafc
    eac4:	0000eafc 	.word	0x0000eafc
    eac8:	0000eafc 	.word	0x0000eafc
    eacc:	0000eafc 	.word	0x0000eafc
    ead0:	0000eafc 	.word	0x0000eafc
    ead4:	0000eafc 	.word	0x0000eafc
    ead8:	0000eafc 	.word	0x0000eafc
    eadc:	0000eafc 	.word	0x0000eafc
    eae0:	0000eae4 	.word	0x0000eae4
    eae4:	e594c000 	ldr	ip, [r4]
    eae8:	e021a19c 	mla	r1, ip, r1, sl
    eaec:	e594c01c 	ldr	ip, [r4, #28]
    eaf0:	e78c0101 	str	r0, [ip, r1, lsl #2]
    eaf4:	e5947008 	ldr	r7, [r4, #8]
    eaf8:	e247c001 	sub	ip, r7, #1
    eafc:	e59d1004 	ldr	r1, [sp, #4]
    eb00:	e0411005 	sub	r1, r1, r5
    eb04:	e35c001f 	cmp	ip, #31
    eb08:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    eb0c:	ea00001f 	b	eb90 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x80c>
    eb10:	0000f224 	.word	0x0000f224
    eb14:	0000eb90 	.word	0x0000eb90
    eb18:	0000eb90 	.word	0x0000eb90
    eb1c:	0000eb90 	.word	0x0000eb90
    eb20:	0000eb90 	.word	0x0000eb90
    eb24:	0000eb90 	.word	0x0000eb90
    eb28:	0000eb90 	.word	0x0000eb90
    eb2c:	0000f20c 	.word	0x0000f20c
    eb30:	0000eb90 	.word	0x0000eb90
    eb34:	0000eb90 	.word	0x0000eb90
    eb38:	0000eb90 	.word	0x0000eb90
    eb3c:	0000eb90 	.word	0x0000eb90
    eb40:	0000eb90 	.word	0x0000eb90
    eb44:	0000eb90 	.word	0x0000eb90
    eb48:	0000eb90 	.word	0x0000eb90
    eb4c:	0000f330 	.word	0x0000f330
    eb50:	0000eb90 	.word	0x0000eb90
    eb54:	0000eb90 	.word	0x0000eb90
    eb58:	0000eb90 	.word	0x0000eb90
    eb5c:	0000eb90 	.word	0x0000eb90
    eb60:	0000eb90 	.word	0x0000eb90
    eb64:	0000eb90 	.word	0x0000eb90
    eb68:	0000eb90 	.word	0x0000eb90
    eb6c:	0000eb90 	.word	0x0000eb90
    eb70:	0000eb90 	.word	0x0000eb90
    eb74:	0000eb90 	.word	0x0000eb90
    eb78:	0000eb90 	.word	0x0000eb90
    eb7c:	0000eb90 	.word	0x0000eb90
    eb80:	0000eb90 	.word	0x0000eb90
    eb84:	0000eb90 	.word	0x0000eb90
    eb88:	0000eb90 	.word	0x0000eb90
    eb8c:	0000f104 	.word	0x0000f104
    eb90:	e2477008 	sub	r7, r7, #8
    eb94:	e3570018 	cmp	r7, #24
    eb98:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    eb9c:	ea000044 	b	ecb4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x930>
    eba0:	0000f1f4 	.word	0x0000f1f4
    eba4:	0000ecb4 	.word	0x0000ecb4
    eba8:	0000ecb4 	.word	0x0000ecb4
    ebac:	0000ecb4 	.word	0x0000ecb4
    ebb0:	0000ecb4 	.word	0x0000ecb4
    ebb4:	0000ecb4 	.word	0x0000ecb4
    ebb8:	0000ecb4 	.word	0x0000ecb4
    ebbc:	0000ecb4 	.word	0x0000ecb4
    ebc0:	0000f344 	.word	0x0000f344
    ebc4:	0000ecb4 	.word	0x0000ecb4
    ebc8:	0000ecb4 	.word	0x0000ecb4
    ebcc:	0000ecb4 	.word	0x0000ecb4
    ebd0:	0000ecb4 	.word	0x0000ecb4
    ebd4:	0000ecb4 	.word	0x0000ecb4
    ebd8:	0000ecb4 	.word	0x0000ecb4
    ebdc:	0000ecb4 	.word	0x0000ecb4
    ebe0:	0000ecb4 	.word	0x0000ecb4
    ebe4:	0000ecb4 	.word	0x0000ecb4
    ebe8:	0000ecb4 	.word	0x0000ecb4
    ebec:	0000ecb4 	.word	0x0000ecb4
    ebf0:	0000ecb4 	.word	0x0000ecb4
    ebf4:	0000ecb4 	.word	0x0000ecb4
    ebf8:	0000ecb4 	.word	0x0000ecb4
    ebfc:	0000ecb4 	.word	0x0000ecb4
    ec00:	0000f1a8 	.word	0x0000f1a8
    ec04:	e5947000 	ldr	r7, [r4]
    ec08:	e59d900c 	ldr	r9, [sp, #12]
    ec0c:	e58d7008 	str	r7, [sp, #8]
    ec10:	e1a08009 	mov	r8, r9
    ec14:	e00c0c97 	mul	ip, r7, ip
    ec18:	e594701c 	ldr	r7, [r4, #28]
    ec1c:	e082a00c 	add	sl, r2, ip
    ec20:	e1a0a08a 	lsl	sl, sl, #1
    ec24:	e18790ba 	strh	r9, [r7, sl]
    ec28:	e08cc001 	add	ip, ip, r1
    ec2c:	e1a0c08c 	lsl	ip, ip, #1
    ec30:	e18780bc 	strh	r8, [r7, ip]
    ec34:	e59dc008 	ldr	ip, [sp, #8]
    ec38:	e00c0e9c 	mul	ip, ip, lr
    ec3c:	e082200c 	add	r2, r2, ip
    ec40:	e1a02082 	lsl	r2, r2, #1
    ec44:	e18780b2 	strh	r8, [r7, r2]
    ec48:	e08cc001 	add	ip, ip, r1
    ec4c:	e1550003 	cmp	r5, r3
    ec50:	e1a0c08c 	lsl	ip, ip, #1
    ec54:	e18780bc 	strh	r8, [r7, ip]
    ec58:	0afffddd 	beq	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    ec5c:	e59d1004 	ldr	r1, [sp, #4]
    ec60:	e0862003 	add	r2, r6, r3
    ec64:	e046a003 	sub	sl, r6, r3
    ec68:	e0851001 	add	r1, r5, r1
    ec6c:	e59dc008 	ldr	ip, [sp, #8]
    ec70:	e001019c 	mul	r1, ip, r1
    ec74:	e081c002 	add	ip, r1, r2
    ec78:	e1a0c08c 	lsl	ip, ip, #1
    ec7c:	e18780bc 	strh	r8, [r7, ip]
    ec80:	e08a1001 	add	r1, sl, r1
    ec84:	e1a01081 	lsl	r1, r1, #1
    ec88:	e18780b1 	strh	r8, [r7, r1]
    ec8c:	e59d1004 	ldr	r1, [sp, #4]
    ec90:	e0411005 	sub	r1, r1, r5
    ec94:	e59dc008 	ldr	ip, [sp, #8]
    ec98:	e001019c 	mul	r1, ip, r1
    ec9c:	e0812002 	add	r2, r1, r2
    eca0:	e1a02082 	lsl	r2, r2, #1
    eca4:	e18780b2 	strh	r8, [r7, r2]
    eca8:	e08a1001 	add	r1, sl, r1
    ecac:	e1a01081 	lsl	r1, r1, #1
    ecb0:	e18780b1 	strh	r8, [r7, r1]
    ecb4:	e24ee001 	sub	lr, lr, #1
    ecb8:	e1550003 	cmp	r5, r3
    ecbc:	cafffe83 	bgt	e6d0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x34c>
    ecc0:	eafffdc3 	b	e3d4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x50>
    ecc4:	e5948000 	ldr	r8, [r4]
    ecc8:	e594701c 	ldr	r7, [r4, #28]
    eccc:	e0277c98 	mla	r7, r8, ip, r7
    ecd0:	e7c70002 	strb	r0, [r7, r2]
    ecd4:	e5947008 	ldr	r7, [r4, #8]
    ecd8:	e2477001 	sub	r7, r7, #1
    ecdc:	eafffeb3 	b	e7b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x42c>
    ece0:	e5947000 	ldr	r7, [r4]
    ece4:	e2028007 	and	r8, r2, #7
    ece8:	e594a01c 	ldr	sl, [r4, #28]
    ecec:	e3a09080 	mov	r9, #128	@ 0x80
    ecf0:	e3500000 	cmp	r0, #0
    ecf4:	e1a09859 	asr	r9, r9, r8
    ecf8:	e0272c97 	mla	r7, r7, ip, r2
    ecfc:	e7da81a7 	ldrb	r8, [sl, r7, lsr #3]
    ed00:	0a0002c2 	beq	f810 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x148c>
    ed04:	e1888009 	orr	r8, r8, r9
    ed08:	e7ca81a7 	strb	r8, [sl, r7, lsr #3]
    ed0c:	e5947008 	ldr	r7, [r4, #8]
    ed10:	e2477001 	sub	r7, r7, #1
    ed14:	e357001f 	cmp	r7, #31
    ed18:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    ed1c:	eafffecc 	b	e854 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4d0>
    ed20:	0000f3d8 	.word	0x0000f3d8
    ed24:	0000e854 	.word	0x0000e854
    ed28:	0000e854 	.word	0x0000e854
    ed2c:	0000e854 	.word	0x0000e854
    ed30:	0000e854 	.word	0x0000e854
    ed34:	0000e854 	.word	0x0000e854
    ed38:	0000e854 	.word	0x0000e854
    ed3c:	0000edd0 	.word	0x0000edd0
    ed40:	0000e854 	.word	0x0000e854
    ed44:	0000e854 	.word	0x0000e854
    ed48:	0000e854 	.word	0x0000e854
    ed4c:	0000e854 	.word	0x0000e854
    ed50:	0000e854 	.word	0x0000e854
    ed54:	0000e854 	.word	0x0000e854
    ed58:	0000e854 	.word	0x0000e854
    ed5c:	0000efcc 	.word	0x0000efcc
    ed60:	0000e854 	.word	0x0000e854
    ed64:	0000e854 	.word	0x0000e854
    ed68:	0000e854 	.word	0x0000e854
    ed6c:	0000e854 	.word	0x0000e854
    ed70:	0000e854 	.word	0x0000e854
    ed74:	0000e854 	.word	0x0000e854
    ed78:	0000e854 	.word	0x0000e854
    ed7c:	0000e854 	.word	0x0000e854
    ed80:	0000e854 	.word	0x0000e854
    ed84:	0000e854 	.word	0x0000e854
    ed88:	0000e854 	.word	0x0000e854
    ed8c:	0000e854 	.word	0x0000e854
    ed90:	0000e854 	.word	0x0000e854
    ed94:	0000e854 	.word	0x0000e854
    ed98:	0000e854 	.word	0x0000e854
    ed9c:	0000e83c 	.word	0x0000e83c
    eda0:	e5947000 	ldr	r7, [r4]
    eda4:	e594c01c 	ldr	ip, [r4, #28]
    eda8:	e02cce97 	mla	ip, r7, lr, ip
    edac:	e7cc0002 	strb	r0, [ip, r2]
    edb0:	e5947008 	ldr	r7, [r4, #8]
    edb4:	e2477001 	sub	r7, r7, #1
    edb8:	eafffece 	b	e8f8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x574>
    edbc:	e594c000 	ldr	ip, [r4]
    edc0:	e594201c 	ldr	r2, [r4, #28]
    edc4:	e0222e9c 	mla	r2, ip, lr, r2
    edc8:	e7c20001 	strb	r0, [r2, r1]
    edcc:	eafffef0 	b	e994 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x610>
    edd0:	e594701c 	ldr	r7, [r4, #28]
    edd4:	e5948000 	ldr	r8, [r4]
    edd8:	e02c7c98 	mla	ip, r8, ip, r7
    eddc:	e7cc0001 	strb	r0, [ip, r1]
    ede0:	e5947008 	ldr	r7, [r4, #8]
    ede4:	e2477001 	sub	r7, r7, #1
    ede8:	eafffe99 	b	e854 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4d0>
    edec:	e5947000 	ldr	r7, [r4]
    edf0:	e3a08080 	mov	r8, #128	@ 0x80
    edf4:	e3500000 	cmp	r0, #0
    edf8:	e02c1c97 	mla	ip, r7, ip, r1
    edfc:	e594701c 	ldr	r7, [r4, #28]
    ee00:	e08771ac 	add	r7, r7, ip, lsr #3
    ee04:	e201c007 	and	ip, r1, #7
    ee08:	e1a0cc58 	asr	ip, r8, ip
    ee0c:	0a0002ad 	beq	f8c8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1544>
    ee10:	e6efc07c 	uxtb	ip, ip
    ee14:	e5d78000 	ldrb	r8, [r7]
    ee18:	e18cc008 	orr	ip, ip, r8
    ee1c:	e5c7c000 	strb	ip, [r7]
    ee20:	e5947008 	ldr	r7, [r4, #8]
    ee24:	e2477001 	sub	r7, r7, #1
    ee28:	e357001f 	cmp	r7, #31
    ee2c:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    ee30:	eafffeb0 	b	e8f8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x574>
    ee34:	0000f3fc 	.word	0x0000f3fc
    ee38:	0000e8f8 	.word	0x0000e8f8
    ee3c:	0000e8f8 	.word	0x0000e8f8
    ee40:	0000e8f8 	.word	0x0000e8f8
    ee44:	0000e8f8 	.word	0x0000e8f8
    ee48:	0000e8f8 	.word	0x0000e8f8
    ee4c:	0000e8f8 	.word	0x0000e8f8
    ee50:	0000eda0 	.word	0x0000eda0
    ee54:	0000e8f8 	.word	0x0000e8f8
    ee58:	0000e8f8 	.word	0x0000e8f8
    ee5c:	0000e8f8 	.word	0x0000e8f8
    ee60:	0000e8f8 	.word	0x0000e8f8
    ee64:	0000e8f8 	.word	0x0000e8f8
    ee68:	0000e8f8 	.word	0x0000e8f8
    ee6c:	0000e8f8 	.word	0x0000e8f8
    ee70:	0000efe4 	.word	0x0000efe4
    ee74:	0000e8f8 	.word	0x0000e8f8
    ee78:	0000e8f8 	.word	0x0000e8f8
    ee7c:	0000e8f8 	.word	0x0000e8f8
    ee80:	0000e8f8 	.word	0x0000e8f8
    ee84:	0000e8f8 	.word	0x0000e8f8
    ee88:	0000e8f8 	.word	0x0000e8f8
    ee8c:	0000e8f8 	.word	0x0000e8f8
    ee90:	0000e8f8 	.word	0x0000e8f8
    ee94:	0000e8f8 	.word	0x0000e8f8
    ee98:	0000e8f8 	.word	0x0000e8f8
    ee9c:	0000e8f8 	.word	0x0000e8f8
    eea0:	0000e8f8 	.word	0x0000e8f8
    eea4:	0000e8f8 	.word	0x0000e8f8
    eea8:	0000e8f8 	.word	0x0000e8f8
    eeac:	0000e8f8 	.word	0x0000e8f8
    eeb0:	0000e8e0 	.word	0x0000e8e0
    eeb4:	e594c000 	ldr	ip, [r4]
    eeb8:	e3a02080 	mov	r2, #128	@ 0x80
    eebc:	e3500000 	cmp	r0, #0
    eec0:	e02c1e9c 	mla	ip, ip, lr, r1
    eec4:	e2011007 	and	r1, r1, #7
    eec8:	e1a01152 	asr	r1, r2, r1
    eecc:	e594201c 	ldr	r2, [r4, #28]
    eed0:	e08221ac 	add	r2, r2, ip, lsr #3
    eed4:	0a000243 	beq	f7e8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1464>
    eed8:	e6ef1071 	uxtb	r1, r1
    eedc:	e5d2c000 	ldrb	ip, [r2]
    eee0:	e181100c 	orr	r1, r1, ip
    eee4:	e5c21000 	strb	r1, [r2]
    eee8:	eafffea9 	b	e994 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x610>
    eeec:	e5947000 	ldr	r7, [r4]
    eef0:	e3a0c080 	mov	ip, #128	@ 0x80
    eef4:	e3500000 	cmp	r0, #0
    eef8:	e0272e97 	mla	r7, r7, lr, r2
    eefc:	e2022007 	and	r2, r2, #7
    ef00:	e1a0225c 	asr	r2, ip, r2
    ef04:	e594c01c 	ldr	ip, [r4, #28]
    ef08:	e08cc1a7 	add	ip, ip, r7, lsr #3
    ef0c:	0a000206 	beq	f72c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x13a8>
    ef10:	e6ef2072 	uxtb	r2, r2
    ef14:	e5dc7000 	ldrb	r7, [ip]
    ef18:	e1822007 	orr	r2, r2, r7
    ef1c:	e5cc2000 	strb	r2, [ip]
    ef20:	e5942008 	ldr	r2, [r4, #8]
    ef24:	e2422001 	sub	r2, r2, #1
    ef28:	e352001f 	cmp	r2, #31
    ef2c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    ef30:	eafffe97 	b	e994 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x610>
    ef34:	0000f3b4 	.word	0x0000f3b4
    ef38:	0000e994 	.word	0x0000e994
    ef3c:	0000e994 	.word	0x0000e994
    ef40:	0000e994 	.word	0x0000e994
    ef44:	0000e994 	.word	0x0000e994
    ef48:	0000e994 	.word	0x0000e994
    ef4c:	0000e994 	.word	0x0000e994
    ef50:	0000edbc 	.word	0x0000edbc
    ef54:	0000e994 	.word	0x0000e994
    ef58:	0000e994 	.word	0x0000e994
    ef5c:	0000e994 	.word	0x0000e994
    ef60:	0000e994 	.word	0x0000e994
    ef64:	0000e994 	.word	0x0000e994
    ef68:	0000e994 	.word	0x0000e994
    ef6c:	0000e994 	.word	0x0000e994
    ef70:	0000efb4 	.word	0x0000efb4
    ef74:	0000e994 	.word	0x0000e994
    ef78:	0000e994 	.word	0x0000e994
    ef7c:	0000e994 	.word	0x0000e994
    ef80:	0000e994 	.word	0x0000e994
    ef84:	0000e994 	.word	0x0000e994
    ef88:	0000e994 	.word	0x0000e994
    ef8c:	0000e994 	.word	0x0000e994
    ef90:	0000e994 	.word	0x0000e994
    ef94:	0000e994 	.word	0x0000e994
    ef98:	0000e994 	.word	0x0000e994
    ef9c:	0000e994 	.word	0x0000e994
    efa0:	0000e994 	.word	0x0000e994
    efa4:	0000e994 	.word	0x0000e994
    efa8:	0000e994 	.word	0x0000e994
    efac:	0000e994 	.word	0x0000e994
    efb0:	0000e984 	.word	0x0000e984
    efb4:	e5942000 	ldr	r2, [r4]
    efb8:	e6ff8070 	uxth	r8, r0
    efbc:	e594701c 	ldr	r7, [r4, #28]
    efc0:	e58d2008 	str	r2, [sp, #8]
    efc4:	e00c0e92 	mul	ip, r2, lr
    efc8:	eaffff1e 	b	ec48 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8c4>
    efcc:	e5947000 	ldr	r7, [r4]
    efd0:	e6ff8070 	uxth	r8, r0
    efd4:	e58d7008 	str	r7, [sp, #8]
    efd8:	e00c0c97 	mul	ip, r7, ip
    efdc:	e594701c 	ldr	r7, [r4, #28]
    efe0:	eaffff10 	b	ec28 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8a4>
    efe4:	e594c000 	ldr	ip, [r4]
    efe8:	e6ff8070 	uxth	r8, r0
    efec:	e594701c 	ldr	r7, [r4, #28]
    eff0:	e58dc008 	str	ip, [sp, #8]
    eff4:	eaffff0e 	b	ec34 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8b0>
    eff8:	e5947000 	ldr	r7, [r4]
    effc:	e594c01c 	ldr	ip, [r4, #28]
    f000:	e02cc197 	mla	ip, r7, r1, ip
    f004:	e7cc0002 	strb	r0, [ip, r2]
    f008:	e5947008 	ldr	r7, [r4, #8]
    f00c:	e247c001 	sub	ip, r7, #1
    f010:	eafffe90 	b	ea58 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x6d4>
    f014:	e594c000 	ldr	ip, [r4]
    f018:	e3a08080 	mov	r8, #128	@ 0x80
    f01c:	e594901c 	ldr	r9, [r4, #28]
    f020:	e2027007 	and	r7, r2, #7
    f024:	e3500000 	cmp	r0, #0
    f028:	e1a07758 	asr	r7, r8, r7
    f02c:	e02c219c 	mla	ip, ip, r1, r2
    f030:	e7d981ac 	ldrb	r8, [r9, ip, lsr #3]
    f034:	0a000298 	beq	fa9c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1718>
    f038:	e1888007 	orr	r8, r8, r7
    f03c:	e7c981ac 	strb	r8, [r9, ip, lsr #3]
    f040:	e5947008 	ldr	r7, [r4, #8]
    f044:	e247c001 	sub	ip, r7, #1
    f048:	e35c001f 	cmp	ip, #31
    f04c:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    f050:	eafffea9 	b	eafc <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x778>
    f054:	0000f444 	.word	0x0000f444
    f058:	0000eafc 	.word	0x0000eafc
    f05c:	0000eafc 	.word	0x0000eafc
    f060:	0000eafc 	.word	0x0000eafc
    f064:	0000eafc 	.word	0x0000eafc
    f068:	0000eafc 	.word	0x0000eafc
    f06c:	0000eafc 	.word	0x0000eafc
    f070:	0000f0e8 	.word	0x0000f0e8
    f074:	0000eafc 	.word	0x0000eafc
    f078:	0000eafc 	.word	0x0000eafc
    f07c:	0000eafc 	.word	0x0000eafc
    f080:	0000eafc 	.word	0x0000eafc
    f084:	0000eafc 	.word	0x0000eafc
    f088:	0000eafc 	.word	0x0000eafc
    f08c:	0000eafc 	.word	0x0000eafc
    f090:	0000f358 	.word	0x0000f358
    f094:	0000eafc 	.word	0x0000eafc
    f098:	0000eafc 	.word	0x0000eafc
    f09c:	0000eafc 	.word	0x0000eafc
    f0a0:	0000eafc 	.word	0x0000eafc
    f0a4:	0000eafc 	.word	0x0000eafc
    f0a8:	0000eafc 	.word	0x0000eafc
    f0ac:	0000eafc 	.word	0x0000eafc
    f0b0:	0000eafc 	.word	0x0000eafc
    f0b4:	0000eafc 	.word	0x0000eafc
    f0b8:	0000eafc 	.word	0x0000eafc
    f0bc:	0000eafc 	.word	0x0000eafc
    f0c0:	0000eafc 	.word	0x0000eafc
    f0c4:	0000eafc 	.word	0x0000eafc
    f0c8:	0000eafc 	.word	0x0000eafc
    f0cc:	0000eafc 	.word	0x0000eafc
    f0d0:	0000eae4 	.word	0x0000eae4
    f0d4:	e594c000 	ldr	ip, [r4]
    f0d8:	e6ff8070 	uxth	r8, r0
    f0dc:	e594701c 	ldr	r7, [r4, #28]
    f0e0:	e58dc008 	str	ip, [sp, #8]
    f0e4:	eafffee0 	b	ec6c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8e8>
    f0e8:	e5947000 	ldr	r7, [r4]
    f0ec:	e594c01c 	ldr	ip, [r4, #28]
    f0f0:	e021c197 	mla	r1, r7, r1, ip
    f0f4:	e7c1000a 	strb	r0, [r1, sl]
    f0f8:	e5947008 	ldr	r7, [r4, #8]
    f0fc:	e247c001 	sub	ip, r7, #1
    f100:	eafffe7d 	b	eafc <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x778>
    f104:	e594c000 	ldr	ip, [r4]
    f108:	e022219c 	mla	r2, ip, r1, r2
    f10c:	e594c01c 	ldr	ip, [r4, #28]
    f110:	e78c0102 	str	r0, [ip, r2, lsl #2]
    f114:	e5942008 	ldr	r2, [r4, #8]
    f118:	e2422001 	sub	r2, r2, #1
    f11c:	e352001f 	cmp	r2, #31
    f120:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    f124:	ea000023 	b	f1b8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xe34>
    f128:	0000f1c0 	.word	0x0000f1c0
    f12c:	0000f1b8 	.word	0x0000f1b8
    f130:	0000f1b8 	.word	0x0000f1b8
    f134:	0000f1b8 	.word	0x0000f1b8
    f138:	0000f1b8 	.word	0x0000f1b8
    f13c:	0000f1b8 	.word	0x0000f1b8
    f140:	0000f1b8 	.word	0x0000f1b8
    f144:	0000f1f4 	.word	0x0000f1f4
    f148:	0000f1b8 	.word	0x0000f1b8
    f14c:	0000f1b8 	.word	0x0000f1b8
    f150:	0000f1b8 	.word	0x0000f1b8
    f154:	0000f1b8 	.word	0x0000f1b8
    f158:	0000f1b8 	.word	0x0000f1b8
    f15c:	0000f1b8 	.word	0x0000f1b8
    f160:	0000f1b8 	.word	0x0000f1b8
    f164:	0000f344 	.word	0x0000f344
    f168:	0000f1b8 	.word	0x0000f1b8
    f16c:	0000f1b8 	.word	0x0000f1b8
    f170:	0000f1b8 	.word	0x0000f1b8
    f174:	0000f1b8 	.word	0x0000f1b8
    f178:	0000f1b8 	.word	0x0000f1b8
    f17c:	0000f1b8 	.word	0x0000f1b8
    f180:	0000f1b8 	.word	0x0000f1b8
    f184:	0000f1b8 	.word	0x0000f1b8
    f188:	0000f1b8 	.word	0x0000f1b8
    f18c:	0000f1b8 	.word	0x0000f1b8
    f190:	0000f1b8 	.word	0x0000f1b8
    f194:	0000f1b8 	.word	0x0000f1b8
    f198:	0000f1b8 	.word	0x0000f1b8
    f19c:	0000f1b8 	.word	0x0000f1b8
    f1a0:	0000f1b8 	.word	0x0000f1b8
    f1a4:	0000f1a8 	.word	0x0000f1a8
    f1a8:	e5942000 	ldr	r2, [r4]
    f1ac:	e022a192 	mla	r2, r2, r1, sl
    f1b0:	e594101c 	ldr	r1, [r4, #28]
    f1b4:	e7810102 	str	r0, [r1, r2, lsl #2]
    f1b8:	e24ee001 	sub	lr, lr, #1
    f1bc:	eafffd43 	b	e6d0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x34c>
    f1c0:	e5942000 	ldr	r2, [r4]
    f1c4:	e3a0c080 	mov	ip, #128	@ 0x80
    f1c8:	e594701c 	ldr	r7, [r4, #28]
    f1cc:	e3500000 	cmp	r0, #0
    f1d0:	e24ee001 	sub	lr, lr, #1
    f1d4:	e022a192 	mla	r2, r2, r1, sl
    f1d8:	e20a1007 	and	r1, sl, #7
    f1dc:	e1a0115c 	asr	r1, ip, r1
    f1e0:	e7d7c1a2 	ldrb	ip, [r7, r2, lsr #3]
    f1e4:	118cc001 	orrne	ip, ip, r1
    f1e8:	01ccc001 	biceq	ip, ip, r1
    f1ec:	e7c7c1a2 	strb	ip, [r7, r2, lsr #3]
    f1f0:	eafffd36 	b	e6d0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x34c>
    f1f4:	e594c000 	ldr	ip, [r4]
    f1f8:	e24ee001 	sub	lr, lr, #1
    f1fc:	e594201c 	ldr	r2, [r4, #28]
    f200:	e022219c 	mla	r2, ip, r1, r2
    f204:	e7c2000a 	strb	r0, [r2, sl]
    f208:	eafffd30 	b	e6d0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x34c>
    f20c:	e5947000 	ldr	r7, [r4]
    f210:	e594c01c 	ldr	ip, [r4, #28]
    f214:	e02cc197 	mla	ip, r7, r1, ip
    f218:	e7cc0002 	strb	r0, [ip, r2]
    f21c:	e5942008 	ldr	r2, [r4, #8]
    f220:	eaffffbc 	b	f118 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xd94>
    f224:	e5947000 	ldr	r7, [r4]
    f228:	e3a0c080 	mov	ip, #128	@ 0x80
    f22c:	e3500000 	cmp	r0, #0
    f230:	e0272197 	mla	r7, r7, r1, r2
    f234:	e2022007 	and	r2, r2, #7
    f238:	e1a0225c 	asr	r2, ip, r2
    f23c:	e594c01c 	ldr	ip, [r4, #28]
    f240:	e08cc1a7 	add	ip, ip, r7, lsr #3
    f244:	0a0001d9 	beq	f9b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x162c>
    f248:	e6ef7072 	uxtb	r7, r2
    f24c:	e5dc2000 	ldrb	r2, [ip]
    f250:	e1872002 	orr	r2, r7, r2
    f254:	e5cc2000 	strb	r2, [ip]
    f258:	e5942008 	ldr	r2, [r4, #8]
    f25c:	eaffffad 	b	f118 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xd94>
    f260:	e594c000 	ldr	ip, [r4]
    f264:	e3a07080 	mov	r7, #128	@ 0x80
    f268:	e3500000 	cmp	r0, #0
    f26c:	e02ca19c 	mla	ip, ip, r1, sl
    f270:	e594101c 	ldr	r1, [r4, #28]
    f274:	e08111ac 	add	r1, r1, ip, lsr #3
    f278:	e20ac007 	and	ip, sl, #7
    f27c:	e1a0cc57 	asr	ip, r7, ip
    f280:	0a0001d6 	beq	f9e0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x165c>
    f284:	e6efc07c 	uxtb	ip, ip
    f288:	e5d17000 	ldrb	r7, [r1]
    f28c:	e18cc007 	orr	ip, ip, r7
    f290:	e5c1c000 	strb	ip, [r1]
    f294:	e59d1004 	ldr	r1, [sp, #4]
    f298:	e5947008 	ldr	r7, [r4, #8]
    f29c:	e0411005 	sub	r1, r1, r5
    f2a0:	e247c001 	sub	ip, r7, #1
    f2a4:	e35c001f 	cmp	ip, #31
    f2a8:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    f2ac:	eafffe37 	b	eb90 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x80c>
    f2b0:	0000f420 	.word	0x0000f420
    f2b4:	0000eb90 	.word	0x0000eb90
    f2b8:	0000eb90 	.word	0x0000eb90
    f2bc:	0000eb90 	.word	0x0000eb90
    f2c0:	0000eb90 	.word	0x0000eb90
    f2c4:	0000eb90 	.word	0x0000eb90
    f2c8:	0000eb90 	.word	0x0000eb90
    f2cc:	0000f20c 	.word	0x0000f20c
    f2d0:	0000eb90 	.word	0x0000eb90
    f2d4:	0000eb90 	.word	0x0000eb90
    f2d8:	0000eb90 	.word	0x0000eb90
    f2dc:	0000eb90 	.word	0x0000eb90
    f2e0:	0000eb90 	.word	0x0000eb90
    f2e4:	0000eb90 	.word	0x0000eb90
    f2e8:	0000eb90 	.word	0x0000eb90
    f2ec:	0000f330 	.word	0x0000f330
    f2f0:	0000eb90 	.word	0x0000eb90
    f2f4:	0000eb90 	.word	0x0000eb90
    f2f8:	0000eb90 	.word	0x0000eb90
    f2fc:	0000eb90 	.word	0x0000eb90
    f300:	0000eb90 	.word	0x0000eb90
    f304:	0000eb90 	.word	0x0000eb90
    f308:	0000eb90 	.word	0x0000eb90
    f30c:	0000eb90 	.word	0x0000eb90
    f310:	0000eb90 	.word	0x0000eb90
    f314:	0000eb90 	.word	0x0000eb90
    f318:	0000eb90 	.word	0x0000eb90
    f31c:	0000eb90 	.word	0x0000eb90
    f320:	0000eb90 	.word	0x0000eb90
    f324:	0000eb90 	.word	0x0000eb90
    f328:	0000eb90 	.word	0x0000eb90
    f32c:	0000f104 	.word	0x0000f104
    f330:	e594c000 	ldr	ip, [r4]
    f334:	e6ff8070 	uxth	r8, r0
    f338:	e594701c 	ldr	r7, [r4, #28]
    f33c:	e58dc008 	str	ip, [sp, #8]
    f340:	eafffe53 	b	ec94 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x910>
    f344:	e5942000 	ldr	r2, [r4]
    f348:	e6ff8070 	uxth	r8, r0
    f34c:	e594701c 	ldr	r7, [r4, #28]
    f350:	e0010192 	mul	r1, r2, r1
    f354:	eafffe53 	b	eca8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x924>
    f358:	e594c000 	ldr	ip, [r4]
    f35c:	e6ff8070 	uxth	r8, r0
    f360:	e594701c 	ldr	r7, [r4, #28]
    f364:	e58dc008 	str	ip, [sp, #8]
    f368:	e001019c 	mul	r1, ip, r1
    f36c:	eafffe43 	b	ec80 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8fc>
    f370:	e5943000 	ldr	r3, [r4]
    f374:	e594201c 	ldr	r2, [r4, #28]
    f378:	e0238793 	mla	r3, r3, r7, r8
    f37c:	e7820103 	str	r0, [r2, r3, lsl #2]
    f380:	eafffc41 	b	e48c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x108>
    f384:	e5943000 	ldr	r3, [r4]
    f388:	e2081007 	and	r1, r8, #7
    f38c:	e594c01c 	ldr	ip, [r4, #28]
    f390:	e3a02080 	mov	r2, #128	@ 0x80
    f394:	e3500000 	cmp	r0, #0
    f398:	e1a02152 	asr	r2, r2, r1
    f39c:	e0238793 	mla	r3, r3, r7, r8
    f3a0:	e7dc11a3 	ldrb	r1, [ip, r3, lsr #3]
    f3a4:	11811002 	orrne	r1, r1, r2
    f3a8:	01c11002 	biceq	r1, r1, r2
    f3ac:	e7cc11a3 	strb	r1, [ip, r3, lsr #3]
    f3b0:	eafffc35 	b	e48c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x108>
    f3b4:	e594c000 	ldr	ip, [r4]
    f3b8:	e2012007 	and	r2, r1, #7
    f3bc:	e02c1e9c 	mla	ip, ip, lr, r1
    f3c0:	e3a01080 	mov	r1, #128	@ 0x80
    f3c4:	e1a01251 	asr	r1, r1, r2
    f3c8:	e594201c 	ldr	r2, [r4, #28]
    f3cc:	e6ef1071 	uxtb	r1, r1
    f3d0:	e08221ac 	add	r2, r2, ip, lsr #3
    f3d4:	eafffec0 	b	eedc <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xb58>
    f3d8:	e5948000 	ldr	r8, [r4]
    f3dc:	e2017007 	and	r7, r1, #7
    f3e0:	e0281c98 	mla	r8, r8, ip, r1
    f3e4:	e3a0c080 	mov	ip, #128	@ 0x80
    f3e8:	e1a0c75c 	asr	ip, ip, r7
    f3ec:	e594701c 	ldr	r7, [r4, #28]
    f3f0:	e6efc07c 	uxtb	ip, ip
    f3f4:	e08771a8 	add	r7, r7, r8, lsr #3
    f3f8:	eafffe85 	b	ee14 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xa90>
    f3fc:	e5947000 	ldr	r7, [r4]
    f400:	e202c007 	and	ip, r2, #7
    f404:	e0272e97 	mla	r7, r7, lr, r2
    f408:	e3a02080 	mov	r2, #128	@ 0x80
    f40c:	e1a02c52 	asr	r2, r2, ip
    f410:	e594c01c 	ldr	ip, [r4, #28]
    f414:	e6ef2072 	uxtb	r2, r2
    f418:	e08cc1a7 	add	ip, ip, r7, lsr #3
    f41c:	eafffebc 	b	ef14 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xb90>
    f420:	e5948000 	ldr	r8, [r4]
    f424:	e202c007 	and	ip, r2, #7
    f428:	e0282198 	mla	r8, r8, r1, r2
    f42c:	e3a02080 	mov	r2, #128	@ 0x80
    f430:	e1a02c52 	asr	r2, r2, ip
    f434:	e594c01c 	ldr	ip, [r4, #28]
    f438:	e6ef7072 	uxtb	r7, r2
    f43c:	e08cc1a8 	add	ip, ip, r8, lsr #3
    f440:	eaffff81 	b	f24c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xec8>
    f444:	e5947000 	ldr	r7, [r4]
    f448:	e3a0c080 	mov	ip, #128	@ 0x80
    f44c:	e027a197 	mla	r7, r7, r1, sl
    f450:	e20a1007 	and	r1, sl, #7
    f454:	e1a0c15c 	asr	ip, ip, r1
    f458:	e594101c 	ldr	r1, [r4, #28]
    f45c:	e6efc07c 	uxtb	ip, ip
    f460:	e08111a7 	add	r1, r1, r7, lsr #3
    f464:	eaffff87 	b	f288 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xf04>
    f468:	e5942000 	ldr	r2, [r4]
    f46c:	e594301c 	ldr	r3, [r4, #28]
    f470:	e0233a92 	mla	r3, r2, sl, r3
    f474:	e7c30006 	strb	r0, [r3, r6]
    f478:	e5943008 	ldr	r3, [r4, #8]
    f47c:	e2433001 	sub	r3, r3, #1
    f480:	eafffc2e 	b	e540 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1bc>
    f484:	e5943000 	ldr	r3, [r4]
    f488:	e2061007 	and	r1, r6, #7
    f48c:	e594c01c 	ldr	ip, [r4, #28]
    f490:	e3a02080 	mov	r2, #128	@ 0x80
    f494:	e3500000 	cmp	r0, #0
    f498:	e1a02152 	asr	r2, r2, r1
    f49c:	e0236a93 	mla	r3, r3, sl, r6
    f4a0:	e7dc11a3 	ldrb	r1, [ip, r3, lsr #3]
    f4a4:	0a0001e7 	beq	fc48 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x18c4>
    f4a8:	e1811002 	orr	r1, r1, r2
    f4ac:	e7cc11a3 	strb	r1, [ip, r3, lsr #3]
    f4b0:	e5943008 	ldr	r3, [r4, #8]
    f4b4:	e2433001 	sub	r3, r3, #1
    f4b8:	e353001f 	cmp	r3, #31
    f4bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f4c0:	eafffc47 	b	e5e4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x260>
    f4c4:	0000f6ec 	.word	0x0000f6ec
    f4c8:	0000e5e4 	.word	0x0000e5e4
    f4cc:	0000e5e4 	.word	0x0000e5e4
    f4d0:	0000e5e4 	.word	0x0000e5e4
    f4d4:	0000e5e4 	.word	0x0000e5e4
    f4d8:	0000e5e4 	.word	0x0000e5e4
    f4dc:	0000e5e4 	.word	0x0000e5e4
    f4e0:	0000f55c 	.word	0x0000f55c
    f4e4:	0000e5e4 	.word	0x0000e5e4
    f4e8:	0000e5e4 	.word	0x0000e5e4
    f4ec:	0000e5e4 	.word	0x0000e5e4
    f4f0:	0000e5e4 	.word	0x0000e5e4
    f4f4:	0000e5e4 	.word	0x0000e5e4
    f4f8:	0000e5e4 	.word	0x0000e5e4
    f4fc:	0000e5e4 	.word	0x0000e5e4
    f500:	0000f6a0 	.word	0x0000f6a0
    f504:	0000e5e4 	.word	0x0000e5e4
    f508:	0000e5e4 	.word	0x0000e5e4
    f50c:	0000e5e4 	.word	0x0000e5e4
    f510:	0000e5e4 	.word	0x0000e5e4
    f514:	0000e5e4 	.word	0x0000e5e4
    f518:	0000e5e4 	.word	0x0000e5e4
    f51c:	0000e5e4 	.word	0x0000e5e4
    f520:	0000e5e4 	.word	0x0000e5e4
    f524:	0000e5e4 	.word	0x0000e5e4
    f528:	0000e5e4 	.word	0x0000e5e4
    f52c:	0000e5e4 	.word	0x0000e5e4
    f530:	0000e5e4 	.word	0x0000e5e4
    f534:	0000e5e4 	.word	0x0000e5e4
    f538:	0000e5e4 	.word	0x0000e5e4
    f53c:	0000e5e4 	.word	0x0000e5e4
    f540:	0000e5cc 	.word	0x0000e5cc
    f544:	e5943000 	ldr	r3, [r4]
    f548:	e6ff1070 	uxth	r1, r0
    f54c:	e594201c 	ldr	r2, [r4, #28]
    f550:	e0288793 	mla	r8, r3, r7, r8
    f554:	e0828088 	add	r8, r2, r8, lsl #1
    f558:	eafffc4d 	b	e694 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x310>
    f55c:	e5942000 	ldr	r2, [r4]
    f560:	e594301c 	ldr	r3, [r4, #28]
    f564:	e0233792 	mla	r3, r2, r7, r3
    f568:	e7c30008 	strb	r0, [r3, r8]
    f56c:	e5943008 	ldr	r3, [r4, #8]
    f570:	e2433001 	sub	r3, r3, #1
    f574:	eafffc1a 	b	e5e4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x260>
    f578:	e5943000 	ldr	r3, [r4]
    f57c:	e594201c 	ldr	r2, [r4, #28]
    f580:	e0236993 	mla	r3, r3, r9, r6
    f584:	e7820103 	str	r0, [r2, r3, lsl #2]
    f588:	eafffc48 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    f58c:	e5942000 	ldr	r2, [r4]
    f590:	e594301c 	ldr	r3, [r4, #28]
    f594:	e0233992 	mla	r3, r2, r9, r3
    f598:	e7c30006 	strb	r0, [r3, r6]
    f59c:	eafffc43 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    f5a0:	e5943000 	ldr	r3, [r4]
    f5a4:	e2061007 	and	r1, r6, #7
    f5a8:	e594201c 	ldr	r2, [r4, #28]
    f5ac:	e3500000 	cmp	r0, #0
    f5b0:	e0236993 	mla	r3, r3, r9, r6
    f5b4:	e08221a3 	add	r2, r2, r3, lsr #3
    f5b8:	e3a03080 	mov	r3, #128	@ 0x80
    f5bc:	e1a03153 	asr	r3, r3, r1
    f5c0:	0a000169 	beq	fb6c <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x17e8>
    f5c4:	e6ef3073 	uxtb	r3, r3
    f5c8:	e5d21000 	ldrb	r1, [r2]
    f5cc:	e1833001 	orr	r3, r3, r1
    f5d0:	e5c23000 	strb	r3, [r2]
    f5d4:	eafffc35 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    f5d8:	e5943000 	ldr	r3, [r4]
    f5dc:	e3500000 	cmp	r0, #0
    f5e0:	e594201c 	ldr	r2, [r4, #28]
    f5e4:	e0238793 	mla	r3, r3, r7, r8
    f5e8:	e2088007 	and	r8, r8, #7
    f5ec:	e08221a3 	add	r2, r2, r3, lsr #3
    f5f0:	e3a03080 	mov	r3, #128	@ 0x80
    f5f4:	e1a03853 	asr	r3, r3, r8
    f5f8:	0a000166 	beq	fb98 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1814>
    f5fc:	e6ef3073 	uxtb	r3, r3
    f600:	e5d21000 	ldrb	r1, [r2]
    f604:	e1833001 	orr	r3, r3, r1
    f608:	e5c23000 	strb	r3, [r2]
    f60c:	e5943008 	ldr	r3, [r4, #8]
    f610:	e2433001 	sub	r3, r3, #1
    f614:	e353001f 	cmp	r3, #31
    f618:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f61c:	eafffc23 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    f620:	0000f6c8 	.word	0x0000f6c8
    f624:	0000e6b0 	.word	0x0000e6b0
    f628:	0000e6b0 	.word	0x0000e6b0
    f62c:	0000e6b0 	.word	0x0000e6b0
    f630:	0000e6b0 	.word	0x0000e6b0
    f634:	0000e6b0 	.word	0x0000e6b0
    f638:	0000e6b0 	.word	0x0000e6b0
    f63c:	0000f58c 	.word	0x0000f58c
    f640:	0000e6b0 	.word	0x0000e6b0
    f644:	0000e6b0 	.word	0x0000e6b0
    f648:	0000e6b0 	.word	0x0000e6b0
    f64c:	0000e6b0 	.word	0x0000e6b0
    f650:	0000e6b0 	.word	0x0000e6b0
    f654:	0000e6b0 	.word	0x0000e6b0
    f658:	0000e6b0 	.word	0x0000e6b0
    f65c:	0000f6b8 	.word	0x0000f6b8
    f660:	0000e6b0 	.word	0x0000e6b0
    f664:	0000e6b0 	.word	0x0000e6b0
    f668:	0000e6b0 	.word	0x0000e6b0
    f66c:	0000e6b0 	.word	0x0000e6b0
    f670:	0000e6b0 	.word	0x0000e6b0
    f674:	0000e6b0 	.word	0x0000e6b0
    f678:	0000e6b0 	.word	0x0000e6b0
    f67c:	0000e6b0 	.word	0x0000e6b0
    f680:	0000e6b0 	.word	0x0000e6b0
    f684:	0000e6b0 	.word	0x0000e6b0
    f688:	0000e6b0 	.word	0x0000e6b0
    f68c:	0000e6b0 	.word	0x0000e6b0
    f690:	0000e6b0 	.word	0x0000e6b0
    f694:	0000e6b0 	.word	0x0000e6b0
    f698:	0000e6b0 	.word	0x0000e6b0
    f69c:	0000f578 	.word	0x0000f578
    f6a0:	e5943000 	ldr	r3, [r4]
    f6a4:	e6ff1070 	uxth	r1, r0
    f6a8:	e594201c 	ldr	r2, [r4, #28]
    f6ac:	e0288793 	mla	r8, r3, r7, r8
    f6b0:	e0828088 	add	r8, r2, r8, lsl #1
    f6b4:	eafffbf9 	b	e6a0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x31c>
    f6b8:	e594201c 	ldr	r2, [r4, #28]
    f6bc:	e6ff1070 	uxth	r1, r0
    f6c0:	e5943000 	ldr	r3, [r4]
    f6c4:	eafffbf6 	b	e6a4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x320>
    f6c8:	e5941000 	ldr	r1, [r4]
    f6cc:	e2062007 	and	r2, r6, #7
    f6d0:	e3a03080 	mov	r3, #128	@ 0x80
    f6d4:	e1a03253 	asr	r3, r3, r2
    f6d8:	e594201c 	ldr	r2, [r4, #28]
    f6dc:	e0216991 	mla	r1, r1, r9, r6
    f6e0:	e6ef3073 	uxtb	r3, r3
    f6e4:	e08221a1 	add	r2, r2, r1, lsr #3
    f6e8:	eaffffb6 	b	f5c8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x1244>
    f6ec:	e5941000 	ldr	r1, [r4]
    f6f0:	e3a03080 	mov	r3, #128	@ 0x80
    f6f4:	e594201c 	ldr	r2, [r4, #28]
    f6f8:	e0218791 	mla	r1, r1, r7, r8
    f6fc:	e2088007 	and	r8, r8, #7
    f700:	e1a03853 	asr	r3, r3, r8
    f704:	e08221a1 	add	r2, r2, r1, lsr #3
    f708:	e6ef3073 	uxtb	r3, r3
    f70c:	eaffffbb 	b	f600 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x127c>
    f710:	e5947000 	ldr	r7, [r4]
    f714:	e2028007 	and	r8, r2, #7
    f718:	e594c01c 	ldr	ip, [r4, #28]
    f71c:	e0272e97 	mla	r7, r7, lr, r2
    f720:	e3a02080 	mov	r2, #128	@ 0x80
    f724:	e1a02852 	asr	r2, r2, r8
    f728:	e08cc1a7 	add	ip, ip, r7, lsr #3
    f72c:	e5dc7000 	ldrb	r7, [ip]
    f730:	e1c72002 	bic	r2, r7, r2
    f734:	e5cc2000 	strb	r2, [ip]
    f738:	e5942008 	ldr	r2, [r4, #8]
    f73c:	e2422001 	sub	r2, r2, #1
    f740:	e352001f 	cmp	r2, #31
    f744:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    f748:	eafffc91 	b	e994 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x610>
    f74c:	0000f7cc 	.word	0x0000f7cc
    f750:	0000e994 	.word	0x0000e994
    f754:	0000e994 	.word	0x0000e994
    f758:	0000e994 	.word	0x0000e994
    f75c:	0000e994 	.word	0x0000e994
    f760:	0000e994 	.word	0x0000e994
    f764:	0000e994 	.word	0x0000e994
    f768:	0000edbc 	.word	0x0000edbc
    f76c:	0000e994 	.word	0x0000e994
    f770:	0000e994 	.word	0x0000e994
    f774:	0000e994 	.word	0x0000e994
    f778:	0000e994 	.word	0x0000e994
    f77c:	0000e994 	.word	0x0000e994
    f780:	0000e994 	.word	0x0000e994
    f784:	0000e994 	.word	0x0000e994
    f788:	0000f7f8 	.word	0x0000f7f8
    f78c:	0000e994 	.word	0x0000e994
    f790:	0000e994 	.word	0x0000e994
    f794:	0000e994 	.word	0x0000e994
    f798:	0000e994 	.word	0x0000e994
    f79c:	0000e994 	.word	0x0000e994
    f7a0:	0000e994 	.word	0x0000e994
    f7a4:	0000e994 	.word	0x0000e994
    f7a8:	0000e994 	.word	0x0000e994
    f7ac:	0000e994 	.word	0x0000e994
    f7b0:	0000e994 	.word	0x0000e994
    f7b4:	0000e994 	.word	0x0000e994
    f7b8:	0000e994 	.word	0x0000e994
    f7bc:	0000e994 	.word	0x0000e994
    f7c0:	0000e994 	.word	0x0000e994
    f7c4:	0000e994 	.word	0x0000e994
    f7c8:	0000e984 	.word	0x0000e984
    f7cc:	e594c000 	ldr	ip, [r4]
    f7d0:	e2017007 	and	r7, r1, #7
    f7d4:	e594201c 	ldr	r2, [r4, #28]
    f7d8:	e02c1e9c 	mla	ip, ip, lr, r1
    f7dc:	e3a01080 	mov	r1, #128	@ 0x80
    f7e0:	e1a01751 	asr	r1, r1, r7
    f7e4:	e08221ac 	add	r2, r2, ip, lsr #3
    f7e8:	e5d2c000 	ldrb	ip, [r2]
    f7ec:	e1cc1001 	bic	r1, ip, r1
    f7f0:	e5c21000 	strb	r1, [r2]
    f7f4:	eafffc66 	b	e994 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x610>
    f7f8:	e5942000 	ldr	r2, [r4]
    f7fc:	e3a08000 	mov	r8, #0
    f800:	e594701c 	ldr	r7, [r4, #28]
    f804:	e58d2008 	str	r2, [sp, #8]
    f808:	e00c0e92 	mul	ip, r2, lr
    f80c:	eafffd0d 	b	ec48 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8c4>
    f810:	e1c88009 	bic	r8, r8, r9
    f814:	e7ca81a7 	strb	r8, [sl, r7, lsr #3]
    f818:	e5947008 	ldr	r7, [r4, #8]
    f81c:	e2477001 	sub	r7, r7, #1
    f820:	e357001f 	cmp	r7, #31
    f824:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    f828:	eafffc09 	b	e854 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x4d0>
    f82c:	0000f8ac 	.word	0x0000f8ac
    f830:	0000e854 	.word	0x0000e854
    f834:	0000e854 	.word	0x0000e854
    f838:	0000e854 	.word	0x0000e854
    f83c:	0000e854 	.word	0x0000e854
    f840:	0000e854 	.word	0x0000e854
    f844:	0000e854 	.word	0x0000e854
    f848:	0000edd0 	.word	0x0000edd0
    f84c:	0000e854 	.word	0x0000e854
    f850:	0000e854 	.word	0x0000e854
    f854:	0000e854 	.word	0x0000e854
    f858:	0000e854 	.word	0x0000e854
    f85c:	0000e854 	.word	0x0000e854
    f860:	0000e854 	.word	0x0000e854
    f864:	0000e854 	.word	0x0000e854
    f868:	0000f968 	.word	0x0000f968
    f86c:	0000e854 	.word	0x0000e854
    f870:	0000e854 	.word	0x0000e854
    f874:	0000e854 	.word	0x0000e854
    f878:	0000e854 	.word	0x0000e854
    f87c:	0000e854 	.word	0x0000e854
    f880:	0000e854 	.word	0x0000e854
    f884:	0000e854 	.word	0x0000e854
    f888:	0000e854 	.word	0x0000e854
    f88c:	0000e854 	.word	0x0000e854
    f890:	0000e854 	.word	0x0000e854
    f894:	0000e854 	.word	0x0000e854
    f898:	0000e854 	.word	0x0000e854
    f89c:	0000e854 	.word	0x0000e854
    f8a0:	0000e854 	.word	0x0000e854
    f8a4:	0000e854 	.word	0x0000e854
    f8a8:	0000e83c 	.word	0x0000e83c
    f8ac:	e5947000 	ldr	r7, [r4]
    f8b0:	e2018007 	and	r8, r1, #7
    f8b4:	e02c1c97 	mla	ip, r7, ip, r1
    f8b8:	e594701c 	ldr	r7, [r4, #28]
    f8bc:	e08771ac 	add	r7, r7, ip, lsr #3
    f8c0:	e3a0c080 	mov	ip, #128	@ 0x80
    f8c4:	e1a0c85c 	asr	ip, ip, r8
    f8c8:	e5d78000 	ldrb	r8, [r7]
    f8cc:	e1c8c00c 	bic	ip, r8, ip
    f8d0:	e5c7c000 	strb	ip, [r7]
    f8d4:	e5947008 	ldr	r7, [r4, #8]
    f8d8:	e2477001 	sub	r7, r7, #1
    f8dc:	e357001f 	cmp	r7, #31
    f8e0:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
    f8e4:	eafffc03 	b	e8f8 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x574>
    f8e8:	0000f710 	.word	0x0000f710
    f8ec:	0000e8f8 	.word	0x0000e8f8
    f8f0:	0000e8f8 	.word	0x0000e8f8
    f8f4:	0000e8f8 	.word	0x0000e8f8
    f8f8:	0000e8f8 	.word	0x0000e8f8
    f8fc:	0000e8f8 	.word	0x0000e8f8
    f900:	0000e8f8 	.word	0x0000e8f8
    f904:	0000eda0 	.word	0x0000eda0
    f908:	0000e8f8 	.word	0x0000e8f8
    f90c:	0000e8f8 	.word	0x0000e8f8
    f910:	0000e8f8 	.word	0x0000e8f8
    f914:	0000e8f8 	.word	0x0000e8f8
    f918:	0000e8f8 	.word	0x0000e8f8
    f91c:	0000e8f8 	.word	0x0000e8f8
    f920:	0000e8f8 	.word	0x0000e8f8
    f924:	0000f980 	.word	0x0000f980
    f928:	0000e8f8 	.word	0x0000e8f8
    f92c:	0000e8f8 	.word	0x0000e8f8
    f930:	0000e8f8 	.word	0x0000e8f8
    f934:	0000e8f8 	.word	0x0000e8f8
    f938:	0000e8f8 	.word	0x0000e8f8
    f93c:	0000e8f8 	.word	0x0000e8f8
    f940:	0000e8f8 	.word	0x0000e8f8
    f944:	0000e8f8 	.word	0x0000e8f8
    f948:	0000e8f8 	.word	0x0000e8f8
    f94c:	0000e8f8 	.word	0x0000e8f8
    f950:	0000e8f8 	.word	0x0000e8f8
    f954:	0000e8f8 	.word	0x0000e8f8
    f958:	0000e8f8 	.word	0x0000e8f8
    f95c:	0000e8f8 	.word	0x0000e8f8
    f960:	0000e8f8 	.word	0x0000e8f8
    f964:	0000e8e0 	.word	0x0000e8e0
    f968:	e5947000 	ldr	r7, [r4]
    f96c:	e3a08000 	mov	r8, #0
    f970:	e58d7008 	str	r7, [sp, #8]
    f974:	e00c0c97 	mul	ip, r7, ip
    f978:	e594701c 	ldr	r7, [r4, #28]
    f97c:	eafffca9 	b	ec28 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8a4>
    f980:	e594c000 	ldr	ip, [r4]
    f984:	e3a08000 	mov	r8, #0
    f988:	e594701c 	ldr	r7, [r4, #28]
    f98c:	e58dc008 	str	ip, [sp, #8]
    f990:	eafffca7 	b	ec34 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8b0>
    f994:	e5947000 	ldr	r7, [r4]
    f998:	e2028007 	and	r8, r2, #7
    f99c:	e594c01c 	ldr	ip, [r4, #28]
    f9a0:	e0272197 	mla	r7, r7, r1, r2
    f9a4:	e3a02080 	mov	r2, #128	@ 0x80
    f9a8:	e1a02852 	asr	r2, r2, r8
    f9ac:	e08cc1a7 	add	ip, ip, r7, lsr #3
    f9b0:	e5dc7000 	ldrb	r7, [ip]
    f9b4:	e1c72002 	bic	r2, r7, r2
    f9b8:	e5cc2000 	strb	r2, [ip]
    f9bc:	e5942008 	ldr	r2, [r4, #8]
    f9c0:	eafffdd4 	b	f118 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0xd94>
    f9c4:	e594c000 	ldr	ip, [r4]
    f9c8:	e20a7007 	and	r7, sl, #7
    f9cc:	e02ca19c 	mla	ip, ip, r1, sl
    f9d0:	e594101c 	ldr	r1, [r4, #28]
    f9d4:	e08111ac 	add	r1, r1, ip, lsr #3
    f9d8:	e3a0c080 	mov	ip, #128	@ 0x80
    f9dc:	e1a0c75c 	asr	ip, ip, r7
    f9e0:	e5d17000 	ldrb	r7, [r1]
    f9e4:	e1c7c00c 	bic	ip, r7, ip
    f9e8:	e5c1c000 	strb	ip, [r1]
    f9ec:	e59d1004 	ldr	r1, [sp, #4]
    f9f0:	e5947008 	ldr	r7, [r4, #8]
    f9f4:	e0411005 	sub	r1, r1, r5
    f9f8:	e247c001 	sub	ip, r7, #1
    f9fc:	e35c001f 	cmp	ip, #31
    fa00:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    fa04:	eafffc61 	b	eb90 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x80c>
    fa08:	0000f994 	.word	0x0000f994
    fa0c:	0000eb90 	.word	0x0000eb90
    fa10:	0000eb90 	.word	0x0000eb90
    fa14:	0000eb90 	.word	0x0000eb90
    fa18:	0000eb90 	.word	0x0000eb90
    fa1c:	0000eb90 	.word	0x0000eb90
    fa20:	0000eb90 	.word	0x0000eb90
    fa24:	0000f20c 	.word	0x0000f20c
    fa28:	0000eb90 	.word	0x0000eb90
    fa2c:	0000eb90 	.word	0x0000eb90
    fa30:	0000eb90 	.word	0x0000eb90
    fa34:	0000eb90 	.word	0x0000eb90
    fa38:	0000eb90 	.word	0x0000eb90
    fa3c:	0000eb90 	.word	0x0000eb90
    fa40:	0000eb90 	.word	0x0000eb90
    fa44:	0000fa88 	.word	0x0000fa88
    fa48:	0000eb90 	.word	0x0000eb90
    fa4c:	0000eb90 	.word	0x0000eb90
    fa50:	0000eb90 	.word	0x0000eb90
    fa54:	0000eb90 	.word	0x0000eb90
    fa58:	0000eb90 	.word	0x0000eb90
    fa5c:	0000eb90 	.word	0x0000eb90
    fa60:	0000eb90 	.word	0x0000eb90
    fa64:	0000eb90 	.word	0x0000eb90
    fa68:	0000eb90 	.word	0x0000eb90
    fa6c:	0000eb90 	.word	0x0000eb90
    fa70:	0000eb90 	.word	0x0000eb90
    fa74:	0000eb90 	.word	0x0000eb90
    fa78:	0000eb90 	.word	0x0000eb90
    fa7c:	0000eb90 	.word	0x0000eb90
    fa80:	0000eb90 	.word	0x0000eb90
    fa84:	0000f104 	.word	0x0000f104
    fa88:	e594c000 	ldr	ip, [r4]
    fa8c:	e3a08000 	mov	r8, #0
    fa90:	e594701c 	ldr	r7, [r4, #28]
    fa94:	e58dc008 	str	ip, [sp, #8]
    fa98:	eafffc7d 	b	ec94 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x910>
    fa9c:	e1c88007 	bic	r8, r8, r7
    faa0:	e7c981ac 	strb	r8, [r9, ip, lsr #3]
    faa4:	e5947008 	ldr	r7, [r4, #8]
    faa8:	e247c001 	sub	ip, r7, #1
    faac:	e35c001f 	cmp	ip, #31
    fab0:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    fab4:	eafffc10 	b	eafc <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x778>
    fab8:	0000f9c4 	.word	0x0000f9c4
    fabc:	0000eafc 	.word	0x0000eafc
    fac0:	0000eafc 	.word	0x0000eafc
    fac4:	0000eafc 	.word	0x0000eafc
    fac8:	0000eafc 	.word	0x0000eafc
    facc:	0000eafc 	.word	0x0000eafc
    fad0:	0000eafc 	.word	0x0000eafc
    fad4:	0000f0e8 	.word	0x0000f0e8
    fad8:	0000eafc 	.word	0x0000eafc
    fadc:	0000eafc 	.word	0x0000eafc
    fae0:	0000eafc 	.word	0x0000eafc
    fae4:	0000eafc 	.word	0x0000eafc
    fae8:	0000eafc 	.word	0x0000eafc
    faec:	0000eafc 	.word	0x0000eafc
    faf0:	0000eafc 	.word	0x0000eafc
    faf4:	0000fb38 	.word	0x0000fb38
    faf8:	0000eafc 	.word	0x0000eafc
    fafc:	0000eafc 	.word	0x0000eafc
    fb00:	0000eafc 	.word	0x0000eafc
    fb04:	0000eafc 	.word	0x0000eafc
    fb08:	0000eafc 	.word	0x0000eafc
    fb0c:	0000eafc 	.word	0x0000eafc
    fb10:	0000eafc 	.word	0x0000eafc
    fb14:	0000eafc 	.word	0x0000eafc
    fb18:	0000eafc 	.word	0x0000eafc
    fb1c:	0000eafc 	.word	0x0000eafc
    fb20:	0000eafc 	.word	0x0000eafc
    fb24:	0000eafc 	.word	0x0000eafc
    fb28:	0000eafc 	.word	0x0000eafc
    fb2c:	0000eafc 	.word	0x0000eafc
    fb30:	0000eafc 	.word	0x0000eafc
    fb34:	0000eae4 	.word	0x0000eae4
    fb38:	e594c000 	ldr	ip, [r4]
    fb3c:	e3a08000 	mov	r8, #0
    fb40:	e594701c 	ldr	r7, [r4, #28]
    fb44:	e58dc008 	str	ip, [sp, #8]
    fb48:	e001019c 	mul	r1, ip, r1
    fb4c:	eafffc4b 	b	ec80 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x8fc>
    fb50:	e5943000 	ldr	r3, [r4]
    fb54:	e2061007 	and	r1, r6, #7
    fb58:	e594201c 	ldr	r2, [r4, #28]
    fb5c:	e0236993 	mla	r3, r3, r9, r6
    fb60:	e08221a3 	add	r2, r2, r3, lsr #3
    fb64:	e3a03080 	mov	r3, #128	@ 0x80
    fb68:	e1a03153 	asr	r3, r3, r1
    fb6c:	e5d21000 	ldrb	r1, [r2]
    fb70:	e1c13003 	bic	r3, r1, r3
    fb74:	e5c23000 	strb	r3, [r2]
    fb78:	eafffacc 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    fb7c:	e5943000 	ldr	r3, [r4]
    fb80:	e594201c 	ldr	r2, [r4, #28]
    fb84:	e0238793 	mla	r3, r3, r7, r8
    fb88:	e2088007 	and	r8, r8, #7
    fb8c:	e08221a3 	add	r2, r2, r3, lsr #3
    fb90:	e3a03080 	mov	r3, #128	@ 0x80
    fb94:	e1a03853 	asr	r3, r3, r8
    fb98:	e5d21000 	ldrb	r1, [r2]
    fb9c:	e1c13003 	bic	r3, r1, r3
    fba0:	e5c23000 	strb	r3, [r2]
    fba4:	e5943008 	ldr	r3, [r4, #8]
    fba8:	e2433001 	sub	r3, r3, #1
    fbac:	e353001f 	cmp	r3, #31
    fbb0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    fbb4:	eafffabd 	b	e6b0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x32c>
    fbb8:	0000fb50 	.word	0x0000fb50
    fbbc:	0000e6b0 	.word	0x0000e6b0
    fbc0:	0000e6b0 	.word	0x0000e6b0
    fbc4:	0000e6b0 	.word	0x0000e6b0
    fbc8:	0000e6b0 	.word	0x0000e6b0
    fbcc:	0000e6b0 	.word	0x0000e6b0
    fbd0:	0000e6b0 	.word	0x0000e6b0
    fbd4:	0000f58c 	.word	0x0000f58c
    fbd8:	0000e6b0 	.word	0x0000e6b0
    fbdc:	0000e6b0 	.word	0x0000e6b0
    fbe0:	0000e6b0 	.word	0x0000e6b0
    fbe4:	0000e6b0 	.word	0x0000e6b0
    fbe8:	0000e6b0 	.word	0x0000e6b0
    fbec:	0000e6b0 	.word	0x0000e6b0
    fbf0:	0000e6b0 	.word	0x0000e6b0
    fbf4:	0000fc38 	.word	0x0000fc38
    fbf8:	0000e6b0 	.word	0x0000e6b0
    fbfc:	0000e6b0 	.word	0x0000e6b0
    fc00:	0000e6b0 	.word	0x0000e6b0
    fc04:	0000e6b0 	.word	0x0000e6b0
    fc08:	0000e6b0 	.word	0x0000e6b0
    fc0c:	0000e6b0 	.word	0x0000e6b0
    fc10:	0000e6b0 	.word	0x0000e6b0
    fc14:	0000e6b0 	.word	0x0000e6b0
    fc18:	0000e6b0 	.word	0x0000e6b0
    fc1c:	0000e6b0 	.word	0x0000e6b0
    fc20:	0000e6b0 	.word	0x0000e6b0
    fc24:	0000e6b0 	.word	0x0000e6b0
    fc28:	0000e6b0 	.word	0x0000e6b0
    fc2c:	0000e6b0 	.word	0x0000e6b0
    fc30:	0000e6b0 	.word	0x0000e6b0
    fc34:	0000f578 	.word	0x0000f578
    fc38:	e594201c 	ldr	r2, [r4, #28]
    fc3c:	e3a01000 	mov	r1, #0
    fc40:	e5943000 	ldr	r3, [r4]
    fc44:	eafffa96 	b	e6a4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x320>
    fc48:	e1c11002 	bic	r1, r1, r2
    fc4c:	e7cc11a3 	strb	r1, [ip, r3, lsr #3]
    fc50:	e5943008 	ldr	r3, [r4, #8]
    fc54:	e2433001 	sub	r3, r3, #1
    fc58:	e353001f 	cmp	r3, #31
    fc5c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    fc60:	eafffa5f 	b	e5e4 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x260>
    fc64:	0000fb7c 	.word	0x0000fb7c
    fc68:	0000e5e4 	.word	0x0000e5e4
    fc6c:	0000e5e4 	.word	0x0000e5e4
    fc70:	0000e5e4 	.word	0x0000e5e4
    fc74:	0000e5e4 	.word	0x0000e5e4
    fc78:	0000e5e4 	.word	0x0000e5e4
    fc7c:	0000e5e4 	.word	0x0000e5e4
    fc80:	0000f55c 	.word	0x0000f55c
    fc84:	0000e5e4 	.word	0x0000e5e4
    fc88:	0000e5e4 	.word	0x0000e5e4
    fc8c:	0000e5e4 	.word	0x0000e5e4
    fc90:	0000e5e4 	.word	0x0000e5e4
    fc94:	0000e5e4 	.word	0x0000e5e4
    fc98:	0000e5e4 	.word	0x0000e5e4
    fc9c:	0000e5e4 	.word	0x0000e5e4
    fca0:	0000fce4 	.word	0x0000fce4
    fca4:	0000e5e4 	.word	0x0000e5e4
    fca8:	0000e5e4 	.word	0x0000e5e4
    fcac:	0000e5e4 	.word	0x0000e5e4
    fcb0:	0000e5e4 	.word	0x0000e5e4
    fcb4:	0000e5e4 	.word	0x0000e5e4
    fcb8:	0000e5e4 	.word	0x0000e5e4
    fcbc:	0000e5e4 	.word	0x0000e5e4
    fcc0:	0000e5e4 	.word	0x0000e5e4
    fcc4:	0000e5e4 	.word	0x0000e5e4
    fcc8:	0000e5e4 	.word	0x0000e5e4
    fccc:	0000e5e4 	.word	0x0000e5e4
    fcd0:	0000e5e4 	.word	0x0000e5e4
    fcd4:	0000e5e4 	.word	0x0000e5e4
    fcd8:	0000e5e4 	.word	0x0000e5e4
    fcdc:	0000e5e4 	.word	0x0000e5e4
    fce0:	0000e5cc 	.word	0x0000e5cc
    fce4:	e5943000 	ldr	r3, [r4]
    fce8:	e3a01000 	mov	r1, #0
    fcec:	e594201c 	ldr	r2, [r4, #28]
    fcf0:	e0288793 	mla	r8, r3, r7, r8
    fcf4:	e0828088 	add	r8, r2, r8, lsl #1
    fcf8:	eafffa68 	b	e6a0 <C2DGraphics::DrawCircleOutline(unsigned int, unsigned int, unsigned int, CDisplay::TColor)+0x31c>

0000fcfc <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)>:
    fcfc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    fd00:	e1a05001 	mov	r5, r1
    fd04:	e1a04003 	mov	r4, r3
    fd08:	e1a01002 	mov	r1, r2
    fd0c:	e5902000 	ldr	r2, [r0]
    fd10:	e085c004 	add	ip, r5, r4
    fd14:	e59d301c 	ldr	r3, [sp, #28]
    fd18:	e15c0002 	cmp	ip, r2
    fd1c:	88bd83f0 	pophi	{r4, r5, r6, r7, r8, r9, pc}
    fd20:	e5902004 	ldr	r2, [r0, #4]
    fd24:	e0817003 	add	r7, r1, r3
    fd28:	e1570002 	cmp	r7, r2
    fd2c:	88bd83f0 	pophi	{r4, r5, r6, r7, r8, r9, pc}
    fd30:	e59d2024 	ldr	r2, [sp, #36]	@ 0x24
    fd34:	e3530000 	cmp	r3, #0
    fd38:	e59d3020 	ldr	r3, [sp, #32]
    fd3c:	e0233492 	mla	r3, r2, r4, r3
    fd40:	e5902008 	ldr	r2, [r0, #8]
    fd44:	e0030392 	mul	r3, r2, r3
    fd48:	e59d2028 	ldr	r2, [sp, #40]	@ 0x28
    fd4c:	e08231a3 	add	r3, r2, r3, lsr #3
    fd50:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
    fd54:	e3540000 	cmp	r4, #0
    fd58:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
    fd5c:	e3a06080 	mov	r6, #128	@ 0x80
    fd60:	e3a0e000 	mov	lr, #0
    fd64:	e590c008 	ldr	ip, [r0, #8]
    fd68:	e085200e 	add	r2, r5, lr
    fd6c:	e24cc001 	sub	ip, ip, #1
    fd70:	e35c001f 	cmp	ip, #31
    fd74:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    fd78:	ea000025 	b	fe14 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x118>
    fd7c:	0000fe78 	.word	0x0000fe78
    fd80:	0000fe14 	.word	0x0000fe14
    fd84:	0000fe14 	.word	0x0000fe14
    fd88:	0000fe14 	.word	0x0000fe14
    fd8c:	0000fe14 	.word	0x0000fe14
    fd90:	0000fe14 	.word	0x0000fe14
    fd94:	0000fe14 	.word	0x0000fe14
    fd98:	0000fe54 	.word	0x0000fe54
    fd9c:	0000fe14 	.word	0x0000fe14
    fda0:	0000fe14 	.word	0x0000fe14
    fda4:	0000fe14 	.word	0x0000fe14
    fda8:	0000fe14 	.word	0x0000fe14
    fdac:	0000fe14 	.word	0x0000fe14
    fdb0:	0000fe14 	.word	0x0000fe14
    fdb4:	0000fe14 	.word	0x0000fe14
    fdb8:	0000fdfc 	.word	0x0000fdfc
    fdbc:	0000fe14 	.word	0x0000fe14
    fdc0:	0000fe14 	.word	0x0000fe14
    fdc4:	0000fe14 	.word	0x0000fe14
    fdc8:	0000fe14 	.word	0x0000fe14
    fdcc:	0000fe14 	.word	0x0000fe14
    fdd0:	0000fe14 	.word	0x0000fe14
    fdd4:	0000fe14 	.word	0x0000fe14
    fdd8:	0000fe14 	.word	0x0000fe14
    fddc:	0000fe14 	.word	0x0000fe14
    fde0:	0000fe14 	.word	0x0000fe14
    fde4:	0000fe14 	.word	0x0000fe14
    fde8:	0000fe14 	.word	0x0000fe14
    fdec:	0000fe14 	.word	0x0000fe14
    fdf0:	0000fe14 	.word	0x0000fe14
    fdf4:	0000fe14 	.word	0x0000fe14
    fdf8:	0000fe30 	.word	0x0000fe30
    fdfc:	e590c000 	ldr	ip, [r0]
    fe00:	e590801c 	ldr	r8, [r0, #28]
    fe04:	e0d390b2 	ldrh	r9, [r3], #2
    fe08:	e022219c 	mla	r2, ip, r1, r2
    fe0c:	e1a02082 	lsl	r2, r2, #1
    fe10:	e18890b2 	strh	r9, [r8, r2]
    fe14:	e28ee001 	add	lr, lr, #1
    fe18:	e154000e 	cmp	r4, lr
    fe1c:	1affffd0 	bne	fd64 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x68>
    fe20:	e2811001 	add	r1, r1, #1
    fe24:	e1570001 	cmp	r7, r1
    fe28:	1affffcc 	bne	fd60 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x64>
    fe2c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    fe30:	e590c000 	ldr	ip, [r0]
    fe34:	e28ee001 	add	lr, lr, #1
    fe38:	e590801c 	ldr	r8, [r0, #28]
    fe3c:	e154000e 	cmp	r4, lr
    fe40:	e4939004 	ldr	r9, [r3], #4
    fe44:	e022219c 	mla	r2, ip, r1, r2
    fe48:	e7889102 	str	r9, [r8, r2, lsl #2]
    fe4c:	1affffc4 	bne	fd64 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x68>
    fe50:	eafffff2 	b	fe20 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x124>
    fe54:	e5908000 	ldr	r8, [r0]
    fe58:	e28ee001 	add	lr, lr, #1
    fe5c:	e590c01c 	ldr	ip, [r0, #28]
    fe60:	e154000e 	cmp	r4, lr
    fe64:	e02cc198 	mla	ip, r8, r1, ip
    fe68:	e4d38001 	ldrb	r8, [r3], #1
    fe6c:	e7cc8002 	strb	r8, [ip, r2]
    fe70:	1affffbb 	bne	fd64 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x68>
    fe74:	eaffffe9 	b	fe20 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x124>
    fe78:	e5d3c000 	ldrb	ip, [r3]
    fe7c:	e20e8007 	and	r8, lr, #7
    fe80:	e3580007 	cmp	r8, #7
    fe84:	e2029007 	and	r9, r2, #7
    fe88:	02833001 	addeq	r3, r3, #1
    fe8c:	e28ee001 	add	lr, lr, #1
    fe90:	e00cc856 	and	ip, ip, r6, asr r8
    fe94:	e590801c 	ldr	r8, [r0, #28]
    fe98:	e35c0000 	cmp	ip, #0
    fe9c:	e590c000 	ldr	ip, [r0]
    fea0:	e1a09956 	asr	r9, r6, r9
    fea4:	e022219c 	mla	r2, ip, r1, r2
    fea8:	e7d8c1a2 	ldrb	ip, [r8, r2, lsr #3]
    feac:	118cc009 	orrne	ip, ip, r9
    feb0:	01ccc009 	biceq	ip, ip, r9
    feb4:	16efc07c 	uxtbne	ip, ip
    feb8:	e154000e 	cmp	r4, lr
    febc:	e7c8c1a2 	strb	ip, [r8, r2, lsr #3]
    fec0:	1affffa7 	bne	fd64 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x68>
    fec4:	eaffffd5 	b	fe20 <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)+0x124>

0000fec8 <C2DGraphics::DrawImage(unsigned int, unsigned int, unsigned int, unsigned int, void const*)>:
    fec8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    fecc:	e24dd014 	sub	sp, sp, #20
    fed0:	e59dc018 	ldr	ip, [sp, #24]
    fed4:	e58dc000 	str	ip, [sp]
    fed8:	e59dc01c 	ldr	ip, [sp, #28]
    fedc:	e58dc00c 	str	ip, [sp, #12]
    fee0:	e3a0c000 	mov	ip, #0
    fee4:	e58dc008 	str	ip, [sp, #8]
    fee8:	e58dc004 	str	ip, [sp, #4]
    feec:	ebffff82 	bl	fcfc <C2DGraphics::DrawImageRect(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*)>
    fef0:	e28dd014 	add	sp, sp, #20
    fef4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0000fef8 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)>:
    fef8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fefc:	e0814003 	add	r4, r1, r3
    ff00:	e590e000 	ldr	lr, [r0]
    ff04:	e24dd014 	sub	sp, sp, #20
    ff08:	e154000e 	cmp	r4, lr
    ff0c:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
    ff10:	e59db044 	ldr	fp, [sp, #68]	@ 0x44
    ff14:	e59da04c 	ldr	sl, [sp, #76]	@ 0x4c
    ff18:	e59d5050 	ldr	r5, [sp, #80]	@ 0x50
    ff1c:	8a000046 	bhi	1003c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x144>
    ff20:	e590e004 	ldr	lr, [r0, #4]
    ff24:	e082800c 	add	r8, r2, ip
    ff28:	e158000e 	cmp	r8, lr
    ff2c:	8a000042 	bhi	1003c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x144>
    ff30:	e59de03c 	ldr	lr, [sp, #60]	@ 0x3c
    ff34:	e083e00e 	add	lr, r3, lr
    ff38:	e15e000b 	cmp	lr, fp
    ff3c:	8a00003e 	bhi	1003c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x144>
    ff40:	e59de040 	ldr	lr, [sp, #64]	@ 0x40
    ff44:	e59d4048 	ldr	r4, [sp, #72]	@ 0x48
    ff48:	e08ce00e 	add	lr, ip, lr
    ff4c:	e15e0004 	cmp	lr, r4
    ff50:	8a000039 	bhi	1003c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x144>
    ff54:	e35c0000 	cmp	ip, #0
    ff58:	0a000037 	beq	1003c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x144>
    ff5c:	e59dc03c 	ldr	ip, [sp, #60]	@ 0x3c
    ff60:	e1a0400b 	mov	r4, fp
    ff64:	e59de040 	ldr	lr, [sp, #64]	@ 0x40
    ff68:	e3a07080 	mov	r7, #128	@ 0x80
    ff6c:	e58d100c 	str	r1, [sp, #12]
    ff70:	e026cb9e 	mla	r6, lr, fp, ip
    ff74:	e1a0b008 	mov	fp, r8
    ff78:	e5908008 	ldr	r8, [r0, #8]
    ff7c:	e3530000 	cmp	r3, #0
    ff80:	e0010896 	mul	r1, r6, r8
    ff84:	e08a11a1 	add	r1, sl, r1, lsr #3
    ff88:	0a000027 	beq	1002c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x134>
    ff8c:	e59de00c 	ldr	lr, [sp, #12]
    ff90:	e3a0c000 	mov	ip, #0
    ff94:	e58d6004 	str	r6, [sp, #4]
    ff98:	e2488001 	sub	r8, r8, #1
    ff9c:	e358001f 	cmp	r8, #31
    ffa0:	979ff108 	ldrls	pc, [pc, r8, lsl #2]
    ffa4:	ea00003c 	b	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
    ffa8:	00010044 	.word	0x00010044
    ffac:	0001009c 	.word	0x0001009c
    ffb0:	0001009c 	.word	0x0001009c
    ffb4:	0001009c 	.word	0x0001009c
    ffb8:	0001009c 	.word	0x0001009c
    ffbc:	0001009c 	.word	0x0001009c
    ffc0:	0001009c 	.word	0x0001009c
    ffc4:	000100d0 	.word	0x000100d0
    ffc8:	0001009c 	.word	0x0001009c
    ffcc:	0001009c 	.word	0x0001009c
    ffd0:	0001009c 	.word	0x0001009c
    ffd4:	0001009c 	.word	0x0001009c
    ffd8:	0001009c 	.word	0x0001009c
    ffdc:	0001009c 	.word	0x0001009c
    ffe0:	0001009c 	.word	0x0001009c
    ffe4:	000100ec 	.word	0x000100ec
    ffe8:	0001009c 	.word	0x0001009c
    ffec:	0001009c 	.word	0x0001009c
    fff0:	0001009c 	.word	0x0001009c
    fff4:	0001009c 	.word	0x0001009c
    fff8:	0001009c 	.word	0x0001009c
    fffc:	0001009c 	.word	0x0001009c
   10000:	0001009c 	.word	0x0001009c
   10004:	0001009c 	.word	0x0001009c
   10008:	0001009c 	.word	0x0001009c
   1000c:	0001009c 	.word	0x0001009c
   10010:	0001009c 	.word	0x0001009c
   10014:	0001009c 	.word	0x0001009c
   10018:	0001009c 	.word	0x0001009c
   1001c:	0001009c 	.word	0x0001009c
   10020:	0001009c 	.word	0x0001009c
   10024:	000100b4 	.word	0x000100b4
   10028:	e59d6004 	ldr	r6, [sp, #4]
   1002c:	e2822001 	add	r2, r2, #1
   10030:	e0866004 	add	r6, r6, r4
   10034:	e15b0002 	cmp	fp, r2
   10038:	1affffce 	bne	ff78 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x80>
   1003c:	e28dd014 	add	sp, sp, #20
   10040:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10044:	e5d16000 	ldrb	r6, [r1]
   10048:	e20c8007 	and	r8, ip, #7
   1004c:	e0166857 	ands	r6, r6, r7, asr r8
   10050:	13a09001 	movne	r9, #1
   10054:	03a09000 	moveq	r9, #0
   10058:	e3580007 	cmp	r8, #7
   1005c:	0a00002b 	beq	10110 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x218>
   10060:	e1550009 	cmp	r5, r9
   10064:	0a00000c 	beq	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
   10068:	e3560000 	cmp	r6, #0
   1006c:	e5906000 	ldr	r6, [r0]
   10070:	e590801c 	ldr	r8, [r0, #28]
   10074:	e20e9007 	and	r9, lr, #7
   10078:	e58d8008 	str	r8, [sp, #8]
   1007c:	e1a09957 	asr	r9, r7, r9
   10080:	e026e296 	mla	r6, r6, r2, lr
   10084:	e7d881a6 	ldrb	r8, [r8, r6, lsr #3]
   10088:	11888009 	orrne	r8, r8, r9
   1008c:	01c88009 	biceq	r8, r8, r9
   10090:	e59d9008 	ldr	r9, [sp, #8]
   10094:	16ef8078 	uxtbne	r8, r8
   10098:	e7c981a6 	strb	r8, [r9, r6, lsr #3]
   1009c:	e28cc001 	add	ip, ip, #1
   100a0:	e28ee001 	add	lr, lr, #1
   100a4:	e153000c 	cmp	r3, ip
   100a8:	0affffde 	beq	10028 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x130>
   100ac:	e5908008 	ldr	r8, [r0, #8]
   100b0:	eaffffb8 	b	ff98 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0xa0>
   100b4:	e4916004 	ldr	r6, [r1], #4
   100b8:	e1550006 	cmp	r5, r6
   100bc:	15908000 	ldrne	r8, [r0]
   100c0:	1590901c 	ldrne	r9, [r0, #28]
   100c4:	1028e298 	mlane	r8, r8, r2, lr
   100c8:	17896108 	strne	r6, [r9, r8, lsl #2]
   100cc:	eafffff2 	b	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
   100d0:	e4d16001 	ldrb	r6, [r1], #1
   100d4:	e1550006 	cmp	r5, r6
   100d8:	15909000 	ldrne	r9, [r0]
   100dc:	1590801c 	ldrne	r8, [r0, #28]
   100e0:	10288299 	mlane	r8, r9, r2, r8
   100e4:	17c8600e 	strbne	r6, [r8, lr]
   100e8:	eaffffeb 	b	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
   100ec:	e0d180b2 	ldrh	r8, [r1], #2
   100f0:	e1550008 	cmp	r5, r8
   100f4:	0affffe8 	beq	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
   100f8:	e5906000 	ldr	r6, [r0]
   100fc:	e590901c 	ldr	r9, [r0, #28]
   10100:	e026e296 	mla	r6, r6, r2, lr
   10104:	e1a06086 	lsl	r6, r6, #1
   10108:	e18980b6 	strh	r8, [r9, r6]
   1010c:	eaffffe2 	b	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
   10110:	e1550009 	cmp	r5, r9
   10114:	e2811001 	add	r1, r1, #1
   10118:	0affffdf 	beq	1009c <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x1a4>
   1011c:	eaffffd1 	b	10068 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)+0x170>

00010120 <C2DGraphics::DrawImageTransparent(unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)>:
   10120:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   10124:	e3a0c000 	mov	ip, #0
   10128:	e24dd024 	sub	sp, sp, #36	@ 0x24
   1012c:	e58dc008 	str	ip, [sp, #8]
   10130:	e58dc004 	str	ip, [sp, #4]
   10134:	e59dc028 	ldr	ip, [sp, #40]	@ 0x28
   10138:	e58dc010 	str	ip, [sp, #16]
   1013c:	e58dc000 	str	ip, [sp]
   10140:	e59dc02c 	ldr	ip, [sp, #44]	@ 0x2c
   10144:	e58dc014 	str	ip, [sp, #20]
   10148:	e59dc030 	ldr	ip, [sp, #48]	@ 0x30
   1014c:	e58d300c 	str	r3, [sp, #12]
   10150:	e58dc018 	str	ip, [sp, #24]
   10154:	ebffff67 	bl	fef8 <C2DGraphics::DrawImageRectTransparent(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void const*, CDisplay::TColor)>
   10158:	e28dd024 	add	sp, sp, #36	@ 0x24
   1015c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00010160 <C2DGraphics::DrawPixel(unsigned int, unsigned int, CDisplay::TColor)>:
   10160:	e92d4070 	push	{r4, r5, r6, lr}
   10164:	e1a05001 	mov	r5, r1
   10168:	e5901000 	ldr	r1, [r0]
   1016c:	e1510005 	cmp	r1, r5
   10170:	98bd8070 	popls	{r4, r5, r6, pc}
   10174:	e1a06002 	mov	r6, r2
   10178:	e5902004 	ldr	r2, [r0, #4]
   1017c:	e1a04000 	mov	r4, r0
   10180:	e1520006 	cmp	r2, r6
   10184:	98bd8070 	popls	{r4, r5, r6, pc}
   10188:	e1a01003 	mov	r1, r3
   1018c:	e5900010 	ldr	r0, [r0, #16]
   10190:	eb000814 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
   10194:	e5943008 	ldr	r3, [r4, #8]
   10198:	e2433001 	sub	r3, r3, #1
   1019c:	e353001f 	cmp	r3, #31
   101a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   101a4:	ea000023 	b	10238 <C2DGraphics::DrawPixel(unsigned int, unsigned int, CDisplay::TColor)+0xd8>
   101a8:	00010268 	.word	0x00010268
   101ac:	00010238 	.word	0x00010238
   101b0:	00010238 	.word	0x00010238
   101b4:	00010238 	.word	0x00010238
   101b8:	00010238 	.word	0x00010238
   101bc:	00010238 	.word	0x00010238
   101c0:	00010238 	.word	0x00010238
   101c4:	00010254 	.word	0x00010254
   101c8:	00010238 	.word	0x00010238
   101cc:	00010238 	.word	0x00010238
   101d0:	00010238 	.word	0x00010238
   101d4:	00010238 	.word	0x00010238
   101d8:	00010238 	.word	0x00010238
   101dc:	00010238 	.word	0x00010238
   101e0:	00010238 	.word	0x00010238
   101e4:	0001023c 	.word	0x0001023c
   101e8:	00010238 	.word	0x00010238
   101ec:	00010238 	.word	0x00010238
   101f0:	00010238 	.word	0x00010238
   101f4:	00010238 	.word	0x00010238
   101f8:	00010238 	.word	0x00010238
   101fc:	00010238 	.word	0x00010238
   10200:	00010238 	.word	0x00010238
   10204:	00010238 	.word	0x00010238
   10208:	00010238 	.word	0x00010238
   1020c:	00010238 	.word	0x00010238
   10210:	00010238 	.word	0x00010238
   10214:	00010238 	.word	0x00010238
   10218:	00010238 	.word	0x00010238
   1021c:	00010238 	.word	0x00010238
   10220:	00010238 	.word	0x00010238
   10224:	00010228 	.word	0x00010228
   10228:	e5942000 	ldr	r2, [r4]
   1022c:	e594301c 	ldr	r3, [r4, #28]
   10230:	e0225692 	mla	r2, r2, r6, r5
   10234:	e7830102 	str	r0, [r3, r2, lsl #2]
   10238:	e8bd8070 	pop	{r4, r5, r6, pc}
   1023c:	e5943000 	ldr	r3, [r4]
   10240:	e594201c 	ldr	r2, [r4, #28]
   10244:	e0235693 	mla	r3, r3, r6, r5
   10248:	e1a03083 	lsl	r3, r3, #1
   1024c:	e18200b3 	strh	r0, [r2, r3]
   10250:	e8bd8070 	pop	{r4, r5, r6, pc}
   10254:	e5942000 	ldr	r2, [r4]
   10258:	e594301c 	ldr	r3, [r4, #28]
   1025c:	e0233692 	mla	r3, r2, r6, r3
   10260:	e7c30005 	strb	r0, [r3, r5]
   10264:	e8bd8070 	pop	{r4, r5, r6, pc}
   10268:	e5943000 	ldr	r3, [r4]
   1026c:	e3500000 	cmp	r0, #0
   10270:	e594001c 	ldr	r0, [r4, #28]
   10274:	e2052007 	and	r2, r5, #7
   10278:	e3a01080 	mov	r1, #128	@ 0x80
   1027c:	e0235693 	mla	r3, r3, r6, r5
   10280:	e1a01251 	asr	r1, r1, r2
   10284:	e7d021a3 	ldrb	r2, [r0, r3, lsr #3]
   10288:	11822001 	orrne	r2, r2, r1
   1028c:	01c22001 	biceq	r2, r2, r1
   10290:	e7c021a3 	strb	r2, [r0, r3, lsr #3]
   10294:	e8bd8070 	pop	{r4, r5, r6, pc}

00010298 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)>:
   10298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1029c:	e1a06001 	mov	r6, r1
   102a0:	e1a04000 	mov	r4, r0
   102a4:	e24dd024 	sub	sp, sp, #36	@ 0x24
   102a8:	e1a09002 	mov	r9, r2
   102ac:	e28d0004 	add	r0, sp, #4
   102b0:	e1a05003 	mov	r5, r3
   102b4:	e59d7048 	ldr	r7, [sp, #72]	@ 0x48
   102b8:	e5dd2054 	ldrb	r2, [sp, #84]	@ 0x54
   102bc:	e59d1050 	ldr	r1, [sp, #80]	@ 0x50
   102c0:	e5dd804c 	ldrb	r8, [sp, #76]	@ 0x4c
   102c4:	eb000b40 	bl	12fcc <CCharGenerator::CCharGenerator(TFont const&, CCharGenerator::TFontFlags)>
   102c8:	e1a00007 	mov	r0, r7
   102cc:	ebfff06d 	bl	c488 <strlen>
   102d0:	e59d3010 	ldr	r3, [sp, #16]
   102d4:	e3580001 	cmp	r8, #1
   102d8:	e0020093 	mul	r2, r3, r0
   102dc:	00466002 	subeq	r6, r6, r2
   102e0:	0a000001 	beq	102ec <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x54>
   102e4:	e3580002 	cmp	r8, #2
   102e8:	004660a2 	subeq	r6, r6, r2, lsr #1
   102ec:	e5943000 	ldr	r3, [r4]
   102f0:	e1530006 	cmp	r3, r6
   102f4:	3a00005a 	bcc	10464 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1cc>
   102f8:	e0862002 	add	r2, r6, r2
   102fc:	e1530002 	cmp	r3, r2
   10300:	3a000057 	bcc	10464 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1cc>
   10304:	e59d301c 	ldr	r3, [sp, #28]
   10308:	e5942004 	ldr	r2, [r4, #4]
   1030c:	e0893003 	add	r3, r9, r3
   10310:	e1530002 	cmp	r3, r2
   10314:	8a000052 	bhi	10464 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1cc>
   10318:	e5940010 	ldr	r0, [r4, #16]
   1031c:	e1a01005 	mov	r1, r5
   10320:	eb0007b0 	bl	121e8 <CDisplay::GetColor(CDisplay::TColor) const>
   10324:	e1d730d0 	ldrsb	r3, [r7]
   10328:	e1a0a000 	mov	sl, r0
   1032c:	e3530000 	cmp	r3, #0
   10330:	0a00004b 	beq	10464 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1cc>
   10334:	e59d301c 	ldr	r3, [sp, #28]
   10338:	e3a08080 	mov	r8, #128	@ 0x80
   1033c:	e3530000 	cmp	r3, #0
   10340:	059d1010 	ldreq	r1, [sp, #16]
   10344:	0a000042 	beq	10454 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1bc>
   10348:	e1a05009 	mov	r5, r9
   1034c:	e3a0b000 	mov	fp, #0
   10350:	e1d710d0 	ldrsb	r1, [r7]
   10354:	e1a0200b 	mov	r2, fp
   10358:	e28d0004 	add	r0, sp, #4
   1035c:	eb000b2e 	bl	1301c <CCharGenerator::GetPixelLine(char, unsigned int) const>
   10360:	e59d1010 	ldr	r1, [sp, #16]
   10364:	e3510000 	cmp	r1, #0
   10368:	13a02000 	movne	r2, #0
   1036c:	1a000003 	bne	10380 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xe8>
   10370:	ea000032 	b	10440 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1a8>
   10374:	e2822001 	add	r2, r2, #1
   10378:	e1520001 	cmp	r2, r1
   1037c:	2a00002f 	bcs	10440 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0x1a8>
   10380:	e59d3008 	ldr	r3, [sp, #8]
   10384:	e3530002 	cmp	r3, #2
   10388:	e59d3014 	ldr	r3, [sp, #20]
   1038c:	01a0c0a2 	lsreq	ip, r2, #1
   10390:	11a0c002 	movne	ip, r2
   10394:	e2433001 	sub	r3, r3, #1
   10398:	e043300c 	sub	r3, r3, ip
   1039c:	e1a03350 	asr	r3, r0, r3
   103a0:	e3130001 	tst	r3, #1
   103a4:	0afffff2 	beq	10374 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xdc>
   103a8:	e5943008 	ldr	r3, [r4, #8]
   103ac:	e086c002 	add	ip, r6, r2
   103b0:	e2433001 	sub	r3, r3, #1
   103b4:	e353001f 	cmp	r3, #31
   103b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   103bc:	eaffffec 	b	10374 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xdc>
   103c0:	000104b4 	.word	0x000104b4
   103c4:	00010374 	.word	0x00010374
   103c8:	00010374 	.word	0x00010374
   103cc:	00010374 	.word	0x00010374
   103d0:	00010374 	.word	0x00010374
   103d4:	00010374 	.word	0x00010374
   103d8:	00010374 	.word	0x00010374
   103dc:	0001049c 	.word	0x0001049c
   103e0:	00010374 	.word	0x00010374
   103e4:	00010374 	.word	0x00010374
   103e8:	00010374 	.word	0x00010374
   103ec:	00010374 	.word	0x00010374
   103f0:	00010374 	.word	0x00010374
   103f4:	00010374 	.word	0x00010374
   103f8:	00010374 	.word	0x00010374
   103fc:	00010484 	.word	0x00010484
   10400:	00010374 	.word	0x00010374
   10404:	00010374 	.word	0x00010374
   10408:	00010374 	.word	0x00010374
   1040c:	00010374 	.word	0x00010374
   10410:	00010374 	.word	0x00010374
   10414:	00010374 	.word	0x00010374
   10418:	00010374 	.word	0x00010374
   1041c:	00010374 	.word	0x00010374
   10420:	00010374 	.word	0x00010374
   10424:	00010374 	.word	0x00010374
   10428:	00010374 	.word	0x00010374
   1042c:	00010374 	.word	0x00010374
   10430:	00010374 	.word	0x00010374
   10434:	00010374 	.word	0x00010374
   10438:	00010374 	.word	0x00010374
   1043c:	0001046c 	.word	0x0001046c
   10440:	e59d301c 	ldr	r3, [sp, #28]
   10444:	e28bb001 	add	fp, fp, #1
   10448:	e2855001 	add	r5, r5, #1
   1044c:	e15b0003 	cmp	fp, r3
   10450:	3affffbe 	bcc	10350 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xb8>
   10454:	e1f720d1 	ldrsb	r2, [r7, #1]!
   10458:	e0866001 	add	r6, r6, r1
   1045c:	e3520000 	cmp	r2, #0
   10460:	1affffb5 	bne	1033c <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xa4>
   10464:	e28dd024 	add	sp, sp, #36	@ 0x24
   10468:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1046c:	e5943000 	ldr	r3, [r4]
   10470:	e02cc593 	mla	ip, r3, r5, ip
   10474:	e594301c 	ldr	r3, [r4, #28]
   10478:	e783a10c 	str	sl, [r3, ip, lsl #2]
   1047c:	e59d1010 	ldr	r1, [sp, #16]
   10480:	eaffffbb 	b	10374 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xdc>
   10484:	e5943000 	ldr	r3, [r4]
   10488:	e023c593 	mla	r3, r3, r5, ip
   1048c:	e594c01c 	ldr	ip, [r4, #28]
   10490:	e1a03083 	lsl	r3, r3, #1
   10494:	e18ca0b3 	strh	sl, [ip, r3]
   10498:	eaffffb5 	b	10374 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xdc>
   1049c:	e5941000 	ldr	r1, [r4]
   104a0:	e594301c 	ldr	r3, [r4, #28]
   104a4:	e0233591 	mla	r3, r1, r5, r3
   104a8:	e7c3a00c 	strb	sl, [r3, ip]
   104ac:	e59d1010 	ldr	r1, [sp, #16]
   104b0:	eaffffaf 	b	10374 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xdc>
   104b4:	e5943000 	ldr	r3, [r4]
   104b8:	e35a0000 	cmp	sl, #0
   104bc:	e594e01c 	ldr	lr, [r4, #28]
   104c0:	e023c593 	mla	r3, r3, r5, ip
   104c4:	e20cc007 	and	ip, ip, #7
   104c8:	e1a0cc58 	asr	ip, r8, ip
   104cc:	e7de11a3 	ldrb	r1, [lr, r3, lsr #3]
   104d0:	1181100c 	orrne	r1, r1, ip
   104d4:	01c1100c 	biceq	r1, r1, ip
   104d8:	e7ce11a3 	strb	r1, [lr, r3, lsr #3]
   104dc:	e59d1010 	ldr	r1, [sp, #16]
   104e0:	eaffffa3 	b	10374 <C2DGraphics::DrawText(unsigned int, unsigned int, CDisplay::TColor, char const*, C2DGraphics::TTextAlign, TFont const&, CCharGenerator::TFontFlags)+0xdc>

000104e4 <C2DGraphics::GetBuffer()>:
   104e4:	e590001c 	ldr	r0, [r0, #28]
   104e8:	e12fff1e 	bx	lr

000104ec <C2DGraphics::GetDisplay()>:
   104ec:	e5900010 	ldr	r0, [r0, #16]
   104f0:	e12fff1e 	bx	lr

000104f4 <C2DGraphics::UpdateDisplay()>:
   104f4:	e92d4030 	push	{r4, r5, lr}
   104f8:	e1a04000 	mov	r4, r0
   104fc:	e5902000 	ldr	r2, [r0]
   10500:	e5901004 	ldr	r1, [r0, #4]
   10504:	e24dd01c 	sub	sp, sp, #28
   10508:	e5d03020 	ldrb	r3, [r0, #32]
   1050c:	e2422001 	sub	r2, r2, #1
   10510:	e241c001 	sub	ip, r1, #1
   10514:	e3530000 	cmp	r3, #0
   10518:	0a00001d 	beq	10594 <C2DGraphics::UpdateDisplay()+0xa0>
   1051c:	e5d03021 	ldrb	r3, [r0, #33]	@ 0x21
   10520:	e3a05000 	mov	r5, #0
   10524:	e5900014 	ldr	r0, [r0, #20]
   10528:	e3530000 	cmp	r3, #0
   1052c:	e58d200c 	str	r2, [sp, #12]
   10530:	01a01005 	moveq	r1, r5
   10534:	e58d5008 	str	r5, [sp, #8]
   10538:	e081c00c 	add	ip, r1, ip
   1053c:	e58d1010 	str	r1, [sp, #16]
   10540:	e58dc014 	str	ip, [sp, #20]
   10544:	eb0009e6 	bl	12ce4 <CBcmFrameBuffer::WaitForVerticalSync()>
   10548:	e5940014 	ldr	r0, [r4, #20]
   1054c:	e1a03005 	mov	r3, r5
   10550:	e594201c 	ldr	r2, [r4, #28]
   10554:	e5901000 	ldr	r1, [r0]
   10558:	e58d5000 	str	r5, [sp]
   1055c:	e5915018 	ldr	r5, [r1, #24]
   10560:	e28d1008 	add	r1, sp, #8
   10564:	e12fff35 	blx	r5
   10568:	e5d42021 	ldrb	r2, [r4, #33]	@ 0x21
   1056c:	e5940014 	ldr	r0, [r4, #20]
   10570:	e3a01000 	mov	r1, #0
   10574:	e3520000 	cmp	r2, #0
   10578:	15942004 	ldrne	r2, [r4, #4]
   1057c:	eb0009b9 	bl	12c68 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>
   10580:	e5d43021 	ldrb	r3, [r4, #33]	@ 0x21
   10584:	e2233001 	eor	r3, r3, #1
   10588:	e5c43021 	strb	r3, [r4, #33]	@ 0x21
   1058c:	e28dd01c 	add	sp, sp, #28
   10590:	e8bd8030 	pop	{r4, r5, pc}
   10594:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   10598:	e5900010 	ldr	r0, [r0, #16]
   1059c:	e58dc014 	str	ip, [sp, #20]
   105a0:	e3500000 	cmp	r0, #0
   105a4:	edcd0b02 	vstr	d16, [sp, #8]
   105a8:	edcd0b03 	vstr	d16, [sp, #12]
   105ac:	e58d200c 	str	r2, [sp, #12]
   105b0:	e594201c 	ldr	r2, [r4, #28]
   105b4:	0a000006 	beq	105d4 <C2DGraphics::UpdateDisplay()+0xe0>
   105b8:	e590c000 	ldr	ip, [r0]
   105bc:	e28d1008 	add	r1, sp, #8
   105c0:	e58d3000 	str	r3, [sp]
   105c4:	e59c4018 	ldr	r4, [ip, #24]
   105c8:	e12fff34 	blx	r4
   105cc:	e28dd01c 	add	sp, sp, #28
   105d0:	e8bd8030 	pop	{r4, r5, pc}
   105d4:	e594c014 	ldr	ip, [r4, #20]
   105d8:	e1a03000 	mov	r3, r0
   105dc:	e28d1008 	add	r1, sp, #8
   105e0:	e59ce000 	ldr	lr, [ip]
   105e4:	e58d0000 	str	r0, [sp]
   105e8:	e1a0000c 	mov	r0, ip
   105ec:	e59e4018 	ldr	r4, [lr, #24]
   105f0:	e12fff34 	blx	r4
   105f4:	e28dd01c 	add	sp, sp, #28
   105f8:	e8bd8030 	pop	{r4, r5, pc}

000105fc <InvalidateDataCacheL1Only>:
   105fc:	e92d0070 	push	{r4, r5, r6}
   10600:	e3a00000 	mov	r0, #0
   10604:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   10608:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   1060c:	e3071fff 	movw	r1, #32767	@ 0x7fff
   10610:	e00126a0 	and	r2, r1, r0, lsr #13
   10614:	e30013ff 	movw	r1, #1023	@ 0x3ff
   10618:	e00131a0 	and	r3, r1, r0, lsr #3
   1061c:	e2822001 	add	r2, r2, #1
   10620:	e2000007 	and	r0, r0, #7
   10624:	e2800004 	add	r0, r0, #4
   10628:	e16f1f13 	clz	r1, r3
   1062c:	e2834001 	add	r4, r3, #1
   10630:	e2422001 	sub	r2, r2, #1
   10634:	e1a03004 	mov	r3, r4
   10638:	e2533001 	subs	r3, r3, #1
   1063c:	e1a05113 	lsl	r5, r3, r1
   10640:	e1a06012 	lsl	r6, r2, r0
   10644:	e1855006 	orr	r5, r5, r6
   10648:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   1064c:	cafffff9 	bgt	10638 <InvalidateDataCacheL1Only+0x3c>
   10650:	e3520000 	cmp	r2, #0
   10654:	cafffff5 	bgt	10630 <InvalidateDataCacheL1Only+0x34>
   10658:	f57ff04e 	dsb	st
   1065c:	f57ff06f 	isb	sy
   10660:	e8bd0070 	pop	{r4, r5, r6}
   10664:	e12fff1e 	bx	lr

00010668 <InvalidateDataCache>:
   10668:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   1066c:	f57ff05f 	dmb	sy
   10670:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10674:	e1a03ba0 	lsr	r3, r0, #23
   10678:	e213300e 	ands	r3, r3, #14
   1067c:	0a00001d 	beq	106f8 <InvalidateDataCache+0x90>
   10680:	e3a0a000 	mov	sl, #0
   10684:	e08a20aa 	add	r2, sl, sl, lsr #1
   10688:	e1a01230 	lsr	r1, r0, r2
   1068c:	e2011007 	and	r1, r1, #7
   10690:	e3510002 	cmp	r1, #2
   10694:	ba000014 	blt	106ec <InvalidateDataCache+0x84>
   10698:	e10f9000 	mrs	r9, CPSR
   1069c:	f10c0080 	cpsid	i
   106a0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   106a4:	f57ff06f 	isb	sy
   106a8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   106ac:	e121f009 	msr	CPSR_c, r9
   106b0:	e2012007 	and	r2, r1, #7
   106b4:	e2822004 	add	r2, r2, #4
   106b8:	e30043ff 	movw	r4, #1023	@ 0x3ff
   106bc:	e01441a1 	ands	r4, r4, r1, lsr #3
   106c0:	e16f5f14 	clz	r5, r4
   106c4:	e3077fff 	movw	r7, #32767	@ 0x7fff
   106c8:	e01776a1 	ands	r7, r7, r1, lsr #13
   106cc:	e1a09007 	mov	r9, r7
   106d0:	e18ab514 	orr	fp, sl, r4, lsl r5
   106d4:	e18bb219 	orr	fp, fp, r9, lsl r2
   106d8:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   106dc:	e2599001 	subs	r9, r9, #1
   106e0:	aafffffa 	bge	106d0 <InvalidateDataCache+0x68>
   106e4:	e2544001 	subs	r4, r4, #1
   106e8:	aafffff7 	bge	106cc <InvalidateDataCache+0x64>
   106ec:	e28aa002 	add	sl, sl, #2
   106f0:	e153000a 	cmp	r3, sl
   106f4:	caffffe2 	bgt	10684 <InvalidateDataCache+0x1c>
   106f8:	e3a0a000 	mov	sl, #0
   106fc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10700:	f57ff04e 	dsb	st
   10704:	f57ff06f 	isb	sy
   10708:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   1070c:	e12fff1e 	bx	lr

00010710 <CleanDataCache>:
   10710:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10714:	f57ff05f 	dmb	sy
   10718:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   1071c:	e1a03ba0 	lsr	r3, r0, #23
   10720:	e213300e 	ands	r3, r3, #14
   10724:	0a00001d 	beq	107a0 <CleanDataCache+0x90>
   10728:	e3a0a000 	mov	sl, #0
   1072c:	e08a20aa 	add	r2, sl, sl, lsr #1
   10730:	e1a01230 	lsr	r1, r0, r2
   10734:	e2011007 	and	r1, r1, #7
   10738:	e3510002 	cmp	r1, #2
   1073c:	ba000014 	blt	10794 <CleanDataCache+0x84>
   10740:	e10f9000 	mrs	r9, CPSR
   10744:	f10c0080 	cpsid	i
   10748:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   1074c:	f57ff06f 	isb	sy
   10750:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10754:	e121f009 	msr	CPSR_c, r9
   10758:	e2012007 	and	r2, r1, #7
   1075c:	e2822004 	add	r2, r2, #4
   10760:	e30043ff 	movw	r4, #1023	@ 0x3ff
   10764:	e01441a1 	ands	r4, r4, r1, lsr #3
   10768:	e16f5f14 	clz	r5, r4
   1076c:	e3077fff 	movw	r7, #32767	@ 0x7fff
   10770:	e01776a1 	ands	r7, r7, r1, lsr #13
   10774:	e1a09007 	mov	r9, r7
   10778:	e18ab514 	orr	fp, sl, r4, lsl r5
   1077c:	e18bb219 	orr	fp, fp, r9, lsl r2
   10780:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   10784:	e2599001 	subs	r9, r9, #1
   10788:	aafffffa 	bge	10778 <CleanDataCache+0x68>
   1078c:	e2544001 	subs	r4, r4, #1
   10790:	aafffff7 	bge	10774 <CleanDataCache+0x64>
   10794:	e28aa002 	add	sl, sl, #2
   10798:	e153000a 	cmp	r3, sl
   1079c:	caffffe2 	bgt	1072c <CleanDataCache+0x1c>
   107a0:	e3a0a000 	mov	sl, #0
   107a4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   107a8:	f57ff04e 	dsb	st
   107ac:	f57ff06f 	isb	sy
   107b0:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   107b4:	e12fff1e 	bx	lr

000107b8 <CleanAndInvalidateDataCacheRange>:
   107b8:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   107bc:	e1a03823 	lsr	r3, r3, #16
   107c0:	e203300f 	and	r3, r3, #15
   107c4:	e3a02004 	mov	r2, #4
   107c8:	e1a02312 	lsl	r2, r2, r3
   107cc:	e0801001 	add	r1, r0, r1
   107d0:	e2423001 	sub	r3, r2, #1
   107d4:	e1c00003 	bic	r0, r0, r3
   107d8:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   107dc:	e0800002 	add	r0, r0, r2
   107e0:	e1500001 	cmp	r0, r1
   107e4:	3afffffb 	bcc	107d8 <CleanAndInvalidateDataCacheRange+0x20>
   107e8:	f57ff04e 	dsb	st
   107ec:	e12fff1e 	bx	lr

000107f0 <CMemorySystem::~CMemorySystem()>:
   107f0:	e3073af0 	movw	r3, #31472	@ 0x7af0
   107f4:	e3403001 	movt	r3, #1
   107f8:	e92d4070 	push	{r4, r5, r6, lr}
   107fc:	e1a04000 	mov	r4, r0
   10800:	e5932000 	ldr	r2, [r3]
   10804:	e1500002 	cmp	r0, r2
   10808:	0a000005 	beq	10824 <CMemorySystem::~CMemorySystem()+0x34>
   1080c:	e28400c8 	add	r0, r4, #200	@ 0xc8
   10810:	eb001212 	bl	15060 <CPageAllocator::~CPageAllocator()>
   10814:	e284000c 	add	r0, r4, #12
   10818:	ebfff278 	bl	d200 <CHeapAllocator::~CHeapAllocator()>
   1081c:	e1a00004 	mov	r0, r4
   10820:	e8bd8070 	pop	{r4, r5, r6, pc}
   10824:	e5d02000 	ldrb	r2, [r0]
   10828:	e3a05000 	mov	r5, #0
   1082c:	e5835000 	str	r5, [r3]
   10830:	e1520005 	cmp	r2, r5
   10834:	0afffff4 	beq	1080c <CMemorySystem::~CMemorySystem()+0x1c>
   10838:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   1083c:	e3c33005 	bic	r3, r3, #5
   10840:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   10844:	ebffffb1 	bl	10710 <CleanDataCache>
   10848:	ebffff86 	bl	10668 <InvalidateDataCache>
   1084c:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   10850:	f57ff04f 	dsb	sy
   10854:	eaffffec 	b	1080c <CMemorySystem::~CMemorySystem()+0x1c>

00010858 <CMemorySystem::Destructor()>:
   10858:	e3073af0 	movw	r3, #31472	@ 0x7af0
   1085c:	e3403001 	movt	r3, #1
   10860:	e5932000 	ldr	r2, [r3]
   10864:	e1520000 	cmp	r2, r0
   10868:	112fff1e 	bxne	lr
   1086c:	e5d22000 	ldrb	r2, [r2]
   10870:	e92d4010 	push	{r4, lr}
   10874:	e3a04000 	mov	r4, #0
   10878:	e1520004 	cmp	r2, r4
   1087c:	e5834000 	str	r4, [r3]
   10880:	08bd8010 	popeq	{r4, pc}
   10884:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   10888:	e3c33005 	bic	r3, r3, #5
   1088c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   10890:	ebffff9e 	bl	10710 <CleanDataCache>
   10894:	ebffff73 	bl	10668 <InvalidateDataCache>
   10898:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   1089c:	f57ff04f 	dsb	sy
   108a0:	e8bd8010 	pop	{r4, pc}

000108a4 <CMemorySystem::GetMemSize() const>:
   108a4:	e3073af0 	movw	r3, #31472	@ 0x7af0
   108a8:	e3403001 	movt	r3, #1
   108ac:	e5933000 	ldr	r3, [r3]
   108b0:	e3530000 	cmp	r3, #0
   108b4:	0a000002 	beq	108c4 <CMemorySystem::GetMemSize() const+0x20>
   108b8:	e9930009 	ldmib	r3, {r0, r3}
   108bc:	e0800003 	add	r0, r0, r3
   108c0:	e12fff1e 	bx	lr
   108c4:	e3061fdc 	movw	r1, #28636	@ 0x6fdc
   108c8:	e3401001 	movt	r1, #1
   108cc:	e3a020a1 	mov	r2, #161	@ 0xa1
   108d0:	e281000c 	add	r0, r1, #12
   108d4:	e92d4010 	push	{r4, lr}
   108d8:	eb000616 	bl	12138 <assertion_failed>

000108dc <CMemorySystem::Get()>:
   108dc:	e3073af0 	movw	r3, #31472	@ 0x7af0
   108e0:	e3403001 	movt	r3, #1
   108e4:	e5930000 	ldr	r0, [r3]
   108e8:	e3500000 	cmp	r0, #0
   108ec:	112fff1e 	bxne	lr
   108f0:	e3061fdc 	movw	r1, #28636	@ 0x6fdc
   108f4:	e3401001 	movt	r1, #1
   108f8:	e3a020a7 	mov	r2, #167	@ 0xa7
   108fc:	e281000c 	add	r0, r1, #12
   10900:	e92d4010 	push	{r4, lr}
   10904:	eb00060b 	bl	12138 <assertion_failed>

00010908 <CMemorySystem::EnableMMU()>:
   10908:	e5d03000 	ldrb	r3, [r0]
   1090c:	e92d4010 	push	{r4, lr}
   10910:	e3530000 	cmp	r3, #0
   10914:	0a00001a 	beq	10984 <CMemorySystem::EnableMMU()+0x7c>
   10918:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   1091c:	e3833040 	orr	r3, r3, #64	@ 0x40
   10920:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   10924:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   10928:	e3130001 	tst	r3, #1
   1092c:	1a000019 	bne	10998 <CMemorySystem::EnableMMU()+0x90>
   10930:	e3a04000 	mov	r4, #0
   10934:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   10938:	e59000d8 	ldr	r0, [r0, #216]	@ 0xd8
   1093c:	e1500004 	cmp	r0, r4
   10940:	0a000019 	beq	109ac <CMemorySystem::EnableMMU()+0xa4>
   10944:	eb000095 	bl	10ba0 <CPageTable::GetBaseAddress() const>
   10948:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   1094c:	e3a03001 	mov	r3, #1
   10950:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   10954:	ebffff43 	bl	10668 <InvalidateDataCache>
   10958:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   1095c:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   10960:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   10964:	f57ff04f 	dsb	sy
   10968:	f57ff06f 	isb	sy
   1096c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   10970:	e3c33002 	bic	r3, r3, #2
   10974:	e3833b06 	orr	r3, r3, #6144	@ 0x1800
   10978:	e3833005 	orr	r3, r3, #5
   1097c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   10980:	e8bd8010 	pop	{r4, pc}
   10984:	e3061fdc 	movw	r1, #28636	@ 0x6fdc
   10988:	e3401001 	movt	r1, #1
   1098c:	e3a020ad 	mov	r2, #173	@ 0xad
   10990:	e281001c 	add	r0, r1, #28
   10994:	eb0005e7 	bl	12138 <assertion_failed>
   10998:	e3061fdc 	movw	r1, #28636	@ 0x6fdc
   1099c:	e3401001 	movt	r1, #1
   109a0:	e3a020bb 	mov	r2, #187	@ 0xbb
   109a4:	e281002c 	add	r0, r1, #44	@ 0x2c
   109a8:	eb0005e2 	bl	12138 <assertion_failed>
   109ac:	e3061fdc 	movw	r1, #28636	@ 0x6fdc
   109b0:	e3401001 	movt	r1, #1
   109b4:	e3a020c1 	mov	r2, #193	@ 0xc1
   109b8:	e2810058 	add	r0, r1, #88	@ 0x58
   109bc:	eb0005dd 	bl	12138 <assertion_failed>

000109c0 <CMemorySystem::CMemorySystem(bool)>:
   109c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   109c4:	e1a04000 	mov	r4, r0
   109c8:	e280700c 	add	r7, r0, #12
   109cc:	e1a03001 	mov	r3, r1
   109d0:	e3a05000 	mov	r5, #0
   109d4:	e5c03000 	strb	r3, [r0]
   109d8:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
   109dc:	e5805004 	str	r5, [r0, #4]
   109e0:	e28460c8 	add	r6, r4, #200	@ 0xc8
   109e4:	e5805008 	str	r5, [r0, #8]
   109e8:	e1a00007 	mov	r0, r7
   109ec:	e59f110c 	ldr	r1, [pc, #268]	@ 10b00 <CMemorySystem::CMemorySystem(bool)+0x140>
   109f0:	ebfff1eb 	bl	d1a4 <CHeapAllocator::CHeapAllocator(char const*)>
   109f4:	e1a00006 	mov	r0, r6
   109f8:	eb001191 	bl	15044 <CPageAllocator::CPageAllocator()>
   109fc:	e3073af0 	movw	r3, #31472	@ 0x7af0
   10a00:	e3403001 	movt	r3, #1
   10a04:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   10a08:	e5935000 	ldr	r5, [r3]
   10a0c:	e3550000 	cmp	r5, #0
   10a10:	0a000002 	beq	10a20 <CMemorySystem::CMemorySystem(bool)+0x60>
   10a14:	e1a00004 	mov	r0, r4
   10a18:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   10a1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10a20:	e3a01001 	mov	r1, #1
   10a24:	e28d000c 	add	r0, sp, #12
   10a28:	e5834000 	str	r4, [r3]
   10a2c:	eb0008d7 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10a30:	e3a03014 	mov	r3, #20
   10a34:	e3a01005 	mov	r1, #5
   10a38:	e3401001 	movt	r1, #1
   10a3c:	e08d2003 	add	r2, sp, r3
   10a40:	e28d000c 	add	r0, sp, #12
   10a44:	e58d5000 	str	r5, [sp]
   10a48:	eb000922 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10a4c:	e3500000 	cmp	r0, #0
   10a50:	0a000016 	beq	10ab0 <CMemorySystem::CMemorySystem(bool)+0xf0>
   10a54:	e59d3020 	ldr	r3, [sp, #32]
   10a58:	e3530000 	cmp	r3, #0
   10a5c:	1a000022 	bne	10aec <CMemorySystem::CMemorySystem(bool)+0x12c>
   10a60:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   10a64:	e2435501 	sub	r5, r3, #4194304	@ 0x400000
   10a68:	e2432609 	sub	r2, r3, #9437184	@ 0x900000
   10a6c:	e1a00007 	mov	r0, r7
   10a70:	e3a01605 	mov	r1, #5242880	@ 0x500000
   10a74:	e5843004 	str	r3, [r4, #4]
   10a78:	e3a03701 	mov	r3, #262144	@ 0x40000
   10a7c:	ebfff1e0 	bl	d204 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   10a80:	e3a02501 	mov	r2, #4194304	@ 0x400000
   10a84:	e1a01005 	mov	r1, r5
   10a88:	e1a00006 	mov	r0, r6
   10a8c:	eb001174 	bl	15064 <CPageAllocator::Setup(unsigned int, unsigned int)>
   10a90:	e5d43000 	ldrb	r3, [r4]
   10a94:	e3530000 	cmp	r3, #0
   10a98:	1a00000a 	bne	10ac8 <CMemorySystem::CMemorySystem(bool)+0x108>
   10a9c:	e28d000c 	add	r0, sp, #12
   10aa0:	eb0008c1 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   10aa4:	e1a00004 	mov	r0, r4
   10aa8:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   10aac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10ab0:	e3a03303 	mov	r3, #201326592	@ 0xc000000
   10ab4:	e3a026b7 	mov	r2, #191889408	@ 0xb700000
   10ab8:	e3a0552f 	mov	r5, #197132288	@ 0xbc00000
   10abc:	e58d0020 	str	r0, [sp, #32]
   10ac0:	e58d3024 	str	r3, [sp, #36]	@ 0x24
   10ac4:	eaffffe8 	b	10a6c <CMemorySystem::CMemorySystem(bool)+0xac>
   10ac8:	e3a00004 	mov	r0, #4
   10acc:	ebfff190 	bl	d114 <operator new(unsigned int)>
   10ad0:	e5941004 	ldr	r1, [r4, #4]
   10ad4:	e1a05000 	mov	r5, r0
   10ad8:	eb00000c 	bl	10b10 <CPageTable::CPageTable(unsigned int)>
   10adc:	e1a00004 	mov	r0, r4
   10ae0:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   10ae4:	ebffff87 	bl	10908 <CMemorySystem::EnableMMU()>
   10ae8:	eaffffeb 	b	10a9c <CMemorySystem::CMemorySystem(bool)+0xdc>
   10aec:	e3061fdc 	movw	r1, #28636	@ 0x6fdc
   10af0:	e3401001 	movt	r1, #1
   10af4:	e3a0204e 	mov	r2, #78	@ 0x4e
   10af8:	e2810074 	add	r0, r1, #116	@ 0x74
   10afc:	eb00058d 	bl	12138 <assertion_failed>
   10b00:	00017048 	.word	0x00017048

00010b04 <CMemorySystem::GetCoherentPage(unsigned int)>:
   10b04:	e1a00600 	lsl	r0, r0, #12
   10b08:	e2800501 	add	r0, r0, #4194304	@ 0x400000
   10b0c:	e12fff1e 	bx	lr

00010b10 <CPageTable::CPageTable(unsigned int)>:
   10b10:	e3a039ba 	mov	r3, #3047424	@ 0x2e8000
   10b14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10b18:	e1a02003 	mov	r2, r3
   10b1c:	e305efec 	movw	lr, #24556	@ 0x5fec
   10b20:	e340e001 	movt	lr, #1
   10b24:	e5803000 	str	r3, [r0]
   10b28:	e3007412 	movw	r7, #1042	@ 0x412
   10b2c:	e3407041 	movt	r7, #65	@ 0x41
   10b30:	e30f5ffe 	movw	r5, #65534	@ 0xfffe
   10b34:	e3445003 	movt	r5, #16387	@ 0x4003
   10b38:	e1a08000 	mov	r8, r0
   10b3c:	e3a03000 	mov	r3, #0
   10b40:	e1a04001 	mov	r4, r1
   10b44:	e300641e 	movw	r6, #1054	@ 0x41e
   10b48:	e300140e 	movw	r1, #1038	@ 0x40e
   10b4c:	e153000e 	cmp	r3, lr
   10b50:	3183c001 	orrcc	ip, r3, r1
   10b54:	3a000009 	bcc	10b80 <CPageTable::CPageTable(unsigned int)+0x70>
   10b58:	e3530501 	cmp	r3, #4194304	@ 0x400000
   10b5c:	01a0c007 	moveq	ip, r7
   10b60:	0a000006 	beq	10b80 <CPageTable::CPageTable(unsigned int)+0x70>
   10b64:	e1530004 	cmp	r3, r4
   10b68:	e1a0c003 	mov	ip, r3
   10b6c:	3183c006 	orrcc	ip, r3, r6
   10b70:	3a000002 	bcc	10b80 <CPageTable::CPageTable(unsigned int)+0x70>
   10b74:	e1530005 	cmp	r3, r5
   10b78:	9383cb41 	orrls	ip, r3, #66560	@ 0x10400
   10b7c:	938cc016 	orrls	ip, ip, #22
   10b80:	e482c004 	str	ip, [r2], #4
   10b84:	e2833601 	add	r3, r3, #1048576	@ 0x100000
   10b88:	e35209bb 	cmp	r2, #3063808	@ 0x2ec000
   10b8c:	1affffee 	bne	10b4c <CPageTable::CPageTable(unsigned int)+0x3c>
   10b90:	ebfffede 	bl	10710 <CleanDataCache>
   10b94:	e1a00008 	mov	r0, r8
   10b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00010b9c <CPageTable::~CPageTable()>:
   10b9c:	e12fff1e 	bx	lr

00010ba0 <CPageTable::GetBaseAddress() const>:
   10ba0:	e5900000 	ldr	r0, [r0]
   10ba4:	e3800059 	orr	r0, r0, #89	@ 0x59
   10ba8:	e12fff1e 	bx	lr

00010bac <CurrentExecutionLevel>:
   10bac:	e10f0000 	mrs	r0, CPSR
   10bb0:	e3100040 	tst	r0, #64	@ 0x40
   10bb4:	07e003d0 	ubfxeq	r0, r0, #7, #1
   10bb8:	13a00002 	movne	r0, #2
   10bbc:	e12fff1e 	bx	lr

00010bc0 <EnterCritical>:
   10bc0:	e2403001 	sub	r3, r0, #1
   10bc4:	e92d4010 	push	{r4, lr}
   10bc8:	e3530001 	cmp	r3, #1
   10bcc:	8a000012 	bhi	10c1c <EnterCritical+0x5c>
   10bd0:	e10f1000 	mrs	r1, CPSR
   10bd4:	e3500002 	cmp	r0, #2
   10bd8:	1a000015 	bne	10c34 <EnterCritical+0x74>
   10bdc:	f10c00c0 	cpsid	if
   10be0:	e3073af8 	movw	r3, #31480	@ 0x7af8
   10be4:	e3403001 	movt	r3, #1
   10be8:	e5932000 	ldr	r2, [r3]
   10bec:	e3520013 	cmp	r2, #19
   10bf0:	8a000017 	bhi	10c54 <EnterCritical+0x94>
   10bf4:	e5932000 	ldr	r2, [r3]
   10bf8:	e3500001 	cmp	r0, #1
   10bfc:	e2820001 	add	r0, r2, #1
   10c00:	e5830000 	str	r0, [r3]
   10c04:	e0833102 	add	r3, r3, r2, lsl #2
   10c08:	e5831008 	str	r1, [r3, #8]
   10c0c:	1a000000 	bne	10c14 <EnterCritical+0x54>
   10c10:	f1080040 	cpsie	f
   10c14:	f57ff05f 	dmb	sy
   10c18:	e8bd8010 	pop	{r4, pc}
   10c1c:	e3061430 	movw	r1, #25648	@ 0x6430
   10c20:	e3401001 	movt	r1, #1
   10c24:	e3060440 	movw	r0, #25664	@ 0x6440
   10c28:	e3400001 	movt	r0, #1
   10c2c:	e3a02064 	mov	r2, #100	@ 0x64
   10c30:	eb000540 	bl	12138 <assertion_failed>
   10c34:	e3110040 	tst	r1, #64	@ 0x40
   10c38:	0affffe7 	beq	10bdc <EnterCritical+0x1c>
   10c3c:	e3061430 	movw	r1, #25648	@ 0x6430
   10c40:	e3401001 	movt	r1, #1
   10c44:	e3060478 	movw	r0, #25720	@ 0x6478
   10c48:	e3400001 	movt	r0, #1
   10c4c:	e3a0206a 	mov	r2, #106	@ 0x6a
   10c50:	eb000538 	bl	12138 <assertion_failed>
   10c54:	e3061430 	movw	r1, #25648	@ 0x6430
   10c58:	e3401001 	movt	r1, #1
   10c5c:	e30604a8 	movw	r0, #25768	@ 0x64a8
   10c60:	e3400001 	movt	r0, #1
   10c64:	e3a0206e 	mov	r2, #110	@ 0x6e
   10c68:	eb000532 	bl	12138 <assertion_failed>

00010c6c <LeaveCritical>:
   10c6c:	f57ff05f 	dmb	sy
   10c70:	f10c0040 	cpsid	f
   10c74:	e3073af8 	movw	r3, #31480	@ 0x7af8
   10c78:	e3403001 	movt	r3, #1
   10c7c:	e5932000 	ldr	r2, [r3]
   10c80:	e3520000 	cmp	r2, #0
   10c84:	0a000006 	beq	10ca4 <LeaveCritical+0x38>
   10c88:	e5932000 	ldr	r2, [r3]
   10c8c:	e2422001 	sub	r2, r2, #1
   10c90:	e5832000 	str	r2, [r3]
   10c94:	e0833102 	add	r3, r3, r2, lsl #2
   10c98:	e5933008 	ldr	r3, [r3, #8]
   10c9c:	e121f003 	msr	CPSR_c, r3
   10ca0:	e12fff1e 	bx	lr
   10ca4:	e3061430 	movw	r1, #25648	@ 0x6430
   10ca8:	e3401001 	movt	r1, #1
   10cac:	e30604d0 	movw	r0, #25808	@ 0x64d0
   10cb0:	e3400001 	movt	r0, #1
   10cb4:	e3a0207f 	mov	r2, #127	@ 0x7f
   10cb8:	e92d4010 	push	{r4, lr}
   10cbc:	eb00051d 	bl	12138 <assertion_failed>

00010cc0 <SyncDataAndInstructionCache>:
   10cc0:	e92d4010 	push	{r4, lr}
   10cc4:	ebfffe91 	bl	10710 <CleanDataCache>
   10cc8:	e3a03000 	mov	r3, #0
   10ccc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10cd0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10cd4:	f57ff04f 	dsb	sy
   10cd8:	f57ff06f 	isb	sy
   10cdc:	e8bd8010 	pop	{r4, pc}

00010ce0 <CInterruptSystem::CInterruptSystem()>:
   10ce0:	e307cb50 	movw	ip, #31568	@ 0x7b50
   10ce4:	e340c001 	movt	ip, #1
   10ce8:	e59c2000 	ldr	r2, [ip]
   10cec:	e3520000 	cmp	r2, #0
   10cf0:	112fff1e 	bxne	lr
   10cf4:	e2403004 	sub	r3, r0, #4
   10cf8:	e2801f53 	add	r1, r0, #332	@ 0x14c
   10cfc:	e58c0000 	str	r0, [ip]
   10d00:	e5a32004 	str	r2, [r3, #4]!
   10d04:	e1530001 	cmp	r3, r1
   10d08:	e5832150 	str	r2, [r3, #336]	@ 0x150
   10d0c:	1afffffb 	bne	10d00 <CInterruptSystem::CInterruptSystem()+0x20>
   10d10:	e12fff1e 	bx	lr

00010d14 <CInterruptSystem::~CInterruptSystem()>:
   10d14:	e3073b50 	movw	r3, #31568	@ 0x7b50
   10d18:	e3403001 	movt	r3, #1
   10d1c:	e5932000 	ldr	r2, [r3]
   10d20:	e1500002 	cmp	r0, r2
   10d24:	112fff1e 	bxne	lr
   10d28:	f10c0080 	cpsid	i
   10d2c:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   10d30:	e3432f00 	movt	r2, #16128	@ 0x3f00
   10d34:	e3a01000 	mov	r1, #0
   10d38:	e3e0c000 	mvn	ip, #0
   10d3c:	e582120c 	str	r1, [r2, #524]	@ 0x20c
   10d40:	e582c21c 	str	ip, [r2, #540]	@ 0x21c
   10d44:	e582c220 	str	ip, [r2, #544]	@ 0x220
   10d48:	e582c224 	str	ip, [r2, #548]	@ 0x224
   10d4c:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   10d50:	e5821040 	str	r1, [r2, #64]	@ 0x40
   10d54:	e5831000 	str	r1, [r3]
   10d58:	e12fff1e 	bx	lr

00010d5c <CInterruptSystem::Destructor()>:
   10d5c:	e3073b50 	movw	r3, #31568	@ 0x7b50
   10d60:	e3403001 	movt	r3, #1
   10d64:	e5932000 	ldr	r2, [r3]
   10d68:	e1520000 	cmp	r2, r0
   10d6c:	112fff1e 	bxne	lr
   10d70:	f10c0080 	cpsid	i
   10d74:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   10d78:	e3432f00 	movt	r2, #16128	@ 0x3f00
   10d7c:	e3a0c101 	mov	ip, #1073741824	@ 0x40000000
   10d80:	e3a01000 	mov	r1, #0
   10d84:	e3e00000 	mvn	r0, #0
   10d88:	e582120c 	str	r1, [r2, #524]	@ 0x20c
   10d8c:	e582021c 	str	r0, [r2, #540]	@ 0x21c
   10d90:	e5820220 	str	r0, [r2, #544]	@ 0x220
   10d94:	e5820224 	str	r0, [r2, #548]	@ 0x224
   10d98:	e58c1040 	str	r1, [ip, #64]	@ 0x40
   10d9c:	e5831000 	str	r1, [r3]
   10da0:	e12fff1e 	bx	lr

00010da4 <CInterruptSystem::Initialize()>:
   10da4:	e3073b50 	movw	r3, #31568	@ 0x7b50
   10da8:	e3403001 	movt	r3, #1
   10dac:	e5933000 	ldr	r3, [r3]
   10db0:	e1530000 	cmp	r3, r0
   10db4:	0a000001 	beq	10dc0 <CInterruptSystem::Initialize()+0x1c>
   10db8:	e3a00001 	mov	r0, #1
   10dbc:	e12fff1e 	bx	lr
   10dc0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   10dc4:	e3a03004 	mov	r3, #4
   10dc8:	e3052318 	movw	r2, #21272	@ 0x5318
   10dcc:	e3402001 	movt	r2, #1
   10dd0:	e24dd00c 	sub	sp, sp, #12
   10dd4:	e58d3004 	str	r3, [sp, #4]
   10dd8:	e3053358 	movw	r3, #21336	@ 0x5358
   10ddc:	e3403001 	movt	r3, #1
   10de0:	e59d0004 	ldr	r0, [sp, #4]
   10de4:	e59dc004 	ldr	ip, [sp, #4]
   10de8:	e59d1004 	ldr	r1, [sp, #4]
   10dec:	e2800014 	add	r0, r0, #20
   10df0:	e0422000 	sub	r2, r2, r0
   10df4:	e2811018 	add	r1, r1, #24
   10df8:	e0433001 	sub	r3, r3, r1
   10dfc:	e59d1004 	ldr	r1, [sp, #4]
   10e00:	e1a02142 	asr	r2, r2, #2
   10e04:	e1a03143 	asr	r3, r3, #2
   10e08:	e2422002 	sub	r2, r2, #2
   10e0c:	e2433002 	sub	r3, r3, #2
   10e10:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   10e14:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   10e18:	e58c2014 	str	r2, [ip, #20]
   10e1c:	e5813018 	str	r3, [r1, #24]
   10e20:	ebffffa6 	bl	10cc0 <SyncDataAndInstructionCache>
   10e24:	e3a00101 	mov	r0, #1073741824	@ 0x40000000
   10e28:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   10e2c:	e3433f00 	movt	r3, #16128	@ 0x3f00
   10e30:	e3e02000 	mvn	r2, #0
   10e34:	e3a01000 	mov	r1, #0
   10e38:	e583120c 	str	r1, [r3, #524]	@ 0x20c
   10e3c:	e583221c 	str	r2, [r3, #540]	@ 0x21c
   10e40:	e5832220 	str	r2, [r3, #544]	@ 0x220
   10e44:	e5832224 	str	r2, [r3, #548]	@ 0x224
   10e48:	e5801040 	str	r1, [r0, #64]	@ 0x40
   10e4c:	f1080080 	cpsie	i
   10e50:	e3a00001 	mov	r0, #1
   10e54:	e28dd00c 	add	sp, sp, #12
   10e58:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00010e5c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   10e5c:	e3510047 	cmp	r1, #71	@ 0x47
   10e60:	e92d4010 	push	{r4, lr}
   10e64:	8a00001e 	bhi	10ee4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   10e68:	e3520000 	cmp	r2, #0
   10e6c:	0a000022 	beq	10efc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   10e70:	e3070a7c 	movw	r0, #31356	@ 0x7a7c
   10e74:	e3400001 	movt	r0, #1
   10e78:	e5d0e001 	ldrb	lr, [r0, #1]
   10e7c:	e5d0c000 	ldrb	ip, [r0]
   10e80:	e18cc40e 	orr	ip, ip, lr, lsl #8
   10e84:	e5d0e002 	ldrb	lr, [r0, #2]
   10e88:	e18cc80e 	orr	ip, ip, lr, lsl #16
   10e8c:	e5d0e003 	ldrb	lr, [r0, #3]
   10e90:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   10e94:	1a00001e 	bne	10f14 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   10e98:	e7e7c452 	ubfx	ip, r2, #8, #8
   10e9c:	e5c0c001 	strb	ip, [r0, #1]
   10ea0:	e7e7c852 	ubfx	ip, r2, #16, #8
   10ea4:	e5c0c002 	strb	ip, [r0, #2]
   10ea8:	e3a0ca0b 	mov	ip, #45056	@ 0xb000
   10eac:	e343cf00 	movt	ip, #16128	@ 0x3f00
   10eb0:	e7e7e453 	ubfx	lr, r3, #8, #8
   10eb4:	e5c02000 	strb	r2, [r0]
   10eb8:	e5c03004 	strb	r3, [r0, #4]
   10ebc:	e1a02c22 	lsr	r2, r2, #24
   10ec0:	e3811080 	orr	r1, r1, #128	@ 0x80
   10ec4:	e5c02003 	strb	r2, [r0, #3]
   10ec8:	e5c0e005 	strb	lr, [r0, #5]
   10ecc:	e7e72853 	ubfx	r2, r3, #16, #8
   10ed0:	e1a03c23 	lsr	r3, r3, #24
   10ed4:	e5c02006 	strb	r2, [r0, #6]
   10ed8:	e5c03007 	strb	r3, [r0, #7]
   10edc:	e58c120c 	str	r1, [ip, #524]	@ 0x20c
   10ee0:	e8bd8010 	pop	{r4, pc}
   10ee4:	e30614e8 	movw	r1, #25832	@ 0x64e8
   10ee8:	e3401001 	movt	r1, #1
   10eec:	e30604f8 	movw	r0, #25848	@ 0x64f8
   10ef0:	e3400001 	movt	r0, #1
   10ef4:	e3a020b7 	mov	r2, #183	@ 0xb7
   10ef8:	eb00048e 	bl	12138 <assertion_failed>
   10efc:	e30614e8 	movw	r1, #25832	@ 0x64e8
   10f00:	e3401001 	movt	r1, #1
   10f04:	e306052c 	movw	r0, #25900	@ 0x652c
   10f08:	e3400001 	movt	r0, #1
   10f0c:	e3a020b8 	mov	r2, #184	@ 0xb8
   10f10:	eb000488 	bl	12138 <assertion_failed>
   10f14:	e30614e8 	movw	r1, #25832	@ 0x64e8
   10f18:	e3401001 	movt	r1, #1
   10f1c:	e306050c 	movw	r0, #25868	@ 0x650c
   10f20:	e3400001 	movt	r0, #1
   10f24:	e3a020b9 	mov	r2, #185	@ 0xb9
   10f28:	eb000482 	bl	12138 <assertion_failed>

00010f2c <CInterruptSystem::DisconnectFIQ()>:
   10f2c:	e3073a7c 	movw	r3, #31356	@ 0x7a7c
   10f30:	e3403001 	movt	r3, #1
   10f34:	e5d32000 	ldrb	r2, [r3]
   10f38:	e5d3c001 	ldrb	ip, [r3, #1]
   10f3c:	e5d30002 	ldrb	r0, [r3, #2]
   10f40:	e5d31003 	ldrb	r1, [r3, #3]
   10f44:	e182240c 	orr	r2, r2, ip, lsl #8
   10f48:	e1822800 	orr	r2, r2, r0, lsl #16
   10f4c:	e1922c01 	orrs	r2, r2, r1, lsl #24
   10f50:	0a00000c 	beq	10f88 <CInterruptSystem::DisconnectFIQ()+0x5c>
   10f54:	e3a01a0b 	mov	r1, #45056	@ 0xb000
   10f58:	e3431f00 	movt	r1, #16128	@ 0x3f00
   10f5c:	e3a02000 	mov	r2, #0
   10f60:	e581220c 	str	r2, [r1, #524]	@ 0x20c
   10f64:	e5c32000 	strb	r2, [r3]
   10f68:	e5c32001 	strb	r2, [r3, #1]
   10f6c:	e5c32002 	strb	r2, [r3, #2]
   10f70:	e5c32003 	strb	r2, [r3, #3]
   10f74:	e5c32004 	strb	r2, [r3, #4]
   10f78:	e5c32005 	strb	r2, [r3, #5]
   10f7c:	e5c32006 	strb	r2, [r3, #6]
   10f80:	e5c32007 	strb	r2, [r3, #7]
   10f84:	e12fff1e 	bx	lr
   10f88:	e30614e8 	movw	r1, #25832	@ 0x64e8
   10f8c:	e3401001 	movt	r1, #1
   10f90:	e3060524 	movw	r0, #25892	@ 0x6524
   10f94:	e3400001 	movt	r0, #1
   10f98:	e3a020ca 	mov	r2, #202	@ 0xca
   10f9c:	e92d4010 	push	{r4, lr}
   10fa0:	eb000464 	bl	12138 <assertion_failed>

00010fa4 <CInterruptSystem::EnableIRQ(unsigned int)>:
   10fa4:	e3500053 	cmp	r0, #83	@ 0x53
   10fa8:	e92d4010 	push	{r4, lr}
   10fac:	8a000017 	bhi	11010 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   10fb0:	e3500047 	cmp	r0, #71	@ 0x47
   10fb4:	8a00000e 	bhi	10ff4 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   10fb8:	e350001f 	cmp	r0, #31
   10fbc:	930b3210 	movwls	r3, #45584	@ 0xb210
   10fc0:	93433f00 	movtls	r3, #16128	@ 0x3f00
   10fc4:	9a000005 	bls	10fe0 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   10fc8:	e350003f 	cmp	r0, #63	@ 0x3f
   10fcc:	e30b2214 	movw	r2, #45588	@ 0xb214
   10fd0:	e3432f00 	movt	r2, #16128	@ 0x3f00
   10fd4:	e30b3218 	movw	r3, #45592	@ 0xb218
   10fd8:	e3433f00 	movt	r3, #16128	@ 0x3f00
   10fdc:	91a03002 	movls	r3, r2
   10fe0:	e200001f 	and	r0, r0, #31
   10fe4:	e3a02001 	mov	r2, #1
   10fe8:	e1a02012 	lsl	r2, r2, r0
   10fec:	e5832000 	str	r2, [r3]
   10ff0:	e8bd8010 	pop	{r4, pc}
   10ff4:	e3500049 	cmp	r0, #73	@ 0x49
   10ff8:	1a00000a 	bne	11028 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   10ffc:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   11000:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   11004:	e3833002 	orr	r3, r3, #2
   11008:	e5823040 	str	r3, [r2, #64]	@ 0x40
   1100c:	e8bd8010 	pop	{r4, pc}
   11010:	e30614e8 	movw	r1, #25832	@ 0x64e8
   11014:	e3401001 	movt	r1, #1
   11018:	e306053c 	movw	r0, #25916	@ 0x653c
   1101c:	e3400001 	movt	r0, #1
   11020:	e3a020d6 	mov	r2, #214	@ 0xd6
   11024:	eb000443 	bl	12138 <assertion_failed>
   11028:	e30614e8 	movw	r1, #25832	@ 0x64e8
   1102c:	e3401001 	movt	r1, #1
   11030:	e3060550 	movw	r0, #25936	@ 0x6550
   11034:	e3400001 	movt	r0, #1
   11038:	e3a020df 	mov	r2, #223	@ 0xdf
   1103c:	eb00043d 	bl	12138 <assertion_failed>

00011040 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11040:	e307cb50 	movw	ip, #31568	@ 0x7b50
   11044:	e340c001 	movt	ip, #1
   11048:	e92d4010 	push	{r4, lr}
   1104c:	e1a0e000 	mov	lr, r0
   11050:	e1a00001 	mov	r0, r1
   11054:	e59cc000 	ldr	ip, [ip]
   11058:	ea000000 	b	11060 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x20>
   1105c:	e1a0e00c 	mov	lr, ip
   11060:	e15c000e 	cmp	ip, lr
   11064:	1afffffc 	bne	1105c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
   11068:	e3500053 	cmp	r0, #83	@ 0x53
   1106c:	8a000007 	bhi	11090 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   11070:	e79c1100 	ldr	r1, [ip, r0, lsl #2]
   11074:	e08ce100 	add	lr, ip, r0, lsl #2
   11078:	e3510000 	cmp	r1, #0
   1107c:	1a000009 	bne	110a8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   11080:	e78c2100 	str	r2, [ip, r0, lsl #2]
   11084:	e58e3150 	str	r3, [lr, #336]	@ 0x150
   11088:	e8bd4010 	pop	{r4, lr}
   1108c:	eaffffc4 	b	10fa4 <CInterruptSystem::EnableIRQ(unsigned int)>
   11090:	e30614e8 	movw	r1, #25832	@ 0x64e8
   11094:	e3401001 	movt	r1, #1
   11098:	e306053c 	movw	r0, #25916	@ 0x653c
   1109c:	e3400001 	movt	r0, #1
   110a0:	e3a02090 	mov	r2, #144	@ 0x90
   110a4:	eb000423 	bl	12138 <assertion_failed>
   110a8:	e30614e8 	movw	r1, #25832	@ 0x64e8
   110ac:	e3401001 	movt	r1, #1
   110b0:	e3060570 	movw	r0, #25968	@ 0x6570
   110b4:	e3400001 	movt	r0, #1
   110b8:	e3a02091 	mov	r2, #145	@ 0x91
   110bc:	eb00041d 	bl	12138 <assertion_failed>

000110c0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   110c0:	e3500053 	cmp	r0, #83	@ 0x53
   110c4:	e92d4010 	push	{r4, lr}
   110c8:	8a000017 	bhi	1112c <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   110cc:	e3500047 	cmp	r0, #71	@ 0x47
   110d0:	8a00000e 	bhi	11110 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   110d4:	e350001f 	cmp	r0, #31
   110d8:	930b321c 	movwls	r3, #45596	@ 0xb21c
   110dc:	93433f00 	movtls	r3, #16128	@ 0x3f00
   110e0:	9a000005 	bls	110fc <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   110e4:	e350003f 	cmp	r0, #63	@ 0x3f
   110e8:	e30b2220 	movw	r2, #45600	@ 0xb220
   110ec:	e3432f00 	movt	r2, #16128	@ 0x3f00
   110f0:	e30b3224 	movw	r3, #45604	@ 0xb224
   110f4:	e3433f00 	movt	r3, #16128	@ 0x3f00
   110f8:	91a03002 	movls	r3, r2
   110fc:	e200001f 	and	r0, r0, #31
   11100:	e3a02001 	mov	r2, #1
   11104:	e1a02012 	lsl	r2, r2, r0
   11108:	e5832000 	str	r2, [r3]
   1110c:	e8bd8010 	pop	{r4, pc}
   11110:	e3500049 	cmp	r0, #73	@ 0x49
   11114:	1a00000a 	bne	11144 <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   11118:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   1111c:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   11120:	e3c33002 	bic	r3, r3, #2
   11124:	e5823040 	str	r3, [r2, #64]	@ 0x40
   11128:	e8bd8010 	pop	{r4, pc}
   1112c:	e30614e8 	movw	r1, #25832	@ 0x64e8
   11130:	e3401001 	movt	r1, #1
   11134:	e306053c 	movw	r0, #25916	@ 0x653c
   11138:	e3400001 	movt	r0, #1
   1113c:	e3a020ee 	mov	r2, #238	@ 0xee
   11140:	eb0003fc 	bl	12138 <assertion_failed>
   11144:	e30614e8 	movw	r1, #25832	@ 0x64e8
   11148:	e3401001 	movt	r1, #1
   1114c:	e3060550 	movw	r0, #25936	@ 0x6550
   11150:	e3400001 	movt	r0, #1
   11154:	e3a020f7 	mov	r2, #247	@ 0xf7
   11158:	eb0003f6 	bl	12138 <assertion_failed>

0001115c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   1115c:	e3072b50 	movw	r2, #31568	@ 0x7b50
   11160:	e3402001 	movt	r2, #1
   11164:	e92d4070 	push	{r4, r5, r6, lr}
   11168:	e1a03000 	mov	r3, r0
   1116c:	e1a05001 	mov	r5, r1
   11170:	e5924000 	ldr	r4, [r2]
   11174:	ea000000 	b	1117c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x20>
   11178:	e1a03004 	mov	r3, r4
   1117c:	e1540003 	cmp	r4, r3
   11180:	1afffffc 	bne	11178 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x1c>
   11184:	e3550053 	cmp	r5, #83	@ 0x53
   11188:	8a000009 	bhi	111b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x58>
   1118c:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   11190:	e0846105 	add	r6, r4, r5, lsl #2
   11194:	e3530000 	cmp	r3, #0
   11198:	0a00000b 	beq	111cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1119c:	e1a00005 	mov	r0, r5
   111a0:	ebffffc6 	bl	110c0 <CInterruptSystem::DisableIRQ(unsigned int)>
   111a4:	e3a03000 	mov	r3, #0
   111a8:	e7843105 	str	r3, [r4, r5, lsl #2]
   111ac:	e5863150 	str	r3, [r6, #336]	@ 0x150
   111b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   111b4:	e30614e8 	movw	r1, #25832	@ 0x64e8
   111b8:	e3401001 	movt	r1, #1
   111bc:	e306053c 	movw	r0, #25916	@ 0x653c
   111c0:	e3400001 	movt	r0, #1
   111c4:	e3a020a2 	mov	r2, #162	@ 0xa2
   111c8:	eb0003da 	bl	12138 <assertion_failed>
   111cc:	e30614e8 	movw	r1, #25832	@ 0x64e8
   111d0:	e3401001 	movt	r1, #1
   111d4:	e306058c 	movw	r0, #25996	@ 0x658c
   111d8:	e3400001 	movt	r0, #1
   111dc:	e3a020a3 	mov	r2, #163	@ 0xa3
   111e0:	eb0003d4 	bl	12138 <assertion_failed>

000111e4 <CInterruptSystem::EnableFIQ(unsigned int)>:
   111e4:	e3500047 	cmp	r0, #71	@ 0x47
   111e8:	8a000004 	bhi	11200 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   111ec:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   111f0:	e3433f00 	movt	r3, #16128	@ 0x3f00
   111f4:	e3800080 	orr	r0, r0, #128	@ 0x80
   111f8:	e583020c 	str	r0, [r3, #524]	@ 0x20c
   111fc:	e12fff1e 	bx	lr
   11200:	e30614e8 	movw	r1, #25832	@ 0x64e8
   11204:	e3401001 	movt	r1, #1
   11208:	e30604f8 	movw	r0, #25848	@ 0x64f8
   1120c:	e3400001 	movt	r0, #1
   11210:	e92d4010 	push	{r4, lr}
   11214:	e3002106 	movw	r2, #262	@ 0x106
   11218:	eb0003c6 	bl	12138 <assertion_failed>

0001121c <CInterruptSystem::DisableFIQ()>:
   1121c:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   11220:	e3433f00 	movt	r3, #16128	@ 0x3f00
   11224:	e3a02000 	mov	r2, #0
   11228:	e583220c 	str	r2, [r3, #524]	@ 0x20c
   1122c:	e12fff1e 	bx	lr

00011230 <CInterruptSystem::Get()>:
   11230:	e3073b50 	movw	r3, #31568	@ 0x7b50
   11234:	e3403001 	movt	r3, #1
   11238:	e5930000 	ldr	r0, [r3]
   1123c:	e3500000 	cmp	r0, #0
   11240:	112fff1e 	bxne	lr
   11244:	e30614e8 	movw	r1, #25832	@ 0x64e8
   11248:	e3401001 	movt	r1, #1
   1124c:	e3060374 	movw	r0, #25460	@ 0x6374
   11250:	e3400001 	movt	r0, #1
   11254:	e3a02f46 	mov	r2, #280	@ 0x118
   11258:	e92d4010 	push	{r4, lr}
   1125c:	eb0003b5 	bl	12138 <assertion_failed>

00011260 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   11260:	e3510053 	cmp	r1, #83	@ 0x53
   11264:	e92d4010 	push	{r4, lr}
   11268:	8a00000b 	bhi	1129c <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   1126c:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   11270:	e0803101 	add	r3, r0, r1, lsl #2
   11274:	e3540000 	cmp	r4, #0
   11278:	0a000003 	beq	1128c <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   1127c:	e5930150 	ldr	r0, [r3, #336]	@ 0x150
   11280:	e12fff34 	blx	r4
   11284:	e3a00001 	mov	r0, #1
   11288:	e8bd8010 	pop	{r4, pc}
   1128c:	e1a00001 	mov	r0, r1
   11290:	ebffff8a 	bl	110c0 <CInterruptSystem::DisableIRQ(unsigned int)>
   11294:	e1a00004 	mov	r0, r4
   11298:	e8bd8010 	pop	{r4, pc}
   1129c:	e30614e8 	movw	r1, #25832	@ 0x64e8
   112a0:	e3401001 	movt	r1, #1
   112a4:	e306053c 	movw	r0, #25916	@ 0x653c
   112a8:	e3400001 	movt	r0, #1
   112ac:	e300211e 	movw	r2, #286	@ 0x11e
   112b0:	eb0003a0 	bl	12138 <assertion_failed>

000112b4 <CInterruptSystem::InterruptHandler()>:
   112b4:	e3073b50 	movw	r3, #31568	@ 0x7b50
   112b8:	e3403001 	movt	r3, #1
   112bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   112c0:	e5938000 	ldr	r8, [r3]
   112c4:	e24dd010 	sub	sp, sp, #16
   112c8:	e3580000 	cmp	r8, #0
   112cc:	0a00003a 	beq	113bc <CInterruptSystem::InterruptHandler()+0x108>
   112d0:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   112d4:	e5926060 	ldr	r6, [r2, #96]	@ 0x60
   112d8:	e3c63e1f 	bic	r3, r6, #496	@ 0x1f0
   112dc:	e3c33002 	bic	r3, r3, #2
   112e0:	e3530000 	cmp	r3, #0
   112e4:	1a00003a 	bne	113d4 <CInterruptSystem::InterruptHandler()+0x120>
   112e8:	e2166002 	ands	r6, r6, #2
   112ec:	1a000025 	bne	11388 <CInterruptSystem::InterruptHandler()+0xd4>
   112f0:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   112f4:	e3433f00 	movt	r3, #16128	@ 0x3f00
   112f8:	e28d7004 	add	r7, sp, #4
   112fc:	e5932204 	ldr	r2, [r3, #516]	@ 0x204
   11300:	e58d2004 	str	r2, [sp, #4]
   11304:	e5932208 	ldr	r2, [r3, #520]	@ 0x208
   11308:	e58d2008 	str	r2, [sp, #8]
   1130c:	e5933200 	ldr	r3, [r3, #512]	@ 0x200
   11310:	e6ef3073 	uxtb	r3, r3
   11314:	e58d300c 	str	r3, [sp, #12]
   11318:	e4974004 	ldr	r4, [r7], #4
   1131c:	e3540000 	cmp	r4, #0
   11320:	1a000004 	bne	11338 <CInterruptSystem::InterruptHandler()+0x84>
   11324:	e2866020 	add	r6, r6, #32
   11328:	e3560060 	cmp	r6, #96	@ 0x60
   1132c:	1afffff9 	bne	11318 <CInterruptSystem::InterruptHandler()+0x64>
   11330:	e28dd010 	add	sp, sp, #16
   11334:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11338:	e1a05006 	mov	r5, r6
   1133c:	ea000002 	b	1134c <CInterruptSystem::InterruptHandler()+0x98>
   11340:	e2855001 	add	r5, r5, #1
   11344:	e1b040a4 	lsrs	r4, r4, #1
   11348:	0afffff5 	beq	11324 <CInterruptSystem::InterruptHandler()+0x70>
   1134c:	e3140001 	tst	r4, #1
   11350:	0afffffa 	beq	11340 <CInterruptSystem::InterruptHandler()+0x8c>
   11354:	e3550053 	cmp	r5, #83	@ 0x53
   11358:	8a000011 	bhi	113a4 <CInterruptSystem::InterruptHandler()+0xf0>
   1135c:	e7983105 	ldr	r3, [r8, r5, lsl #2]
   11360:	e3530000 	cmp	r3, #0
   11364:	0a000004 	beq	1137c <CInterruptSystem::InterruptHandler()+0xc8>
   11368:	e2855054 	add	r5, r5, #84	@ 0x54
   1136c:	e7980105 	ldr	r0, [r8, r5, lsl #2]
   11370:	e28dd010 	add	sp, sp, #16
   11374:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11378:	e12fff13 	bx	r3
   1137c:	e1a00005 	mov	r0, r5
   11380:	ebffff4e 	bl	110c0 <CInterruptSystem::DisableIRQ(unsigned int)>
   11384:	eaffffed 	b	11340 <CInterruptSystem::InterruptHandler()+0x8c>
   11388:	e5983124 	ldr	r3, [r8, #292]	@ 0x124
   1138c:	e3530000 	cmp	r3, #0
   11390:	0a000015 	beq	113ec <CInterruptSystem::InterruptHandler()+0x138>
   11394:	e5980274 	ldr	r0, [r8, #628]	@ 0x274
   11398:	e28dd010 	add	sp, sp, #16
   1139c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   113a0:	e12fff13 	bx	r3
   113a4:	e30614e8 	movw	r1, #25832	@ 0x64e8
   113a8:	e3401001 	movt	r1, #1
   113ac:	e306053c 	movw	r0, #25916	@ 0x653c
   113b0:	e3400001 	movt	r0, #1
   113b4:	e300211e 	movw	r2, #286	@ 0x11e
   113b8:	eb00035e 	bl	12138 <assertion_failed>
   113bc:	e30614e8 	movw	r1, #25832	@ 0x64e8
   113c0:	e3401001 	movt	r1, #1
   113c4:	e3060374 	movw	r0, #25460	@ 0x6374
   113c8:	e3400001 	movt	r0, #1
   113cc:	e3002131 	movw	r2, #305	@ 0x131
   113d0:	eb000358 	bl	12138 <assertion_failed>
   113d4:	e30614e8 	movw	r1, #25832	@ 0x64e8
   113d8:	e3401001 	movt	r1, #1
   113dc:	e30605a8 	movw	r0, #26024	@ 0x65a8
   113e0:	e3400001 	movt	r0, #1
   113e4:	e3002135 	movw	r2, #309	@ 0x135
   113e8:	eb000352 	bl	12138 <assertion_failed>
   113ec:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   113f0:	e3c33002 	bic	r3, r3, #2
   113f4:	e5823040 	str	r3, [r2, #64]	@ 0x40
   113f8:	eaffffcc 	b	11330 <CInterruptSystem::InterruptHandler()+0x7c>

000113fc <InterruptHandler>:
   113fc:	eaffffac 	b	112b4 <CInterruptSystem::InterruptHandler()>

00011400 <CGPIOPin::~CGPIOPin()>:
   11400:	e12fff1e 	bx	lr

00011404 <CGPIOPin::~CGPIOPin()>:
   11404:	e92d4010 	push	{r4, lr}
   11408:	e3a01028 	mov	r1, #40	@ 0x28
   1140c:	e1a04000 	mov	r4, r0
   11410:	ebffef57 	bl	d174 <operator delete(void*, unsigned int)>
   11414:	e1a00004 	mov	r0, r4
   11418:	e8bd8010 	pop	{r4, pc}

0001141c <CGPIOPin::CGPIOPin()>:
   1141c:	e59fc02c 	ldr	ip, [pc, #44]	@ 11450 <CGPIOPin::CGPIOPin()+0x34>
   11420:	e3a01000 	mov	r1, #0
   11424:	e3a02006 	mov	r2, #6
   11428:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1142c:	e3a0e036 	mov	lr, #54	@ 0x36
   11430:	e5c02025 	strb	r2, [r0, #37]	@ 0x25
   11434:	e5c02026 	strb	r2, [r0, #38]	@ 0x26
   11438:	e3a0200b 	mov	r2, #11
   1143c:	e8805000 	stm	r0, {ip, lr}
   11440:	e5801018 	str	r1, [r0, #24]
   11444:	e580101c 	str	r1, [r0, #28]
   11448:	e5c02010 	strb	r2, [r0, #16]
   1144c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   11450:	00017078 	.word	0x00017078

00011454 <CGPIOPin::AssignPin(unsigned int)>:
   11454:	e5903004 	ldr	r3, [r0, #4]
   11458:	e92d4070 	push	{r4, r5, r6, lr}
   1145c:	e3530036 	cmp	r3, #54	@ 0x36
   11460:	1a000017 	bne	114c4 <CGPIOPin::AssignPin(unsigned int)+0x70>
   11464:	e1a05000 	mov	r5, r0
   11468:	e1a04001 	mov	r4, r1
   1146c:	e3510035 	cmp	r1, #53	@ 0x35
   11470:	e5801004 	str	r1, [r0, #4]
   11474:	8a000007 	bhi	11498 <CGPIOPin::AssignPin(unsigned int)+0x44>
   11478:	e1a022a4 	lsr	r2, r4, #5
   1147c:	e3a03001 	mov	r3, #1
   11480:	e204401f 	and	r4, r4, #31
   11484:	e1a02102 	lsl	r2, r2, #2
   11488:	e5852008 	str	r2, [r5, #8]
   1148c:	e1a03413 	lsl	r3, r3, r4
   11490:	e585300c 	str	r3, [r5, #12]
   11494:	e8bd8070 	pop	{r4, r5, r6, pc}
   11498:	ebffe1d4 	bl	9bf0 <CMachineInfo::Get()>
   1149c:	e6ef1074 	uxtb	r1, r4
   114a0:	ebffe138 	bl	9988 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   114a4:	e1a04000 	mov	r4, r0
   114a8:	e3500035 	cmp	r0, #53	@ 0x35
   114ac:	e5850004 	str	r0, [r5, #4]
   114b0:	9afffff0 	bls	11478 <CGPIOPin::AssignPin(unsigned int)+0x24>
   114b4:	e59f1018 	ldr	r1, [pc, #24]	@ 114d4 <CGPIOPin::AssignPin(unsigned int)+0x80>
   114b8:	e3a02047 	mov	r2, #71	@ 0x47
   114bc:	e2810020 	add	r0, r1, #32
   114c0:	eb00031c 	bl	12138 <assertion_failed>
   114c4:	e59f1008 	ldr	r1, [pc, #8]	@ 114d4 <CGPIOPin::AssignPin(unsigned int)+0x80>
   114c8:	e3a02040 	mov	r2, #64	@ 0x40
   114cc:	e281000c 	add	r0, r1, #12
   114d0:	eb000318 	bl	12138 <assertion_failed>
   114d4:	00017080 	.word	0x00017080

000114d8 <CGPIOPin::Write(unsigned int)>:
   114d8:	e5903004 	ldr	r3, [r0, #4]
   114dc:	e92d4010 	push	{r4, lr}
   114e0:	e3530035 	cmp	r3, #53	@ 0x35
   114e4:	8a00000f 	bhi	11528 <CGPIOPin::Write(unsigned int)+0x50>
   114e8:	e5d03010 	ldrb	r3, [r0, #16]
   114ec:	e3530004 	cmp	r3, #4
   114f0:	8a000010 	bhi	11538 <CGPIOPin::Write(unsigned int)+0x60>
   114f4:	e3510001 	cmp	r1, #1
   114f8:	8a000012 	bhi	11548 <CGPIOPin::Write(unsigned int)+0x70>
   114fc:	e3a0201c 	mov	r2, #28
   11500:	e3432f20 	movt	r2, #16160	@ 0x3f20
   11504:	e3510000 	cmp	r1, #0
   11508:	e590c008 	ldr	ip, [r0, #8]
   1150c:	e3a03028 	mov	r3, #40	@ 0x28
   11510:	e3433f20 	movt	r3, #16160	@ 0x3f20
   11514:	11a03002 	movne	r3, r2
   11518:	e590200c 	ldr	r2, [r0, #12]
   1151c:	e5801014 	str	r1, [r0, #20]
   11520:	e783200c 	str	r2, [r3, ip]
   11524:	e8bd8010 	pop	{r4, pc}
   11528:	e59f1028 	ldr	r1, [pc, #40]	@ 11558 <CGPIOPin::Write(unsigned int)+0x80>
   1152c:	e3a02095 	mov	r2, #149	@ 0x95
   11530:	e2810020 	add	r0, r1, #32
   11534:	eb0002ff 	bl	12138 <assertion_failed>
   11538:	e59f1018 	ldr	r1, [pc, #24]	@ 11558 <CGPIOPin::Write(unsigned int)+0x80>
   1153c:	e3a02098 	mov	r2, #152	@ 0x98
   11540:	e2810034 	add	r0, r1, #52	@ 0x34
   11544:	eb0002fb 	bl	12138 <assertion_failed>
   11548:	e59f1008 	ldr	r1, [pc, #8]	@ 11558 <CGPIOPin::Write(unsigned int)+0x80>
   1154c:	e3a0209c 	mov	r2, #156	@ 0x9c
   11550:	e2810058 	add	r0, r1, #88	@ 0x58
   11554:	eb0002f7 	bl	12138 <assertion_failed>
   11558:	00017080 	.word	0x00017080

0001155c <CGPIOPin::Read() const>:
   1155c:	e5903004 	ldr	r3, [r0, #4]
   11560:	e92d4010 	push	{r4, lr}
   11564:	e3530035 	cmp	r3, #53	@ 0x35
   11568:	8a00000d 	bhi	115a4 <CGPIOPin::Read() const+0x48>
   1156c:	e5d03010 	ldrb	r3, [r0, #16]
   11570:	e2432003 	sub	r2, r3, #3
   11574:	e3530001 	cmp	r3, #1
   11578:	13520001 	cmpne	r2, #1
   1157c:	8a00000c 	bhi	115b4 <CGPIOPin::Read() const+0x58>
   11580:	e5901008 	ldr	r1, [r0, #8]
   11584:	e3a03034 	mov	r3, #52	@ 0x34
   11588:	e3433f20 	movt	r3, #16160	@ 0x3f20
   1158c:	e590200c 	ldr	r2, [r0, #12]
   11590:	e7913003 	ldr	r3, [r1, r3]
   11594:	e1130002 	tst	r3, r2
   11598:	13a00001 	movne	r0, #1
   1159c:	03a00000 	moveq	r0, #0
   115a0:	e8bd8010 	pop	{r4, pc}
   115a4:	e59f1018 	ldr	r1, [pc, #24]	@ 115c4 <CGPIOPin::Read() const+0x68>
   115a8:	e3a020a8 	mov	r2, #168	@ 0xa8
   115ac:	e2810020 	add	r0, r1, #32
   115b0:	eb0002e0 	bl	12138 <assertion_failed>
   115b4:	e59f1008 	ldr	r1, [pc, #8]	@ 115c4 <CGPIOPin::Read() const+0x68>
   115b8:	e3a020aa 	mov	r2, #170	@ 0xaa
   115bc:	e2810078 	add	r0, r1, #120	@ 0x78
   115c0:	eb0002dc 	bl	12138 <assertion_failed>
   115c4:	00017080 	.word	0x00017080

000115c8 <CGPIOPin::Invert()>:
   115c8:	e5d03010 	ldrb	r3, [r0, #16]
   115cc:	e92d4010 	push	{r4, lr}
   115d0:	e3530002 	cmp	r3, #2
   115d4:	1a000011 	bne	11620 <CGPIOPin::Invert()+0x58>
   115d8:	e5902014 	ldr	r2, [r0, #20]
   115dc:	e5903004 	ldr	r3, [r0, #4]
   115e0:	e2221001 	eor	r1, r2, #1
   115e4:	e3530035 	cmp	r3, #53	@ 0x35
   115e8:	8a000010 	bhi	11630 <CGPIOPin::Invert()+0x68>
   115ec:	e3510001 	cmp	r1, #1
   115f0:	8a000012 	bhi	11640 <CGPIOPin::Invert()+0x78>
   115f4:	e3520001 	cmp	r2, #1
   115f8:	e3a0c01c 	mov	ip, #28
   115fc:	e343cf20 	movt	ip, #16160	@ 0x3f20
   11600:	e5902008 	ldr	r2, [r0, #8]
   11604:	e3a03028 	mov	r3, #40	@ 0x28
   11608:	e3433f20 	movt	r3, #16160	@ 0x3f20
   1160c:	11a0300c 	movne	r3, ip
   11610:	e590c00c 	ldr	ip, [r0, #12]
   11614:	e5801014 	str	r1, [r0, #20]
   11618:	e783c002 	str	ip, [r3, r2]
   1161c:	e8bd8010 	pop	{r4, pc}
   11620:	e59f1028 	ldr	r1, [pc, #40]	@ 11650 <CGPIOPin::Invert()+0x88>
   11624:	e3a020b9 	mov	r2, #185	@ 0xb9
   11628:	e28100d4 	add	r0, r1, #212	@ 0xd4
   1162c:	eb0002c1 	bl	12138 <assertion_failed>
   11630:	e59f1018 	ldr	r1, [pc, #24]	@ 11650 <CGPIOPin::Invert()+0x88>
   11634:	e3a02095 	mov	r2, #149	@ 0x95
   11638:	e2810020 	add	r0, r1, #32
   1163c:	eb0002bd 	bl	12138 <assertion_failed>
   11640:	e59f1008 	ldr	r1, [pc, #8]	@ 11650 <CGPIOPin::Invert()+0x88>
   11644:	e3a0209c 	mov	r2, #156	@ 0x9c
   11648:	e2810058 	add	r0, r1, #88	@ 0x58
   1164c:	eb0002b9 	bl	12138 <assertion_failed>
   11650:	00017080 	.word	0x00017080

00011654 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   11654:	e1a0c000 	mov	ip, r0
   11658:	e5d00010 	ldrb	r0, [r0, #16]
   1165c:	e92d4010 	push	{r4, lr}
   11660:	e240e003 	sub	lr, r0, #3
   11664:	e3500001 	cmp	r0, #1
   11668:	135e0001 	cmpne	lr, #1
   1166c:	8a000027 	bhi	11710 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   11670:	e5dc0025 	ldrb	r0, [ip, #37]	@ 0x25
   11674:	e3500006 	cmp	r0, #6
   11678:	1a000010 	bne	116c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   1167c:	e5dc0026 	ldrb	r0, [ip, #38]	@ 0x26
   11680:	e3500006 	cmp	r0, #6
   11684:	1a000011 	bne	116d0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   11688:	e3510000 	cmp	r1, #0
   1168c:	0a000013 	beq	116e0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   11690:	e59c001c 	ldr	r0, [ip, #28]
   11694:	e3500000 	cmp	r0, #0
   11698:	1a000014 	bne	116f0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   1169c:	e59c0018 	ldr	r0, [ip, #24]
   116a0:	e58c101c 	str	r1, [ip, #28]
   116a4:	e3500000 	cmp	r0, #0
   116a8:	e58c2020 	str	r2, [ip, #32]
   116ac:	e5cc3024 	strb	r3, [ip, #36]	@ 0x24
   116b0:	0a000012 	beq	11700 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   116b4:	e8bd4010 	pop	{r4, lr}
   116b8:	e1a0100c 	mov	r1, ip
   116bc:	ea000f89 	b	154e8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   116c0:	e59f1058 	ldr	r1, [pc, #88]	@ 11720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   116c4:	e3a020c4 	mov	r2, #196	@ 0xc4
   116c8:	e28100f0 	add	r0, r1, #240	@ 0xf0
   116cc:	eb000299 	bl	12138 <assertion_failed>
   116d0:	e59f1048 	ldr	r1, [pc, #72]	@ 11720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   116d4:	e3a020c5 	mov	r2, #197	@ 0xc5
   116d8:	e2810f45 	add	r0, r1, #276	@ 0x114
   116dc:	eb000295 	bl	12138 <assertion_failed>
   116e0:	e59f1038 	ldr	r1, [pc, #56]	@ 11720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   116e4:	e3a020c7 	mov	r2, #199	@ 0xc7
   116e8:	e2810f4f 	add	r0, r1, #316	@ 0x13c
   116ec:	eb000291 	bl	12138 <assertion_failed>
   116f0:	e59f1028 	ldr	r1, [pc, #40]	@ 11720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   116f4:	e3a020c8 	mov	r2, #200	@ 0xc8
   116f8:	e2810f53 	add	r0, r1, #332	@ 0x14c
   116fc:	eb00028d 	bl	12138 <assertion_failed>
   11700:	e59f1018 	ldr	r1, [pc, #24]	@ 11720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   11704:	e3a020cf 	mov	r2, #207	@ 0xcf
   11708:	e2810f57 	add	r0, r1, #348	@ 0x15c
   1170c:	eb000289 	bl	12138 <assertion_failed>
   11710:	e59f1008 	ldr	r1, [pc, #8]	@ 11720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   11714:	e3a020c0 	mov	r2, #192	@ 0xc0
   11718:	e2810078 	add	r0, r1, #120	@ 0x78
   1171c:	eb000285 	bl	12138 <assertion_failed>
   11720:	00017080 	.word	0x00017080

00011724 <CGPIOPin::DisconnectInterrupt()>:
   11724:	e5d03010 	ldrb	r3, [r0, #16]
   11728:	e92d4010 	push	{r4, lr}
   1172c:	e2432003 	sub	r2, r3, #3
   11730:	e3530001 	cmp	r3, #1
   11734:	13520001 	cmpne	r2, #1
   11738:	8a000020 	bhi	117c0 <CGPIOPin::DisconnectInterrupt()+0x9c>
   1173c:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   11740:	e1a01000 	mov	r1, r0
   11744:	e3530006 	cmp	r3, #6
   11748:	1a00000c 	bne	11780 <CGPIOPin::DisconnectInterrupt()+0x5c>
   1174c:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   11750:	e3530006 	cmp	r3, #6
   11754:	1a00000d 	bne	11790 <CGPIOPin::DisconnectInterrupt()+0x6c>
   11758:	e590301c 	ldr	r3, [r0, #28]
   1175c:	e3530000 	cmp	r3, #0
   11760:	0a00000e 	beq	117a0 <CGPIOPin::DisconnectInterrupt()+0x7c>
   11764:	e5900018 	ldr	r0, [r0, #24]
   11768:	e3a03000 	mov	r3, #0
   1176c:	e581301c 	str	r3, [r1, #28]
   11770:	e1500003 	cmp	r0, r3
   11774:	0a00000d 	beq	117b0 <CGPIOPin::DisconnectInterrupt()+0x8c>
   11778:	e8bd4010 	pop	{r4, lr}
   1177c:	ea000f80 	b	15584 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   11780:	e59f1048 	ldr	r1, [pc, #72]	@ 117d0 <CGPIOPin::DisconnectInterrupt()+0xac>
   11784:	e3a020d9 	mov	r2, #217	@ 0xd9
   11788:	e28100f0 	add	r0, r1, #240	@ 0xf0
   1178c:	eb000269 	bl	12138 <assertion_failed>
   11790:	e59f1038 	ldr	r1, [pc, #56]	@ 117d0 <CGPIOPin::DisconnectInterrupt()+0xac>
   11794:	e3a020da 	mov	r2, #218	@ 0xda
   11798:	e2810f45 	add	r0, r1, #276	@ 0x114
   1179c:	eb000265 	bl	12138 <assertion_failed>
   117a0:	e59f1028 	ldr	r1, [pc, #40]	@ 117d0 <CGPIOPin::DisconnectInterrupt()+0xac>
   117a4:	e3a020dc 	mov	r2, #220	@ 0xdc
   117a8:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   117ac:	eb000261 	bl	12138 <assertion_failed>
   117b0:	e59f1018 	ldr	r1, [pc, #24]	@ 117d0 <CGPIOPin::DisconnectInterrupt()+0xac>
   117b4:	e3a020df 	mov	r2, #223	@ 0xdf
   117b8:	e2810f57 	add	r0, r1, #348	@ 0x15c
   117bc:	eb00025d 	bl	12138 <assertion_failed>
   117c0:	e59f1008 	ldr	r1, [pc, #8]	@ 117d0 <CGPIOPin::DisconnectInterrupt()+0xac>
   117c4:	e3a020d5 	mov	r2, #213	@ 0xd5
   117c8:	e2810078 	add	r0, r1, #120	@ 0x78
   117cc:	eb000259 	bl	12138 <assertion_failed>
   117d0:	00017080 	.word	0x00017080

000117d4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   117d4:	e5d03010 	ldrb	r3, [r0, #16]
   117d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   117dc:	e2432003 	sub	r2, r3, #3
   117e0:	e3530001 	cmp	r3, #1
   117e4:	13520001 	cmpne	r2, #1
   117e8:	8a000032 	bhi	118b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
   117ec:	e590301c 	ldr	r3, [r0, #28]
   117f0:	e1a04000 	mov	r4, r0
   117f4:	e3530000 	cmp	r3, #0
   117f8:	0a00001e 	beq	11878 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
   117fc:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   11800:	e3530006 	cmp	r3, #6
   11804:	1a00001f 	bne	11888 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
   11808:	e3510005 	cmp	r1, #5
   1180c:	8a000021 	bhi	11898 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
   11810:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   11814:	e1530001 	cmp	r3, r1
   11818:	0a000022 	beq	118a8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
   1181c:	e3077b54 	movw	r7, #31572	@ 0x7b54
   11820:	e3407001 	movt	r7, #1
   11824:	e3a0200c 	mov	r2, #12
   11828:	e5903008 	ldr	r3, [r0, #8]
   1182c:	e5c01025 	strb	r1, [r0, #37]	@ 0x25
   11830:	e3a0604c 	mov	r6, #76	@ 0x4c
   11834:	e3436f20 	movt	r6, #16160	@ 0x3f20
   11838:	e5970000 	ldr	r0, [r7]
   1183c:	e0050192 	mul	r5, r2, r1
   11840:	e0836006 	add	r6, r3, r6
   11844:	e3500000 	cmp	r0, #0
   11848:	1a000008 	bne	11870 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   1184c:	e7963005 	ldr	r3, [r6, r5]
   11850:	e594200c 	ldr	r2, [r4, #12]
   11854:	e1833002 	orr	r3, r3, r2
   11858:	e7863005 	str	r3, [r6, r5]
   1185c:	e5973000 	ldr	r3, [r7]
   11860:	e3530000 	cmp	r3, #0
   11864:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11868:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1186c:	eafffcfe 	b	10c6c <LeaveCritical>
   11870:	ebfffcd2 	bl	10bc0 <EnterCritical>
   11874:	eafffff4 	b	1184c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
   11878:	e59f1048 	ldr	r1, [pc, #72]	@ 118c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1187c:	e3a020e8 	mov	r2, #232	@ 0xe8
   11880:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   11884:	eb00022b 	bl	12138 <assertion_failed>
   11888:	e59f1038 	ldr	r1, [pc, #56]	@ 118c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1188c:	e3a020ea 	mov	r2, #234	@ 0xea
   11890:	e28100f0 	add	r0, r1, #240	@ 0xf0
   11894:	eb000227 	bl	12138 <assertion_failed>
   11898:	e59f1028 	ldr	r1, [pc, #40]	@ 118c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1189c:	e3a020eb 	mov	r2, #235	@ 0xeb
   118a0:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   118a4:	eb000223 	bl	12138 <assertion_failed>
   118a8:	e59f1018 	ldr	r1, [pc, #24]	@ 118c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   118ac:	e3a020ec 	mov	r2, #236	@ 0xec
   118b0:	e2810e1a 	add	r0, r1, #416	@ 0x1a0
   118b4:	eb00021f 	bl	12138 <assertion_failed>
   118b8:	e59f1008 	ldr	r1, [pc, #8]	@ 118c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   118bc:	e3a020e5 	mov	r2, #229	@ 0xe5
   118c0:	e2810078 	add	r0, r1, #120	@ 0x78
   118c4:	eb00021b 	bl	12138 <assertion_failed>
   118c8:	00017080 	.word	0x00017080

000118cc <CGPIOPin::DisableInterrupt()>:
   118cc:	e5d03010 	ldrb	r3, [r0, #16]
   118d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   118d4:	e2432003 	sub	r2, r3, #3
   118d8:	e3530001 	cmp	r3, #1
   118dc:	13520001 	cmpne	r2, #1
   118e0:	8a000020 	bhi	11968 <CGPIOPin::DisableInterrupt()+0x9c>
   118e4:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   118e8:	e1a04000 	mov	r4, r0
   118ec:	e3530005 	cmp	r3, #5
   118f0:	8a000018 	bhi	11958 <CGPIOPin::DisableInterrupt()+0x8c>
   118f4:	e3077b54 	movw	r7, #31572	@ 0x7b54
   118f8:	e3407001 	movt	r7, #1
   118fc:	e3a0100c 	mov	r1, #12
   11900:	e5902008 	ldr	r2, [r0, #8]
   11904:	e3a0604c 	mov	r6, #76	@ 0x4c
   11908:	e3436f20 	movt	r6, #16160	@ 0x3f20
   1190c:	e5970000 	ldr	r0, [r7]
   11910:	e0826006 	add	r6, r2, r6
   11914:	e0050391 	mul	r5, r1, r3
   11918:	e3500000 	cmp	r0, #0
   1191c:	1a000009 	bne	11948 <CGPIOPin::DisableInterrupt()+0x7c>
   11920:	e7963005 	ldr	r3, [r6, r5]
   11924:	e594200c 	ldr	r2, [r4, #12]
   11928:	e1c33002 	bic	r3, r3, r2
   1192c:	e7863005 	str	r3, [r6, r5]
   11930:	e5973000 	ldr	r3, [r7]
   11934:	e3530000 	cmp	r3, #0
   11938:	1a000004 	bne	11950 <CGPIOPin::DisableInterrupt()+0x84>
   1193c:	e3a03006 	mov	r3, #6
   11940:	e5c43025 	strb	r3, [r4, #37]	@ 0x25
   11944:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11948:	ebfffc9c 	bl	10bc0 <EnterCritical>
   1194c:	eafffff3 	b	11920 <CGPIOPin::DisableInterrupt()+0x54>
   11950:	ebfffcc5 	bl	10c6c <LeaveCritical>
   11954:	eafffff8 	b	1193c <CGPIOPin::DisableInterrupt()+0x70>
   11958:	e59f1018 	ldr	r1, [pc, #24]	@ 11978 <CGPIOPin::DisableInterrupt()+0xac>
   1195c:	e3a020ff 	mov	r2, #255	@ 0xff
   11960:	e2810f6f 	add	r0, r1, #444	@ 0x1bc
   11964:	eb0001f3 	bl	12138 <assertion_failed>
   11968:	e59f1008 	ldr	r1, [pc, #8]	@ 11978 <CGPIOPin::DisableInterrupt()+0xac>
   1196c:	e3a020fb 	mov	r2, #251	@ 0xfb
   11970:	e2810078 	add	r0, r1, #120	@ 0x78
   11974:	eb0001ef 	bl	12138 <assertion_failed>
   11978:	00017080 	.word	0x00017080

0001197c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   1197c:	e5d03010 	ldrb	r3, [r0, #16]
   11980:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11984:	e2432003 	sub	r2, r3, #3
   11988:	e3530001 	cmp	r3, #1
   1198c:	13520001 	cmpne	r2, #1
   11990:	8a000032 	bhi	11a60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
   11994:	e590301c 	ldr	r3, [r0, #28]
   11998:	e1a04000 	mov	r4, r0
   1199c:	e3530000 	cmp	r3, #0
   119a0:	0a00001e 	beq	11a20 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
   119a4:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   119a8:	e3530006 	cmp	r3, #6
   119ac:	1a00001f 	bne	11a30 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
   119b0:	e3510005 	cmp	r1, #5
   119b4:	8a000021 	bhi	11a40 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
   119b8:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   119bc:	e1530001 	cmp	r3, r1
   119c0:	0a000022 	beq	11a50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
   119c4:	e3077b54 	movw	r7, #31572	@ 0x7b54
   119c8:	e3407001 	movt	r7, #1
   119cc:	e3a0200c 	mov	r2, #12
   119d0:	e5903008 	ldr	r3, [r0, #8]
   119d4:	e5c01026 	strb	r1, [r0, #38]	@ 0x26
   119d8:	e3a0604c 	mov	r6, #76	@ 0x4c
   119dc:	e3436f20 	movt	r6, #16160	@ 0x3f20
   119e0:	e5970000 	ldr	r0, [r7]
   119e4:	e0050192 	mul	r5, r2, r1
   119e8:	e0836006 	add	r6, r3, r6
   119ec:	e3500000 	cmp	r0, #0
   119f0:	1a000008 	bne	11a18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   119f4:	e7963005 	ldr	r3, [r6, r5]
   119f8:	e594200c 	ldr	r2, [r4, #12]
   119fc:	e1833002 	orr	r3, r3, r2
   11a00:	e7863005 	str	r3, [r6, r5]
   11a04:	e5973000 	ldr	r3, [r7]
   11a08:	e3530000 	cmp	r3, #0
   11a0c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11a10:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11a14:	eafffc94 	b	10c6c <LeaveCritical>
   11a18:	ebfffc68 	bl	10bc0 <EnterCritical>
   11a1c:	eafffff4 	b	119f4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
   11a20:	e59f1048 	ldr	r1, [pc, #72]	@ 11a70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   11a24:	e3002111 	movw	r2, #273	@ 0x111
   11a28:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   11a2c:	eb0001c1 	bl	12138 <assertion_failed>
   11a30:	e59f1038 	ldr	r1, [pc, #56]	@ 11a70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   11a34:	e3002113 	movw	r2, #275	@ 0x113
   11a38:	e2810f45 	add	r0, r1, #276	@ 0x114
   11a3c:	eb0001bd 	bl	12138 <assertion_failed>
   11a40:	e59f1028 	ldr	r1, [pc, #40]	@ 11a70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   11a44:	e3a02f45 	mov	r2, #276	@ 0x114
   11a48:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   11a4c:	eb0001b9 	bl	12138 <assertion_failed>
   11a50:	e59f1018 	ldr	r1, [pc, #24]	@ 11a70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   11a54:	e3002115 	movw	r2, #277	@ 0x115
   11a58:	e2810e1e 	add	r0, r1, #480	@ 0x1e0
   11a5c:	eb0001b5 	bl	12138 <assertion_failed>
   11a60:	e59f1008 	ldr	r1, [pc, #8]	@ 11a70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   11a64:	e300210e 	movw	r2, #270	@ 0x10e
   11a68:	e2810078 	add	r0, r1, #120	@ 0x78
   11a6c:	eb0001b1 	bl	12138 <assertion_failed>
   11a70:	00017080 	.word	0x00017080

00011a74 <CGPIOPin::DisableInterrupt2()>:
   11a74:	e5d03010 	ldrb	r3, [r0, #16]
   11a78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11a7c:	e2432003 	sub	r2, r3, #3
   11a80:	e3530001 	cmp	r3, #1
   11a84:	13520001 	cmpne	r2, #1
   11a88:	8a000020 	bhi	11b10 <CGPIOPin::DisableInterrupt2()+0x9c>
   11a8c:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   11a90:	e1a04000 	mov	r4, r0
   11a94:	e3530005 	cmp	r3, #5
   11a98:	8a000018 	bhi	11b00 <CGPIOPin::DisableInterrupt2()+0x8c>
   11a9c:	e3077b54 	movw	r7, #31572	@ 0x7b54
   11aa0:	e3407001 	movt	r7, #1
   11aa4:	e3a0100c 	mov	r1, #12
   11aa8:	e5902008 	ldr	r2, [r0, #8]
   11aac:	e3a0604c 	mov	r6, #76	@ 0x4c
   11ab0:	e3436f20 	movt	r6, #16160	@ 0x3f20
   11ab4:	e5970000 	ldr	r0, [r7]
   11ab8:	e0826006 	add	r6, r2, r6
   11abc:	e0050391 	mul	r5, r1, r3
   11ac0:	e3500000 	cmp	r0, #0
   11ac4:	1a000009 	bne	11af0 <CGPIOPin::DisableInterrupt2()+0x7c>
   11ac8:	e7963005 	ldr	r3, [r6, r5]
   11acc:	e594200c 	ldr	r2, [r4, #12]
   11ad0:	e1c33002 	bic	r3, r3, r2
   11ad4:	e7863005 	str	r3, [r6, r5]
   11ad8:	e5973000 	ldr	r3, [r7]
   11adc:	e3530000 	cmp	r3, #0
   11ae0:	1a000004 	bne	11af8 <CGPIOPin::DisableInterrupt2()+0x84>
   11ae4:	e3a03006 	mov	r3, #6
   11ae8:	e5c43026 	strb	r3, [r4, #38]	@ 0x26
   11aec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11af0:	ebfffc32 	bl	10bc0 <EnterCritical>
   11af4:	eafffff3 	b	11ac8 <CGPIOPin::DisableInterrupt2()+0x54>
   11af8:	ebfffc5b 	bl	10c6c <LeaveCritical>
   11afc:	eafffff8 	b	11ae4 <CGPIOPin::DisableInterrupt2()+0x70>
   11b00:	e59f1018 	ldr	r1, [pc, #24]	@ 11b20 <CGPIOPin::DisableInterrupt2()+0xac>
   11b04:	e3a02f4a 	mov	r2, #296	@ 0x128
   11b08:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   11b0c:	eb000189 	bl	12138 <assertion_failed>
   11b10:	e59f1008 	ldr	r1, [pc, #8]	@ 11b20 <CGPIOPin::DisableInterrupt2()+0xac>
   11b14:	e3a02f49 	mov	r2, #292	@ 0x124
   11b18:	e2810078 	add	r0, r1, #120	@ 0x78
   11b1c:	eb000185 	bl	12138 <assertion_failed>
   11b20:	00017080 	.word	0x00017080

00011b24 <CGPIOPin::AcknowledgeInterrupt()>:
   11b24:	e590301c 	ldr	r3, [r0, #28]
   11b28:	e92d4010 	push	{r4, lr}
   11b2c:	e3530000 	cmp	r3, #0
   11b30:	0a000008 	beq	11b58 <CGPIOPin::AcknowledgeInterrupt()+0x34>
   11b34:	e5d03024 	ldrb	r3, [r0, #36]	@ 0x24
   11b38:	e3530000 	cmp	r3, #0
   11b3c:	1a000009 	bne	11b68 <CGPIOPin::AcknowledgeInterrupt()+0x44>
   11b40:	e5902008 	ldr	r2, [r0, #8]
   11b44:	e3a03040 	mov	r3, #64	@ 0x40
   11b48:	e3433f20 	movt	r3, #16160	@ 0x3f20
   11b4c:	e590100c 	ldr	r1, [r0, #12]
   11b50:	e7821003 	str	r1, [r2, r3]
   11b54:	e8bd8010 	pop	{r4, pc}
   11b58:	e59f1018 	ldr	r1, [pc, #24]	@ 11b78 <CGPIOPin::AcknowledgeInterrupt()+0x54>
   11b5c:	e3002137 	movw	r2, #311	@ 0x137
   11b60:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   11b64:	eb000173 	bl	12138 <assertion_failed>
   11b68:	e59f1008 	ldr	r1, [pc, #8]	@ 11b78 <CGPIOPin::AcknowledgeInterrupt()+0x54>
   11b6c:	e3a02f4e 	mov	r2, #312	@ 0x138
   11b70:	e2810e22 	add	r0, r1, #544	@ 0x220
   11b74:	eb00016f 	bl	12138 <assertion_failed>
   11b78:	00017080 	.word	0x00017080

00011b7c <CGPIOPin::SetModeAll(unsigned int, unsigned int)>:
   11b7c:	e1100001 	tst	r0, r1
   11b80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b84:	1a00002b 	bne	11c38 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xbc>
   11b88:	e3078b54 	movw	r8, #31572	@ 0x7b54
   11b8c:	e3408001 	movt	r8, #1
   11b90:	e1804001 	orr	r4, r0, r1
   11b94:	e1a07001 	mov	r7, r1
   11b98:	e5980000 	ldr	r0, [r8]
   11b9c:	e3500000 	cmp	r0, #0
   11ba0:	1a000022 	bne	11c30 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xb4>
   11ba4:	e3a06000 	mov	r6, #0
   11ba8:	e3436f20 	movt	r6, #16160	@ 0x3f20
   11bac:	e3a0e000 	mov	lr, #0
   11bb0:	e3a05001 	mov	r5, #1
   11bb4:	e3a01007 	mov	r1, #7
   11bb8:	e30093ff 	movw	r9, #1023	@ 0x3ff
   11bbc:	e0143e19 	ands	r3, r4, r9, lsl lr
   11bc0:	1a000008 	bne	11be8 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x6c>
   11bc4:	e28ee00a 	add	lr, lr, #10
   11bc8:	e2866004 	add	r6, r6, #4
   11bcc:	e35e0028 	cmp	lr, #40	@ 0x28
   11bd0:	1afffff9 	bne	11bbc <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x40>
   11bd4:	e5983000 	ldr	r3, [r8]
   11bd8:	e3530000 	cmp	r3, #0
   11bdc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11be0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11be4:	eafffc20 	b	10c6c <LeaveCritical>
   11be8:	e596c000 	ldr	ip, [r6]
   11bec:	e3a02000 	mov	r2, #0
   11bf0:	e1a0300e 	mov	r3, lr
   11bf4:	ea000003 	b	11c08 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x8c>
   11bf8:	e2833001 	add	r3, r3, #1
   11bfc:	e2822003 	add	r2, r2, #3
   11c00:	e3530020 	cmp	r3, #32
   11c04:	0a000007 	beq	11c28 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xac>
   11c08:	e1a00315 	lsl	r0, r5, r3
   11c0c:	e1140000 	tst	r4, r0
   11c10:	0a000002 	beq	11c20 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xa4>
   11c14:	e1ccc211 	bic	ip, ip, r1, lsl r2
   11c18:	e1170000 	tst	r7, r0
   11c1c:	118cc215 	orrne	ip, ip, r5, lsl r2
   11c20:	e352001b 	cmp	r2, #27
   11c24:	1afffff3 	bne	11bf8 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x7c>
   11c28:	e586c000 	str	ip, [r6]
   11c2c:	eaffffe4 	b	11bc4 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x48>
   11c30:	ebfffbe2 	bl	10bc0 <EnterCritical>
   11c34:	eaffffda 	b	11ba4 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x28>
   11c38:	e59f1008 	ldr	r1, [pc, #8]	@ 11c48 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xcc>
   11c3c:	e3002143 	movw	r2, #323	@ 0x143
   11c40:	e2810f8b 	add	r0, r1, #556	@ 0x22c
   11c44:	eb00013b 	bl	12138 <assertion_failed>
   11c48:	00017080 	.word	0x00017080

00011c4c <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   11c4c:	e1d12000 	bics	r2, r1, r0
   11c50:	13a03000 	movne	r3, #0
   11c54:	13433f20 	movtne	r3, #16160	@ 0x3f20
   11c58:	15832028 	strne	r2, [r3, #40]	@ 0x28
   11c5c:	e0100001 	ands	r0, r0, r1
   11c60:	13a03000 	movne	r3, #0
   11c64:	13433f20 	movtne	r3, #16160	@ 0x3f20
   11c68:	1583001c 	strne	r0, [r3, #28]
   11c6c:	e12fff1e 	bx	lr

00011c70 <CGPIOPin::ReadAll()>:
   11c70:	e3a03000 	mov	r3, #0
   11c74:	e3433f20 	movt	r3, #16160	@ 0x3f20
   11c78:	e5930034 	ldr	r0, [r3, #52]	@ 0x34
   11c7c:	e12fff1e 	bx	lr

00011c80 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   11c80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c84:	e3074b54 	movw	r4, #31572	@ 0x7b54
   11c88:	e3404001 	movt	r4, #1
   11c8c:	e1a05000 	mov	r5, r0
   11c90:	e1a06001 	mov	r6, r1
   11c94:	e5940000 	ldr	r0, [r4]
   11c98:	e3500000 	cmp	r0, #0
   11c9c:	1a000015 	bne	11cf8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
   11ca0:	e3a07098 	mov	r7, #152	@ 0x98
   11ca4:	e3437f20 	movt	r7, #16160	@ 0x3f20
   11ca8:	e5959008 	ldr	r9, [r5, #8]
   11cac:	e3560002 	cmp	r6, #2
   11cb0:	8a000012 	bhi	11d00 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
   11cb4:	e3a08000 	mov	r8, #0
   11cb8:	e3438f20 	movt	r8, #16160	@ 0x3f20
   11cbc:	e3a00005 	mov	r0, #5
   11cc0:	e5886094 	str	r6, [r8, #148]	@ 0x94
   11cc4:	ebffe98e 	bl	c304 <CTimer::SimpleusDelay(unsigned int)>
   11cc8:	e595300c 	ldr	r3, [r5, #12]
   11ccc:	e7893007 	str	r3, [r9, r7]
   11cd0:	e3a00005 	mov	r0, #5
   11cd4:	ebffe98a 	bl	c304 <CTimer::SimpleusDelay(unsigned int)>
   11cd8:	e3a03000 	mov	r3, #0
   11cdc:	e5883094 	str	r3, [r8, #148]	@ 0x94
   11ce0:	e7893007 	str	r3, [r9, r7]
   11ce4:	e5943000 	ldr	r3, [r4]
   11ce8:	e3530000 	cmp	r3, #0
   11cec:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cf0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cf4:	eafffbdc 	b	10c6c <LeaveCritical>
   11cf8:	ebfffbb0 	bl	10bc0 <EnterCritical>
   11cfc:	eaffffe7 	b	11ca0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
   11d00:	e59f1008 	ldr	r1, [pc, #8]	@ 11d10 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   11d04:	e3002196 	movw	r2, #406	@ 0x196
   11d08:	e2810f92 	add	r0, r1, #584	@ 0x248
   11d0c:	eb000109 	bl	12138 <assertion_failed>
   11d10:	00017080 	.word	0x00017080

00011d14 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   11d14:	e5903004 	ldr	r3, [r0, #4]
   11d18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11d1c:	e3530035 	cmp	r3, #53	@ 0x35
   11d20:	8a000021 	bhi	11dac <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
   11d24:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
   11d28:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
   11d2c:	e1a06001 	mov	r6, r1
   11d30:	e3a0100a 	mov	r1, #10
   11d34:	e3560005 	cmp	r6, #5
   11d38:	e0820392 	umull	r0, r2, r2, r3
   11d3c:	e1a021a2 	lsr	r2, r2, #3
   11d40:	e282053f 	add	r0, r2, #264241152	@ 0xfc00000
   11d44:	e2800702 	add	r0, r0, #524288	@ 0x80000
   11d48:	e0633291 	mls	r3, r1, r2, r3
   11d4c:	e1a07100 	lsl	r7, r0, #2
   11d50:	e0834083 	add	r4, r3, r3, lsl #1
   11d54:	8a000018 	bhi	11dbc <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   11d58:	e3075b54 	movw	r5, #31572	@ 0x7b54
   11d5c:	e3405001 	movt	r5, #1
   11d60:	e5950000 	ldr	r0, [r5]
   11d64:	e3500000 	cmp	r0, #0
   11d68:	1a00000d 	bne	11da4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
   11d6c:	e3072070 	movw	r2, #28784	@ 0x7070
   11d70:	e3402001 	movt	r2, #1
   11d74:	e0822106 	add	r2, r2, r6, lsl #2
   11d78:	e5973000 	ldr	r3, [r7]
   11d7c:	e3a01007 	mov	r1, #7
   11d80:	e5922278 	ldr	r2, [r2, #632]	@ 0x278
   11d84:	e1c33411 	bic	r3, r3, r1, lsl r4
   11d88:	e1833412 	orr	r3, r3, r2, lsl r4
   11d8c:	e5873000 	str	r3, [r7]
   11d90:	e5953000 	ldr	r3, [r5]
   11d94:	e3530000 	cmp	r3, #0
   11d98:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11d9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11da0:	eafffbb1 	b	10c6c <LeaveCritical>
   11da4:	ebfffb85 	bl	10bc0 <EnterCritical>
   11da8:	eaffffef 	b	11d6c <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   11dac:	e59f1018 	ldr	r1, [pc, #24]	@ 11dcc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   11db0:	e30021b2 	movw	r2, #434	@ 0x1b2
   11db4:	e2810020 	add	r0, r1, #32
   11db8:	eb0000de 	bl	12138 <assertion_failed>
   11dbc:	e59f1008 	ldr	r1, [pc, #8]	@ 11dcc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   11dc0:	e30021b6 	movw	r2, #438	@ 0x1b6
   11dc4:	e2810f95 	add	r0, r1, #596	@ 0x254
   11dc8:	eb0000da 	bl	12138 <assertion_failed>
   11dcc:	00017080 	.word	0x00017080

00011dd0 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   11dd0:	e351000a 	cmp	r1, #10
   11dd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11dd8:	8a00005a 	bhi	11f48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x178>
   11ddc:	e3510001 	cmp	r1, #1
   11de0:	e1a03001 	mov	r3, r1
   11de4:	33a01001 	movcc	r1, #1
   11de8:	e5c01010 	strb	r1, [r0, #16]
   11dec:	e2411005 	sub	r1, r1, #5
   11df0:	e1a06002 	mov	r6, r2
   11df4:	e1a04000 	mov	r4, r0
   11df8:	e6ef2071 	uxtb	r2, r1
   11dfc:	e3520005 	cmp	r2, #5
   11e00:	9a00002e 	bls	11ec0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   11e04:	e3530002 	cmp	r3, #2
   11e08:	13a02000 	movne	r2, #0
   11e0c:	02062001 	andeq	r2, r6, #1
   11e10:	e3520000 	cmp	r2, #0
   11e14:	1a00004f 	bne	11f58 <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
   11e18:	e5943004 	ldr	r3, [r4, #4]
   11e1c:	e3530035 	cmp	r3, #53	@ 0x35
   11e20:	8a00004f 	bhi	11f64 <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   11e24:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
   11e28:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
   11e2c:	e3078b54 	movw	r8, #31572	@ 0x7b54
   11e30:	e3408001 	movt	r8, #1
   11e34:	e0821392 	umull	r1, r2, r2, r3
   11e38:	e3a0100a 	mov	r1, #10
   11e3c:	e5980000 	ldr	r0, [r8]
   11e40:	e1a021a2 	lsr	r2, r2, #3
   11e44:	e3500000 	cmp	r0, #0
   11e48:	e282753f 	add	r7, r2, #264241152	@ 0xfc00000
   11e4c:	e2877702 	add	r7, r7, #524288	@ 0x80000
   11e50:	e0653291 	mls	r5, r1, r2, r3
   11e54:	e1a07107 	lsl	r7, r7, #2
   11e58:	e0855085 	add	r5, r5, r5, lsl #1
   11e5c:	1a000020 	bne	11ee4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   11e60:	e5d42010 	ldrb	r2, [r4, #16]
   11e64:	e3a01007 	mov	r1, #7
   11e68:	e5973000 	ldr	r3, [r7]
   11e6c:	e2422002 	sub	r2, r2, #2
   11e70:	e16f2f12 	clz	r2, r2
   11e74:	e1c33511 	bic	r3, r3, r1, lsl r5
   11e78:	e1a022a2 	lsr	r2, r2, #5
   11e7c:	e1833512 	orr	r3, r3, r2, lsl r5
   11e80:	e5873000 	str	r3, [r7]
   11e84:	e5983000 	ldr	r3, [r8]
   11e88:	e3530000 	cmp	r3, #0
   11e8c:	1a000010 	bne	11ed4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   11e90:	e3560000 	cmp	r6, #0
   11e94:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11e98:	e5d43010 	ldrb	r3, [r4, #16]
   11e9c:	e2433001 	sub	r3, r3, #1
   11ea0:	e3530003 	cmp	r3, #3
   11ea4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   11ea8:	ea000003 	b	11ebc <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   11eac:	00011f1c 	.word	0x00011f1c
   11eb0:	00011f0c 	.word	0x00011f0c
   11eb4:	00011efc 	.word	0x00011efc
   11eb8:	00011eec 	.word	0x00011eec
   11ebc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11ec0:	e3560000 	cmp	r6, #0
   11ec4:	1a000018 	bne	11f2c <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   11ec8:	e1a00004 	mov	r0, r4
   11ecc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11ed0:	eaffff8f 	b	11d14 <CGPIOPin::SetAlternateFunction(unsigned int)>
   11ed4:	ebfffb64 	bl	10c6c <LeaveCritical>
   11ed8:	e3560000 	cmp	r6, #0
   11edc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11ee0:	eaffffec 	b	11e98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc8>
   11ee4:	ebfffb35 	bl	10bc0 <EnterCritical>
   11ee8:	eaffffdc 	b	11e60 <CGPIOPin::SetMode(TGPIOMode, bool)+0x90>
   11eec:	e1a00004 	mov	r0, r4
   11ef0:	e3a01001 	mov	r1, #1
   11ef4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11ef8:	eaffff60 	b	11c80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   11efc:	e1a00004 	mov	r0, r4
   11f00:	e3a01002 	mov	r1, #2
   11f04:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11f08:	eaffff5c 	b	11c80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   11f0c:	e1a00004 	mov	r0, r4
   11f10:	e3a01000 	mov	r1, #0
   11f14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11f18:	eafffd6e 	b	114d8 <CGPIOPin::Write(unsigned int)>
   11f1c:	e1a00004 	mov	r0, r4
   11f20:	e3a01000 	mov	r1, #0
   11f24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11f28:	eaffff54 	b	11c80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   11f2c:	e3a01000 	mov	r1, #0
   11f30:	ebffff52 	bl	11c80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   11f34:	e5d41010 	ldrb	r1, [r4, #16]
   11f38:	e1a00004 	mov	r0, r4
   11f3c:	e2411005 	sub	r1, r1, #5
   11f40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11f44:	eaffff72 	b	11d14 <CGPIOPin::SetAlternateFunction(unsigned int)>
   11f48:	e59f1024 	ldr	r1, [pc, #36]	@ 11f74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   11f4c:	e3a0204f 	mov	r2, #79	@ 0x4f
   11f50:	e2810d0a 	add	r0, r1, #640	@ 0x280
   11f54:	eb000077 	bl	12138 <assertion_failed>
   11f58:	e3a01000 	mov	r1, #0
   11f5c:	ebffff47 	bl	11c80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   11f60:	eaffffac 	b	11e18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
   11f64:	e59f1008 	ldr	r1, [pc, #8]	@ 11f74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   11f68:	e3a0206c 	mov	r2, #108	@ 0x6c
   11f6c:	e2810020 	add	r0, r1, #32
   11f70:	eb000070 	bl	12138 <assertion_failed>
   11f74:	00017080 	.word	0x00017080

00011f78 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   11f78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11f7c:	e3510035 	cmp	r1, #53	@ 0x35
   11f80:	e59f7090 	ldr	r7, [pc, #144]	@ 12018 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
   11f84:	e5803018 	str	r3, [r0, #24]
   11f88:	e1a04000 	mov	r4, r0
   11f8c:	e3a03000 	mov	r3, #0
   11f90:	e1a05001 	mov	r5, r1
   11f94:	e580301c 	str	r3, [r0, #28]
   11f98:	e1a06002 	mov	r6, r2
   11f9c:	e3a03006 	mov	r3, #6
   11fa0:	e5807000 	str	r7, [r0]
   11fa4:	e5c03025 	strb	r3, [r0, #37]	@ 0x25
   11fa8:	e5c03026 	strb	r3, [r0, #38]	@ 0x26
   11fac:	e3a0300b 	mov	r3, #11
   11fb0:	e5801004 	str	r1, [r0, #4]
   11fb4:	e5c03010 	strb	r3, [r0, #16]
   11fb8:	8a00000b 	bhi	11fec <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
   11fbc:	e3a02001 	mov	r2, #1
   11fc0:	e1a032a5 	lsr	r3, r5, #5
   11fc4:	e205501f 	and	r5, r5, #31
   11fc8:	e1a00004 	mov	r0, r4
   11fcc:	e1a03103 	lsl	r3, r3, #2
   11fd0:	e1a01006 	mov	r1, r6
   11fd4:	e1a05512 	lsl	r5, r2, r5
   11fd8:	e5843008 	str	r3, [r4, #8]
   11fdc:	e584500c 	str	r5, [r4, #12]
   11fe0:	ebffff7a 	bl	11dd0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   11fe4:	e1a00004 	mov	r0, r4
   11fe8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11fec:	ebffdeff 	bl	9bf0 <CMachineInfo::Get()>
   11ff0:	e6ef1075 	uxtb	r1, r5
   11ff4:	ebffde63 	bl	9988 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   11ff8:	e1a05000 	mov	r5, r0
   11ffc:	e3500035 	cmp	r0, #53	@ 0x35
   12000:	e5840004 	str	r0, [r4, #4]
   12004:	9affffec 	bls	11fbc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   12008:	e3a02047 	mov	r2, #71	@ 0x47
   1200c:	e2871008 	add	r1, r7, #8
   12010:	e2870028 	add	r0, r7, #40	@ 0x28
   12014:	eb000047 	bl	12138 <assertion_failed>
   12018:	00017078 	.word	0x00017078

0001201c <CGPIOPin::InterruptHandler()>:
   1201c:	e5d03010 	ldrb	r3, [r0, #16]
   12020:	e92d4010 	push	{r4, lr}
   12024:	e2432003 	sub	r2, r3, #3
   12028:	e3530001 	cmp	r3, #1
   1202c:	13520001 	cmpne	r2, #1
   12030:	8a000013 	bhi	12084 <CGPIOPin::InterruptHandler()+0x68>
   12034:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   12038:	e3530005 	cmp	r3, #5
   1203c:	8a000005 	bhi	12058 <CGPIOPin::InterruptHandler()+0x3c>
   12040:	e590301c 	ldr	r3, [r0, #28]
   12044:	e3530000 	cmp	r3, #0
   12048:	0a000009 	beq	12074 <CGPIOPin::InterruptHandler()+0x58>
   1204c:	e8bd4010 	pop	{r4, lr}
   12050:	e5900020 	ldr	r0, [r0, #32]
   12054:	e12fff13 	bx	r3
   12058:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   1205c:	e3530005 	cmp	r3, #5
   12060:	9afffff6 	bls	12040 <CGPIOPin::InterruptHandler()+0x24>
   12064:	e59f1028 	ldr	r1, [pc, #40]	@ 12094 <CGPIOPin::InterruptHandler()+0x78>
   12068:	e30021c6 	movw	r2, #454	@ 0x1c6
   1206c:	e2810fa6 	add	r0, r1, #664	@ 0x298
   12070:	eb000030 	bl	12138 <assertion_failed>
   12074:	e59f1018 	ldr	r1, [pc, #24]	@ 12094 <CGPIOPin::InterruptHandler()+0x78>
   12078:	e30021c9 	movw	r2, #457	@ 0x1c9
   1207c:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   12080:	eb00002c 	bl	12138 <assertion_failed>
   12084:	e59f1008 	ldr	r1, [pc, #8]	@ 12094 <CGPIOPin::InterruptHandler()+0x78>
   12088:	e30021c3 	movw	r2, #451	@ 0x1c3
   1208c:	e2810078 	add	r0, r1, #120	@ 0x78
   12090:	eb000028 	bl	12138 <assertion_failed>
   12094:	00017080 	.word	0x00017080

00012098 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   12098:	e3500035 	cmp	r0, #53	@ 0x35
   1209c:	e92d4070 	push	{r4, r5, r6, lr}
   120a0:	8a00001a 	bhi	12110 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
   120a4:	e3076b54 	movw	r6, #31572	@ 0x7b54
   120a8:	e3406001 	movt	r6, #1
   120ac:	e3a04013 	mov	r4, #19
   120b0:	e3404fc8 	movt	r4, #4040	@ 0xfc8
   120b4:	e08442a0 	add	r4, r4, r0, lsr #5
   120b8:	e200301f 	and	r3, r0, #31
   120bc:	e3a02001 	mov	r2, #1
   120c0:	e5960000 	ldr	r0, [r6]
   120c4:	e1a04104 	lsl	r4, r4, #2
   120c8:	e1a05312 	lsl	r5, r2, r3
   120cc:	e3500000 	cmp	r0, #0
   120d0:	1a00000c 	bne	12108 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   120d4:	e3a0108b 	mov	r1, #139	@ 0x8b
   120d8:	e3431f20 	movt	r1, #16160	@ 0x3f20
   120dc:	e1e02005 	mvn	r2, r5
   120e0:	e5943000 	ldr	r3, [r4]
   120e4:	e0033002 	and	r3, r3, r2
   120e8:	e484300c 	str	r3, [r4], #12
   120ec:	e1540001 	cmp	r4, r1
   120f0:	9afffffa 	bls	120e0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
   120f4:	e5963000 	ldr	r3, [r6]
   120f8:	e3530000 	cmp	r3, #0
   120fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   12100:	e8bd4070 	pop	{r4, r5, r6, lr}
   12104:	eafffad8 	b	10c6c <LeaveCritical>
   12108:	ebfffaac 	bl	10bc0 <EnterCritical>
   1210c:	eafffff0 	b	120d4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   12110:	e59f1008 	ldr	r1, [pc, #8]	@ 12120 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   12114:	e30021cf 	movw	r2, #463	@ 0x1cf
   12118:	e2810fb9 	add	r0, r1, #740	@ 0x2e4
   1211c:	eb000005 	bl	12138 <assertion_failed>
   12120:	00017080 	.word	0x00017080

00012124 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   12124:	e3073b54 	movw	r3, #31572	@ 0x7b54
   12128:	e3403001 	movt	r3, #1
   1212c:	e3a02001 	mov	r2, #1
   12130:	e5832000 	str	r2, [r3]
   12134:	e12fff1e 	bx	lr

00012138 <assertion_failed>:
   12138:	e92d4080 	push	{r7, lr}
   1213c:	e1a04000 	mov	r4, r0
   12140:	e1a05001 	mov	r5, r1
   12144:	e24dd018 	sub	sp, sp, #24
   12148:	e1a06002 	mov	r6, r2
   1214c:	e1a0700d 	mov	r7, sp
   12150:	ebfffc31 	bl	1121c <CInterruptSystem::DisableFIQ()>
   12154:	f1080040 	cpsie	f
   12158:	e28d0008 	add	r0, sp, #8
   1215c:	ebffdee2 	bl	9cec <CString::CString()>
   12160:	e1a02005 	mov	r2, r5
   12164:	e1a03006 	mov	r3, r6
   12168:	e28d0008 	add	r0, sp, #8
   1216c:	e30615dc 	movw	r1, #26076	@ 0x65dc
   12170:	e3401001 	movt	r1, #1
   12174:	ebffe4c1 	bl	b480 <CString::Format(char const*, ...)>
   12178:	e28d0008 	add	r0, sp, #8
   1217c:	ebffdf12 	bl	9dcc <CString::operator char const*() const>
   12180:	e1a01000 	mov	r1, r0
   12184:	e1a00007 	mov	r0, r7
   12188:	eb000400 	bl	13190 <debug_stacktrace(unsigned int const*, char const*)>
   1218c:	eb000882 	bl	1439c <CLogger::Get()>
   12190:	e1a05000 	mov	r5, r0
   12194:	e28d0008 	add	r0, sp, #8
   12198:	ebffdf0b 	bl	9dcc <CString::operator char const*() const>
   1219c:	e30635e4 	movw	r3, #26084	@ 0x65e4
   121a0:	e3403001 	movt	r3, #1
   121a4:	e1a01000 	mov	r1, r0
   121a8:	e3a02000 	mov	r2, #0
   121ac:	e1a00005 	mov	r0, r5
   121b0:	e58d4000 	str	r4, [sp]
   121b4:	eb000a41 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   121b8:	eafffffe 	b	121b8 <assertion_failed+0x80>

000121bc <CDisplay::GetParent() const>:
   121bc:	e3a00000 	mov	r0, #0
   121c0:	e12fff1e 	bx	lr

000121c4 <CDisplay::GetOffsetX() const>:
   121c4:	e3a00000 	mov	r0, #0
   121c8:	e12fff1e 	bx	lr

000121cc <CDisplay::CDisplay(CDisplay::TColorModel)>:
   121cc:	e59f2008 	ldr	r2, [pc, #8]	@ 121dc <CDisplay::CDisplay(CDisplay::TColorModel)+0x10>
   121d0:	e5802000 	str	r2, [r0]
   121d4:	e5c01004 	strb	r1, [r0, #4]
   121d8:	e12fff1e 	bx	lr
   121dc:	00017380 	.word	0x00017380

000121e0 <CDisplay::GetColorModel() const>:
   121e0:	e5d00004 	ldrb	r0, [r0, #4]
   121e4:	e12fff1e 	bx	lr

000121e8 <CDisplay::GetColor(CDisplay::TColor) const>:
   121e8:	e5d03004 	ldrb	r3, [r0, #4]
   121ec:	e3530004 	cmp	r3, #4
   121f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   121f4:	ea000070 	b	123bc <CDisplay::GetColor(CDisplay::TColor) const+0x1d4>
   121f8:	00012254 	.word	0x00012254
   121fc:	00012288 	.word	0x00012288
   12200:	00012274 	.word	0x00012274
   12204:	0001227c 	.word	0x0001227c
   12208:	0001220c 	.word	0x0001220c
   1220c:	e30f3fff 	movw	r3, #65535	@ 0xffff
   12210:	e3403055 	movt	r3, #85	@ 0x55
   12214:	e1510003 	cmp	r1, r3
   12218:	0a000061 	beq	123a4 <CDisplay::GetColor(CDisplay::TColor) const+0x1bc>
   1221c:	e3510856 	cmp	r1, #5636096	@ 0x560000
   12220:	e30a3aaa 	movw	r3, #43690	@ 0xaaaa
   12224:	2a000022 	bcs	122b4 <CDisplay::GetColor(CDisplay::TColor) const+0xcc>
   12228:	e1510003 	cmp	r1, r3
   1222c:	0a00004e 	beq	1236c <CDisplay::GetColor(CDisplay::TColor) const+0x184>
   12230:	8a00003d 	bhi	1232c <CDisplay::GetColor(CDisplay::TColor) const+0x144>
   12234:	e35100aa 	cmp	r1, #170	@ 0xaa
   12238:	0a00004f 	beq	1237c <CDisplay::GetColor(CDisplay::TColor) const+0x194>
   1223c:	e3510caa 	cmp	r1, #43520	@ 0xaa00
   12240:	0a00004b 	beq	12374 <CDisplay::GetColor(CDisplay::TColor) const+0x18c>
   12244:	e3510000 	cmp	r1, #0
   12248:	13a0000f 	movne	r0, #15
   1224c:	03a00000 	moveq	r0, #0
   12250:	e12fff1e 	bx	lr
   12254:	e1a022a1 	lsr	r2, r1, #5
   12258:	e7e431d1 	ubfx	r3, r1, #3, #5
   1225c:	e2022e7e 	and	r2, r2, #2016	@ 0x7e0
   12260:	e1a01421 	lsr	r1, r1, #8
   12264:	e1833002 	orr	r3, r3, r2
   12268:	e2011b3e 	and	r1, r1, #63488	@ 0xf800
   1226c:	e1830001 	orr	r0, r3, r1
   12270:	e12fff1e 	bx	lr
   12274:	e38104ff 	orr	r0, r1, #-16777216	@ 0xff000000
   12278:	e12fff1e 	bx	lr
   1227c:	e2510000 	subs	r0, r1, #0
   12280:	13a00001 	movne	r0, #1
   12284:	e12fff1e 	bx	lr
   12288:	e1a002a1 	lsr	r0, r1, #5
   1228c:	e7e431d1 	ubfx	r3, r1, #3, #5
   12290:	e2000e7e 	and	r0, r0, #2016	@ 0x7e0
   12294:	e3a02b3e 	mov	r2, #63488	@ 0xf800
   12298:	e34f2fff 	movt	r2, #65535	@ 0xffff
   1229c:	e1833000 	orr	r3, r3, r0
   122a0:	e0022421 	and	r2, r2, r1, lsr #8
   122a4:	e1833002 	orr	r3, r3, r2
   122a8:	e6bf3fb3 	rev16	r3, r3
   122ac:	e6ff0073 	uxth	r0, r3
   122b0:	e12fff1e 	bx	lr
   122b4:	e34030aa 	movt	r3, #170	@ 0xaa
   122b8:	e1510003 	cmp	r1, r3
   122bc:	0a000028 	beq	12364 <CDisplay::GetColor(CDisplay::TColor) const+0x17c>
   122c0:	8a00000b 	bhi	122f4 <CDisplay::GetColor(CDisplay::TColor) const+0x10c>
   122c4:	e3a030aa 	mov	r3, #170	@ 0xaa
   122c8:	e34030aa 	movt	r3, #170	@ 0xaa
   122cc:	e1510003 	cmp	r1, r3
   122d0:	0a000031 	beq	1239c <CDisplay::GetColor(CDisplay::TColor) const+0x1b4>
   122d4:	e3a03c55 	mov	r3, #21760	@ 0x5500
   122d8:	e34030aa 	movt	r3, #170	@ 0xaa
   122dc:	e1510003 	cmp	r1, r3
   122e0:	0a00002b 	beq	12394 <CDisplay::GetColor(CDisplay::TColor) const+0x1ac>
   122e4:	e35108aa 	cmp	r1, #11141120	@ 0xaa0000
   122e8:	13a0000f 	movne	r0, #15
   122ec:	03a00001 	moveq	r0, #1
   122f0:	e12fff1e 	bx	lr
   122f4:	e30535ff 	movw	r3, #22015	@ 0x55ff
   122f8:	e34030ff 	movt	r3, #255	@ 0xff
   122fc:	e1510003 	cmp	r1, r3
   12300:	0a000021 	beq	1238c <CDisplay::GetColor(CDisplay::TColor) const+0x1a4>
   12304:	e30f3f55 	movw	r3, #65365	@ 0xff55
   12308:	e34030ff 	movt	r3, #255	@ 0xff
   1230c:	e1510003 	cmp	r1, r3
   12310:	0a00001b 	beq	12384 <CDisplay::GetColor(CDisplay::TColor) const+0x19c>
   12314:	e3053555 	movw	r3, #21845	@ 0x5555
   12318:	e34030ff 	movt	r3, #255	@ 0xff
   1231c:	e1510003 	cmp	r1, r3
   12320:	13a0000f 	movne	r0, #15
   12324:	03a00009 	moveq	r0, #9
   12328:	e12fff1e 	bx	lr
   1232c:	e30535ff 	movw	r3, #22015	@ 0x55ff
   12330:	e3403055 	movt	r3, #85	@ 0x55
   12334:	e1510003 	cmp	r1, r3
   12338:	0a00001d 	beq	123b4 <CDisplay::GetColor(CDisplay::TColor) const+0x1cc>
   1233c:	e30f3f55 	movw	r3, #65365	@ 0xff55
   12340:	e3403055 	movt	r3, #85	@ 0x55
   12344:	e1510003 	cmp	r1, r3
   12348:	0a000017 	beq	123ac <CDisplay::GetColor(CDisplay::TColor) const+0x1c4>
   1234c:	e3053555 	movw	r3, #21845	@ 0x5555
   12350:	e3403055 	movt	r3, #85	@ 0x55
   12354:	e1510003 	cmp	r1, r3
   12358:	13a0000f 	movne	r0, #15
   1235c:	03a00008 	moveq	r0, #8
   12360:	e12fff1e 	bx	lr
   12364:	e3a00007 	mov	r0, #7
   12368:	e12fff1e 	bx	lr
   1236c:	e3a00006 	mov	r0, #6
   12370:	e12fff1e 	bx	lr
   12374:	e3a00002 	mov	r0, #2
   12378:	e12fff1e 	bx	lr
   1237c:	e3a00004 	mov	r0, #4
   12380:	e12fff1e 	bx	lr
   12384:	e3a0000b 	mov	r0, #11
   12388:	e12fff1e 	bx	lr
   1238c:	e3a0000d 	mov	r0, #13
   12390:	e12fff1e 	bx	lr
   12394:	e3a00003 	mov	r0, #3
   12398:	e12fff1e 	bx	lr
   1239c:	e3a00005 	mov	r0, #5
   123a0:	e12fff1e 	bx	lr
   123a4:	e3a0000e 	mov	r0, #14
   123a8:	e12fff1e 	bx	lr
   123ac:	e3a0000a 	mov	r0, #10
   123b0:	e12fff1e 	bx	lr
   123b4:	e3a0000c 	mov	r0, #12
   123b8:	e12fff1e 	bx	lr
   123bc:	e3a00000 	mov	r0, #0
   123c0:	e12fff1e 	bx	lr

000123c4 <CDisplay::GetColor(unsigned int) const>:
   123c4:	e5d03004 	ldrb	r3, [r0, #4]
   123c8:	e3530004 	cmp	r3, #4
   123cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   123d0:	ea00007f 	b	125d4 <CDisplay::GetColor(unsigned int) const+0x210>
   123d4:	000123ec 	.word	0x000123ec
   123d8:	000123e8 	.word	0x000123e8
   123dc:	0001247c 	.word	0x0001247c
   123e0:	00012484 	.word	0x00012484
   123e4:	00012430 	.word	0x00012430
   123e8:	e6bf1fb1 	rev16	r1, r1
   123ec:	e6ff3071 	uxth	r3, r1
   123f0:	e3530b2a 	cmp	r3, #43008	@ 0xa800
   123f4:	0a000059 	beq	12560 <CDisplay::GetColor(unsigned int) const+0x19c>
   123f8:	8a000025 	bhi	12494 <CDisplay::GetColor(unsigned int) const+0xd0>
   123fc:	e30522aa 	movw	r2, #21162	@ 0x52aa
   12400:	e1530002 	cmp	r3, r2
   12404:	0a00005f 	beq	12588 <CDisplay::GetColor(unsigned int) const+0x1c4>
   12408:	8a00003d 	bhi	12504 <CDisplay::GetColor(unsigned int) const+0x140>
   1240c:	e3530d15 	cmp	r3, #1344	@ 0x540
   12410:	0a000050 	beq	12558 <CDisplay::GetColor(unsigned int) const+0x194>
   12414:	e3002555 	movw	r2, #1365	@ 0x555
   12418:	e1530002 	cmp	r3, r2
   1241c:	0a00005f 	beq	125a0 <CDisplay::GetColor(unsigned int) const+0x1dc>
   12420:	e3530015 	cmp	r3, #21
   12424:	03a000aa 	moveq	r0, #170	@ 0xaa
   12428:	13a00000 	movne	r0, #0
   1242c:	e12fff1e 	bx	lr
   12430:	e2411001 	sub	r1, r1, #1
   12434:	e351000e 	cmp	r1, #14
   12438:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1243c:	ea000064 	b	125d4 <CDisplay::GetColor(unsigned int) const+0x210>
   12440:	00012560 	.word	0x00012560
   12444:	00012558 	.word	0x00012558
   12448:	0001254c 	.word	0x0001254c
   1244c:	000125cc 	.word	0x000125cc
   12450:	000125a8 	.word	0x000125a8
   12454:	000125a0 	.word	0x000125a0
   12458:	00012594 	.word	0x00012594
   1245c:	00012588 	.word	0x00012588
   12460:	0001257c 	.word	0x0001257c
   12464:	00012540 	.word	0x00012540
   12468:	00012534 	.word	0x00012534
   1246c:	000125c0 	.word	0x000125c0
   12470:	000125b4 	.word	0x000125b4
   12474:	00012570 	.word	0x00012570
   12478:	00012568 	.word	0x00012568
   1247c:	e3c104ff 	bic	r0, r1, #-16777216	@ 0xff000000
   12480:	e12fff1e 	bx	lr
   12484:	e3510000 	cmp	r1, #0
   12488:	03a00000 	moveq	r0, #0
   1248c:	13e004ff 	mvnne	r0, #-16777216	@ 0xff000000
   12490:	e12fff1e 	bx	lr
   12494:	e30f2aaa 	movw	r2, #64170	@ 0xfaaa
   12498:	e1530002 	cmp	r3, r2
   1249c:	0a000036 	beq	1257c <CDisplay::GetColor(unsigned int) const+0x1b8>
   124a0:	8a00000b 	bhi	124d4 <CDisplay::GetColor(unsigned int) const+0x110>
   124a4:	e30a2aa0 	movw	r2, #43680	@ 0xaaa0
   124a8:	e1530002 	cmp	r3, r2
   124ac:	0a000026 	beq	1254c <CDisplay::GetColor(unsigned int) const+0x188>
   124b0:	e30a2d55 	movw	r2, #44373	@ 0xad55
   124b4:	e1530002 	cmp	r3, r2
   124b8:	0a000035 	beq	12594 <CDisplay::GetColor(unsigned int) const+0x1d0>
   124bc:	e30a2815 	movw	r2, #43029	@ 0xa815
   124c0:	e1530002 	cmp	r3, r2
   124c4:	e3a000aa 	mov	r0, #170	@ 0xaa
   124c8:	e34000aa 	movt	r0, #170	@ 0xaa
   124cc:	13a00000 	movne	r0, #0
   124d0:	e12fff1e 	bx	lr
   124d4:	e30f2fea 	movw	r2, #65514	@ 0xffea
   124d8:	e1530002 	cmp	r3, r2
   124dc:	0a000014 	beq	12534 <CDisplay::GetColor(unsigned int) const+0x170>
   124e0:	e30f2fff 	movw	r2, #65535	@ 0xffff
   124e4:	e1530002 	cmp	r3, r2
   124e8:	0a00001e 	beq	12568 <CDisplay::GetColor(unsigned int) const+0x1a4>
   124ec:	e30f2abf 	movw	r2, #64191	@ 0xfabf
   124f0:	e1530002 	cmp	r3, r2
   124f4:	e30505ff 	movw	r0, #22015	@ 0x55ff
   124f8:	e34000ff 	movt	r0, #255	@ 0xff
   124fc:	13a00000 	movne	r0, #0
   12500:	e12fff1e 	bx	lr
   12504:	e30527ea 	movw	r2, #22506	@ 0x57ea
   12508:	e1530002 	cmp	r3, r2
   1250c:	0a00000b 	beq	12540 <CDisplay::GetColor(unsigned int) const+0x17c>
   12510:	e30527ff 	movw	r2, #22527	@ 0x57ff
   12514:	e1530002 	cmp	r3, r2
   12518:	0a000014 	beq	12570 <CDisplay::GetColor(unsigned int) const+0x1ac>
   1251c:	e30522bf 	movw	r2, #21183	@ 0x52bf
   12520:	e1530002 	cmp	r3, r2
   12524:	e30505ff 	movw	r0, #22015	@ 0x55ff
   12528:	e3400055 	movt	r0, #85	@ 0x55
   1252c:	13a00000 	movne	r0, #0
   12530:	e12fff1e 	bx	lr
   12534:	e30f0f55 	movw	r0, #65365	@ 0xff55
   12538:	e34000ff 	movt	r0, #255	@ 0xff
   1253c:	e12fff1e 	bx	lr
   12540:	e30f0f55 	movw	r0, #65365	@ 0xff55
   12544:	e3400055 	movt	r0, #85	@ 0x55
   12548:	e12fff1e 	bx	lr
   1254c:	e3a00c55 	mov	r0, #21760	@ 0x5500
   12550:	e34000aa 	movt	r0, #170	@ 0xaa
   12554:	e12fff1e 	bx	lr
   12558:	e3a00caa 	mov	r0, #43520	@ 0xaa00
   1255c:	e12fff1e 	bx	lr
   12560:	e3a008aa 	mov	r0, #11141120	@ 0xaa0000
   12564:	e12fff1e 	bx	lr
   12568:	e3e004ff 	mvn	r0, #-16777216	@ 0xff000000
   1256c:	e12fff1e 	bx	lr
   12570:	e30f0fff 	movw	r0, #65535	@ 0xffff
   12574:	e3400055 	movt	r0, #85	@ 0x55
   12578:	e12fff1e 	bx	lr
   1257c:	e3050555 	movw	r0, #21845	@ 0x5555
   12580:	e34000ff 	movt	r0, #255	@ 0xff
   12584:	e12fff1e 	bx	lr
   12588:	e3050555 	movw	r0, #21845	@ 0x5555
   1258c:	e3400055 	movt	r0, #85	@ 0x55
   12590:	e12fff1e 	bx	lr
   12594:	e30a0aaa 	movw	r0, #43690	@ 0xaaaa
   12598:	e34000aa 	movt	r0, #170	@ 0xaa
   1259c:	e12fff1e 	bx	lr
   125a0:	e30a0aaa 	movw	r0, #43690	@ 0xaaaa
   125a4:	e12fff1e 	bx	lr
   125a8:	e3a000aa 	mov	r0, #170	@ 0xaa
   125ac:	e34000aa 	movt	r0, #170	@ 0xaa
   125b0:	e12fff1e 	bx	lr
   125b4:	e30505ff 	movw	r0, #22015	@ 0x55ff
   125b8:	e34000ff 	movt	r0, #255	@ 0xff
   125bc:	e12fff1e 	bx	lr
   125c0:	e30505ff 	movw	r0, #22015	@ 0x55ff
   125c4:	e3400055 	movt	r0, #85	@ 0x55
   125c8:	e12fff1e 	bx	lr
   125cc:	e3a000aa 	mov	r0, #170	@ 0xaa
   125d0:	e12fff1e 	bx	lr
   125d4:	e3a00000 	mov	r0, #0
   125d8:	e12fff1e 	bx	lr

000125dc <CBcmFrameBuffer::SetPixel(unsigned int, unsigned int, unsigned int)>:
   125dc:	e590c018 	ldr	ip, [r0, #24]
   125e0:	e35c0010 	cmp	ip, #16
   125e4:	0a00000d 	beq	12620 <CBcmFrameBuffer::SetPixel(unsigned int, unsigned int, unsigned int)+0x44>
   125e8:	e35c0020 	cmp	ip, #32
   125ec:	0a000005 	beq	12608 <CBcmFrameBuffer::SetPixel(unsigned int, unsigned int, unsigned int)+0x2c>
   125f0:	e35c0008 	cmp	ip, #8
   125f4:	0590c028 	ldreq	ip, [r0, #40]	@ 0x28
   125f8:	0021129c 	mlaeq	r1, ip, r2, r1
   125fc:	05902020 	ldreq	r2, [r0, #32]
   12600:	07c13002 	strbeq	r3, [r1, r2]
   12604:	e12fff1e 	bx	lr
   12608:	e590c028 	ldr	ip, [r0, #40]	@ 0x28
   1260c:	e1a01101 	lsl	r1, r1, #2
   12610:	e022129c 	mla	r2, ip, r2, r1
   12614:	e5901020 	ldr	r1, [r0, #32]
   12618:	e7823001 	str	r3, [r2, r1]
   1261c:	e12fff1e 	bx	lr
   12620:	e590c028 	ldr	ip, [r0, #40]	@ 0x28
   12624:	e1a01081 	lsl	r1, r1, #1
   12628:	e022129c 	mla	r2, ip, r2, r1
   1262c:	e5901020 	ldr	r1, [r0, #32]
   12630:	e18230b1 	strh	r3, [r2, r1]
   12634:	e12fff1e 	bx	lr

00012638 <CBcmFrameBuffer::GetWidth() const>:
   12638:	e5900008 	ldr	r0, [r0, #8]
   1263c:	e12fff1e 	bx	lr

00012640 <CBcmFrameBuffer::GetHeight() const>:
   12640:	e590000c 	ldr	r0, [r0, #12]
   12644:	e12fff1e 	bx	lr

00012648 <CBcmFrameBuffer::GetDepth() const>:
   12648:	e5900018 	ldr	r0, [r0, #24]
   1264c:	e12fff1e 	bx	lr

00012650 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12650:	e92d4010 	push	{r4, lr}
   12654:	e1a04000 	mov	r4, r0
   12658:	e590002c 	ldr	r0, [r0, #44]	@ 0x2c
   1265c:	e59f3028 	ldr	r3, [pc, #40]	@ 1268c <CBcmFrameBuffer::~CBcmFrameBuffer()+0x3c>
   12660:	e3500000 	cmp	r0, #0
   12664:	e5843000 	str	r3, [r4]
   12668:	0a000001 	beq	12674 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x24>
   1266c:	e3a01014 	mov	r1, #20
   12670:	ebffeabf 	bl	d174 <operator delete(void*, unsigned int)>
   12674:	e3a03000 	mov	r3, #0
   12678:	e28400a0 	add	r0, r4, #160	@ 0xa0
   1267c:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   12680:	eb00032c 	bl	13338 <CDMAChannel::~CDMAChannel()>
   12684:	e1a00004 	mov	r0, r4
   12688:	e8bd8010 	pop	{r4, pc}
   1268c:	000173b0 	.word	0x000173b0

00012690 <CBcmFrameBuffer::SetArea(CDisplay::TArea const&, void const*, void (*)(void*), void*)>:
   12690:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12694:	e280c0f0 	add	ip, r0, #240	@ 0xf0
   12698:	e1a04000 	mov	r4, r0
   1269c:	e24dd014 	sub	sp, sp, #20
   126a0:	e1a05003 	mov	r5, r3
   126a4:	e3a00001 	mov	r0, #1
   126a8:	e59d6028 	ldr	r6, [sp, #40]	@ 0x28
   126ac:	e19cef9f 	ldrex	r14, [ip]
   126b0:	e35e0000 	cmp	lr, #0
   126b4:	1a000002 	bne	126c4 <CBcmFrameBuffer::SetArea(CDisplay::TArea const&, void const*, void (*)(void*), void*)+0x34>
   126b8:	e18c3f90 	strex	r3, r0, [ip]
   126bc:	e3530000 	cmp	r3, #0
   126c0:	1afffff9 	bne	126ac <CBcmFrameBuffer::SetArea(CDisplay::TArea const&, void const*, void (*)(void*), void*)+0x1c>
   126c4:	e35e0000 	cmp	lr, #0
   126c8:	1afffff7 	bne	126ac <CBcmFrameBuffer::SetArea(CDisplay::TArea const&, void const*, void (*)(void*), void*)+0x1c>
   126cc:	e591c000 	ldr	ip, [r1]
   126d0:	e28470a0 	add	r7, r4, #160	@ 0xa0
   126d4:	e5913004 	ldr	r3, [r1, #4]
   126d8:	e5940018 	ldr	r0, [r4, #24]
   126dc:	e043300c 	sub	r3, r3, ip
   126e0:	e591e008 	ldr	lr, [r1, #8]
   126e4:	e00c009c 	mul	ip, ip, r0
   126e8:	e0230093 	mla	r3, r3, r0, r0
   126ec:	e591000c 	ldr	r0, [r1, #12]
   126f0:	e2800001 	add	r0, r0, #1
   126f4:	e040000e 	sub	r0, r0, lr
   126f8:	e58d0000 	str	r0, [sp]
   126fc:	e1a031a3 	lsr	r3, r3, #3
   12700:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
   12704:	e5941020 	ldr	r1, [r4, #32]
   12708:	e021109e 	mla	r1, lr, r0, r1
   1270c:	e0400003 	sub	r0, r0, r3
   12710:	e58d0004 	str	r0, [sp, #4]
   12714:	e3a00002 	mov	r0, #2
   12718:	e58d0008 	str	r0, [sp, #8]
   1271c:	e1a00007 	mov	r0, r7
   12720:	e08111ac 	add	r1, r1, ip, lsr #3
   12724:	eb000524 	bl	13bbc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>
   12728:	e3550000 	cmp	r5, #0
   1272c:	0a00000a 	beq	1275c <CBcmFrameBuffer::SetArea(CDisplay::TArea const&, void const*, void (*)(void*), void*)+0xcc>
   12730:	e1a00007 	mov	r0, r7
   12734:	e1a02004 	mov	r2, r4
   12738:	e58450e8 	str	r5, [r4, #232]	@ 0xe8
   1273c:	e3021780 	movw	r1, #10112	@ 0x2780
   12740:	e3401001 	movt	r1, #1
   12744:	e58460ec 	str	r6, [r4, #236]	@ 0xec
   12748:	eb00059f 	bl	13dcc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)>
   1274c:	e1a00007 	mov	r0, r7
   12750:	e28dd014 	add	sp, sp, #20
   12754:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12758:	ea0005c4 	b	13e70 <CDMAChannel::Start()>
   1275c:	e1a00007 	mov	r0, r7
   12760:	eb0005c2 	bl	13e70 <CDMAChannel::Start()>
   12764:	e1a00007 	mov	r0, r7
   12768:	eb000621 	bl	13ff4 <CDMAChannel::Wait()>
   1276c:	e28430f0 	add	r3, r4, #240	@ 0xf0
   12770:	e3a02000 	mov	r2, #0
   12774:	e5832000 	str	r2, [r3]
   12778:	e28dd014 	add	sp, sp, #20
   1277c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00012780 <CBcmFrameBuffer::DMACompletionRoutine(unsigned int, unsigned int, bool, void*)>:
   12780:	e28320f0 	add	r2, r3, #240	@ 0xf0
   12784:	e3a01000 	mov	r1, #0
   12788:	e5821000 	str	r1, [r2]
   1278c:	e59320e8 	ldr	r2, [r3, #232]	@ 0xe8
   12790:	e59300ec 	ldr	r0, [r3, #236]	@ 0xec
   12794:	e12fff12 	bx	r2

00012798 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12798:	e92d4010 	push	{r4, lr}
   1279c:	e1a04000 	mov	r4, r0
   127a0:	e590002c 	ldr	r0, [r0, #44]	@ 0x2c
   127a4:	e59f3034 	ldr	r3, [pc, #52]	@ 127e0 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x48>
   127a8:	e3500000 	cmp	r0, #0
   127ac:	e5843000 	str	r3, [r4]
   127b0:	0a000001 	beq	127bc <CBcmFrameBuffer::~CBcmFrameBuffer()+0x24>
   127b4:	e3a01014 	mov	r1, #20
   127b8:	ebffea6d 	bl	d174 <operator delete(void*, unsigned int)>
   127bc:	e3a03000 	mov	r3, #0
   127c0:	e28400a0 	add	r0, r4, #160	@ 0xa0
   127c4:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   127c8:	eb0002da 	bl	13338 <CDMAChannel::~CDMAChannel()>
   127cc:	e1a00004 	mov	r0, r4
   127d0:	e3a010f4 	mov	r1, #244	@ 0xf4
   127d4:	ebffea66 	bl	d174 <operator delete(void*, unsigned int)>
   127d8:	e1a00004 	mov	r0, r4
   127dc:	e8bd8010 	pop	{r4, pc}
   127e0:	000173b0 	.word	0x000173b0

000127e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   127e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   127e8:	e3530008 	cmp	r3, #8
   127ec:	e1a07001 	mov	r7, r1
   127f0:	e24dd028 	sub	sp, sp, #40	@ 0x28
   127f4:	e1a06003 	mov	r6, r3
   127f8:	e1a04000 	mov	r4, r0
   127fc:	e1a05002 	mov	r5, r2
   12800:	03a01004 	moveq	r1, #4
   12804:	e5dd804c 	ldrb	r8, [sp, #76]	@ 0x4c
   12808:	0a000002 	beq	12818 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x34>
   1280c:	e2531010 	subs	r1, r3, #16
   12810:	13a01001 	movne	r1, #1
   12814:	e1a01081 	lsl	r1, r1, #1
   12818:	e1a00004 	mov	r0, r4
   1281c:	ebfffe6a 	bl	121cc <CDisplay::CDisplay(CDisplay::TColorModel)>
   12820:	e59d3040 	ldr	r3, [sp, #64]	@ 0x40
   12824:	e5843010 	str	r3, [r4, #16]
   12828:	e59d3044 	ldr	r3, [sp, #68]	@ 0x44
   1282c:	e5843014 	str	r3, [r4, #20]
   12830:	e59d3048 	ldr	r3, [sp, #72]	@ 0x48
   12834:	e584301c 	str	r3, [r4, #28]
   12838:	e59f3178 	ldr	r3, [pc, #376]	@ 129b8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1d4>
   1283c:	e5843000 	str	r3, [r4]
   12840:	e584500c 	str	r5, [r4, #12]
   12844:	e3a05000 	mov	r5, #0
   12848:	e5847008 	str	r7, [r4, #8]
   1284c:	e5846018 	str	r6, [r4, #24]
   12850:	e5845020 	str	r5, [r4, #32]
   12854:	e5845024 	str	r5, [r4, #36]	@ 0x24
   12858:	e5845028 	str	r5, [r4, #40]	@ 0x28
   1285c:	e584502c 	str	r5, [r4, #44]	@ 0x2c
   12860:	ebfffa72 	bl	11230 <CInterruptSystem::Get()>
   12864:	e3a01081 	mov	r1, #129	@ 0x81
   12868:	e1a02000 	mov	r2, r0
   1286c:	e28400a0 	add	r0, r4, #160	@ 0xa0
   12870:	eb00026f 	bl	13234 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   12874:	e594301c 	ldr	r3, [r4, #28]
   12878:	e58450f0 	str	r5, [r4, #240]	@ 0xf0
   1287c:	e1530005 	cmp	r3, r5
   12880:	1a000038 	bne	12968 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x184>
   12884:	e5943008 	ldr	r3, [r4, #8]
   12888:	e1530005 	cmp	r3, r5
   1288c:	0a000002 	beq	1289c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb8>
   12890:	e594300c 	ldr	r3, [r4, #12]
   12894:	e1530005 	cmp	r3, r5
   12898:	1a00001b 	bne	1290c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x128>
   1289c:	e3a01000 	mov	r1, #0
   128a0:	e28d000c 	add	r0, sp, #12
   128a4:	eb000139 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   128a8:	e3a03014 	mov	r3, #20
   128ac:	e3a02000 	mov	r2, #0
   128b0:	e3a01003 	mov	r1, #3
   128b4:	e3401004 	movt	r1, #4
   128b8:	e58d2000 	str	r2, [sp]
   128bc:	e28d000c 	add	r0, sp, #12
   128c0:	e08d2003 	add	r2, sp, r3
   128c4:	eb000183 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   128c8:	e3500000 	cmp	r0, #0
   128cc:	0a000008 	beq	128f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x110>
   128d0:	e59d2020 	ldr	r2, [sp, #32]
   128d4:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   128d8:	e5842008 	str	r2, [r4, #8]
   128dc:	e2422d0a 	sub	r2, r2, #640	@ 0x280
   128e0:	e584300c 	str	r3, [r4, #12]
   128e4:	e2433e1e 	sub	r3, r3, #480	@ 0x1e0
   128e8:	e3530e69 	cmp	r3, #1680	@ 0x690
   128ec:	93520d36 	cmpls	r2, #3456	@ 0xd80
   128f0:	9a000003 	bls	12904 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x120>
   128f4:	e3a02d0a 	mov	r2, #640	@ 0x280
   128f8:	e3a03e1e 	mov	r3, #480	@ 0x1e0
   128fc:	e5842008 	str	r2, [r4, #8]
   12900:	e584300c 	str	r3, [r4, #12]
   12904:	e28d000c 	add	r0, sp, #12
   12908:	eb000127 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   1290c:	e5943010 	ldr	r3, [r4, #16]
   12910:	e3530000 	cmp	r3, #0
   12914:	0a000016 	beq	12974 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x190>
   12918:	e5943014 	ldr	r3, [r4, #20]
   1291c:	e3530000 	cmp	r3, #0
   12920:	0a000013 	beq	12974 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x190>
   12924:	e5943018 	ldr	r3, [r4, #24]
   12928:	e3530008 	cmp	r3, #8
   1292c:	9a000018 	bls	12994 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1b0>
   12930:	e59f1084 	ldr	r1, [pc, #132]	@ 129bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1d8>
   12934:	e3a02070 	mov	r2, #112	@ 0x70
   12938:	e2840030 	add	r0, r4, #48	@ 0x30
   1293c:	ebffe8ec 	bl	ccf4 <memcpy>
   12940:	e594300c 	ldr	r3, [r4, #12]
   12944:	e5940008 	ldr	r0, [r4, #8]
   12948:	e5941010 	ldr	r1, [r4, #16]
   1294c:	e5942014 	ldr	r2, [r4, #20]
   12950:	e5843040 	str	r3, [r4, #64]	@ 0x40
   12954:	e5943018 	ldr	r3, [r4, #24]
   12958:	e584003c 	str	r0, [r4, #60]	@ 0x3c
   1295c:	e5841050 	str	r1, [r4, #80]	@ 0x50
   12960:	e5842054 	str	r2, [r4, #84]	@ 0x54
   12964:	e5843064 	str	r3, [r4, #100]	@ 0x64
   12968:	e1a00004 	mov	r0, r4
   1296c:	e28dd028 	add	sp, sp, #40	@ 0x28
   12970:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12974:	e594300c 	ldr	r3, [r4, #12]
   12978:	e5942008 	ldr	r2, [r4, #8]
   1297c:	e5842010 	str	r2, [r4, #16]
   12980:	e0233398 	mla	r3, r8, r3, r3
   12984:	e5843014 	str	r3, [r4, #20]
   12988:	e5943018 	ldr	r3, [r4, #24]
   1298c:	e3530008 	cmp	r3, #8
   12990:	8affffe6 	bhi	12930 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x14c>
   12994:	e3000414 	movw	r0, #1044	@ 0x414
   12998:	ebffe9e3 	bl	d12c <operator new[](unsigned int)>
   1299c:	e3a02b01 	mov	r2, #1024	@ 0x400
   129a0:	e1a03000 	mov	r3, r0
   129a4:	e3a01000 	mov	r1, #0
   129a8:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   129ac:	e2800014 	add	r0, r0, #20
   129b0:	ebffe8b8 	bl	cc98 <memset>
   129b4:	eaffffdd 	b	12930 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x14c>
   129b8:	000173b0 	.word	0x000173b0
   129bc:	000173d8 	.word	0x000173d8

000129c0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   129c0:	e5903018 	ldr	r3, [r0, #24]
   129c4:	e3530008 	cmp	r3, #8
   129c8:	812fff1e 	bxhi	lr
   129cc:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   129d0:	e1a0c5a2 	lsr	ip, r2, #11
   129d4:	e1a00982 	lsl	r0, r2, #19
   129d8:	e2811004 	add	r1, r1, #4
   129dc:	e200073e 	and	r0, r0, #16252928	@ 0xf80000
   129e0:	e1a02282 	lsl	r2, r2, #5
   129e4:	e180018c 	orr	r0, r0, ip, lsl #3
   129e8:	e2022b3f 	and	r2, r2, #64512	@ 0xfc00
   129ec:	e0833101 	add	r3, r3, r1, lsl #2
   129f0:	e1822000 	orr	r2, r2, r0
   129f4:	e38214ff 	orr	r1, r2, #-16777216	@ 0xff000000
   129f8:	e5c32004 	strb	r2, [r3, #4]
   129fc:	e1a00421 	lsr	r0, r1, #8
   12a00:	e1a02821 	lsr	r2, r1, #16
   12a04:	e5c30005 	strb	r0, [r3, #5]
   12a08:	e1a01c21 	lsr	r1, r1, #24
   12a0c:	e5c32006 	strb	r2, [r3, #6]
   12a10:	e5c31007 	strb	r1, [r3, #7]
   12a14:	e12fff1e 	bx	lr

00012a18 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12a18:	e5903018 	ldr	r3, [r0, #24]
   12a1c:	e3530008 	cmp	r3, #8
   12a20:	812fff1e 	bxhi	lr
   12a24:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   12a28:	e2811004 	add	r1, r1, #4
   12a2c:	e7e7c452 	ubfx	ip, r2, #8, #8
   12a30:	e7e70852 	ubfx	r0, r2, #16, #8
   12a34:	e0833101 	add	r3, r3, r1, lsl #2
   12a38:	e5c32004 	strb	r2, [r3, #4]
   12a3c:	e1a02c22 	lsr	r2, r2, #24
   12a40:	e5c3c005 	strb	ip, [r3, #5]
   12a44:	e5c30006 	strb	r0, [r3, #6]
   12a48:	e5c32007 	strb	r2, [r3, #7]
   12a4c:	e12fff1e 	bx	lr

00012a50 <CBcmFrameBuffer::GetVirtWidth() const>:
   12a50:	e5900010 	ldr	r0, [r0, #16]
   12a54:	e12fff1e 	bx	lr

00012a58 <CBcmFrameBuffer::GetVirtHeight() const>:
   12a58:	e5900014 	ldr	r0, [r0, #20]
   12a5c:	e12fff1e 	bx	lr

00012a60 <CBcmFrameBuffer::GetPitch() const>:
   12a60:	e5900028 	ldr	r0, [r0, #40]	@ 0x28
   12a64:	e12fff1e 	bx	lr

00012a68 <CBcmFrameBuffer::GetBuffer() const>:
   12a68:	e5900020 	ldr	r0, [r0, #32]
   12a6c:	e12fff1e 	bx	lr

00012a70 <CBcmFrameBuffer::GetSize() const>:
   12a70:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   12a74:	e12fff1e 	bx	lr

00012a78 <CBcmFrameBuffer::UpdatePalette()>:
   12a78:	e5903018 	ldr	r3, [r0, #24]
   12a7c:	e3530008 	cmp	r3, #8
   12a80:	9a000001 	bls	12a8c <CBcmFrameBuffer::UpdatePalette()+0x14>
   12a84:	e3a00001 	mov	r0, #1
   12a88:	e12fff1e 	bx	lr
   12a8c:	e92d4010 	push	{r4, lr}
   12a90:	e1a04000 	mov	r4, r0
   12a94:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   12a98:	e24dd010 	sub	sp, sp, #16
   12a9c:	e3a01000 	mov	r1, #0
   12aa0:	e3a02001 	mov	r2, #1
   12aa4:	e28d0008 	add	r0, sp, #8
   12aa8:	e5c3100c 	strb	r1, [r3, #12]
   12aac:	e5c3100d 	strb	r1, [r3, #13]
   12ab0:	e5c3100e 	strb	r1, [r3, #14]
   12ab4:	e5c3100f 	strb	r1, [r3, #15]
   12ab8:	e5c31010 	strb	r1, [r3, #16]
   12abc:	e5c32011 	strb	r2, [r3, #17]
   12ac0:	e5c31012 	strb	r1, [r3, #18]
   12ac4:	e5c31013 	strb	r1, [r3, #19]
   12ac8:	eb0000b0 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12acc:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   12ad0:	e3003408 	movw	r3, #1032	@ 0x408
   12ad4:	e28d0008 	add	r0, sp, #8
   12ad8:	e58d3000 	str	r3, [sp]
   12adc:	e308100b 	movw	r1, #32779	@ 0x800b
   12ae0:	e3401004 	movt	r1, #4
   12ae4:	e3003414 	movw	r3, #1044	@ 0x414
   12ae8:	eb0000fa 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12aec:	e3500000 	cmp	r0, #0
   12af0:	0a000008 	beq	12b18 <CBcmFrameBuffer::UpdatePalette()+0xa0>
   12af4:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   12af8:	e5d2300c 	ldrb	r3, [r2, #12]
   12afc:	e5d2000d 	ldrb	r0, [r2, #13]
   12b00:	e5d2100e 	ldrb	r1, [r2, #14]
   12b04:	e5d2200f 	ldrb	r2, [r2, #15]
   12b08:	e1833400 	orr	r3, r3, r0, lsl #8
   12b0c:	e1833801 	orr	r3, r3, r1, lsl #16
   12b10:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12b14:	0a000004 	beq	12b2c <CBcmFrameBuffer::UpdatePalette()+0xb4>
   12b18:	e28d0008 	add	r0, sp, #8
   12b1c:	eb0000a2 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12b20:	e3a00000 	mov	r0, #0
   12b24:	e28dd010 	add	sp, sp, #16
   12b28:	e8bd8010 	pop	{r4, pc}
   12b2c:	e28d0008 	add	r0, sp, #8
   12b30:	eb00009d 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12b34:	e3a00001 	mov	r0, #1
   12b38:	e28dd010 	add	sp, sp, #16
   12b3c:	e8bd8010 	pop	{r4, pc}

00012b40 <CBcmFrameBuffer::Initialize()>:
   12b40:	e590101c 	ldr	r1, [r0, #28]
   12b44:	e92d4030 	push	{r4, r5, lr}
   12b48:	e3510000 	cmp	r1, #0
   12b4c:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
   12b50:	13a04000 	movne	r4, #0
   12b54:	0a000002 	beq	12b64 <CBcmFrameBuffer::Initialize()+0x24>
   12b58:	e1a00004 	mov	r0, r4
   12b5c:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   12b60:	e8bd8030 	pop	{r4, r5, pc}
   12b64:	e1a04000 	mov	r4, r0
   12b68:	e28d0008 	add	r0, sp, #8
   12b6c:	eb000087 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12b70:	e3a02070 	mov	r2, #112	@ 0x70
   12b74:	e2841030 	add	r1, r4, #48	@ 0x30
   12b78:	e28d0008 	add	r0, sp, #8
   12b7c:	eb00008f 	bl	12dc0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12b80:	e3500000 	cmp	r0, #0
   12b84:	0a000031 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12b88:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   12b8c:	e3530000 	cmp	r3, #0
   12b90:	0a00002e 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12b94:	e5943040 	ldr	r3, [r4, #64]	@ 0x40
   12b98:	e3530000 	cmp	r3, #0
   12b9c:	0a00002b 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12ba0:	e5943050 	ldr	r3, [r4, #80]	@ 0x50
   12ba4:	e3530000 	cmp	r3, #0
   12ba8:	0a000028 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12bac:	e5943054 	ldr	r3, [r4, #84]	@ 0x54
   12bb0:	e3530000 	cmp	r3, #0
   12bb4:	0a000025 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12bb8:	e5943064 	ldr	r3, [r4, #100]	@ 0x64
   12bbc:	e3530000 	cmp	r3, #0
   12bc0:	0a000022 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12bc4:	e5943088 	ldr	r3, [r4, #136]	@ 0x88
   12bc8:	e3530000 	cmp	r3, #0
   12bcc:	0a00001f 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12bd0:	e594108c 	ldr	r1, [r4, #140]	@ 0x8c
   12bd4:	e3c33103 	bic	r3, r3, #-1073741824	@ 0xc0000000
   12bd8:	e594209c 	ldr	r2, [r4, #156]	@ 0x9c
   12bdc:	e1a00004 	mov	r0, r4
   12be0:	e5841024 	str	r1, [r4, #36]	@ 0x24
   12be4:	e5843020 	str	r3, [r4, #32]
   12be8:	e5842028 	str	r2, [r4, #40]	@ 0x28
   12bec:	ebffffa1 	bl	12a78 <CBcmFrameBuffer::UpdatePalette()>
   12bf0:	e2504000 	subs	r4, r0, #0
   12bf4:	0a000015 	beq	12c50 <CBcmFrameBuffer::Initialize()+0x110>
   12bf8:	ebffd7e7 	bl	8b9c <CKernelOptions::Get()>
   12bfc:	e3500000 	cmp	r0, #0
   12c00:	0a000013 	beq	12c54 <CBcmFrameBuffer::Initialize()+0x114>
   12c04:	ebffd7cf 	bl	8b48 <CKernelOptions::GetBacklight() const>
   12c08:	e2505000 	subs	r5, r0, #0
   12c0c:	0a000010 	beq	12c54 <CBcmFrameBuffer::Initialize()+0x114>
   12c10:	e3a01000 	mov	r1, #0
   12c14:	e28d0010 	add	r0, sp, #16
   12c18:	eb00005c 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12c1c:	e3a03010 	mov	r3, #16
   12c20:	e3a02004 	mov	r2, #4
   12c24:	e08d0003 	add	r0, sp, r3
   12c28:	e58d2000 	str	r2, [sp]
   12c2c:	e308100f 	movw	r1, #32783	@ 0x800f
   12c30:	e3401004 	movt	r1, #4
   12c34:	e28d2018 	add	r2, sp, #24
   12c38:	e58d5024 	str	r5, [sp, #36]	@ 0x24
   12c3c:	eb0000a5 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12c40:	e1a04000 	mov	r4, r0
   12c44:	e28d0010 	add	r0, sp, #16
   12c48:	eb000057 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12c4c:	ea000000 	b	12c54 <CBcmFrameBuffer::Initialize()+0x114>
   12c50:	e3a04000 	mov	r4, #0
   12c54:	e28d0008 	add	r0, sp, #8
   12c58:	eb000053 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12c5c:	e1a00004 	mov	r0, r4
   12c60:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   12c64:	e8bd8030 	pop	{r4, r5, pc}

00012c68 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   12c68:	e92d4070 	push	{r4, r5, r6, lr}
   12c6c:	e1a05001 	mov	r5, r1
   12c70:	e3a01000 	mov	r1, #0
   12c74:	e24dd028 	sub	sp, sp, #40	@ 0x28
   12c78:	e1a06002 	mov	r6, r2
   12c7c:	e28d000c 	add	r0, sp, #12
   12c80:	eb000042 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12c84:	e3a03014 	mov	r3, #20
   12c88:	e3a02008 	mov	r2, #8
   12c8c:	e28d000c 	add	r0, sp, #12
   12c90:	e58d2000 	str	r2, [sp]
   12c94:	e3081009 	movw	r1, #32777	@ 0x8009
   12c98:	e3401004 	movt	r1, #4
   12c9c:	e08d2003 	add	r2, sp, r3
   12ca0:	e58d5020 	str	r5, [sp, #32]
   12ca4:	e58d6024 	str	r6, [sp, #36]	@ 0x24
   12ca8:	eb00008a 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12cac:	e2504000 	subs	r4, r0, #0
   12cb0:	0a000006 	beq	12cd0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   12cb4:	e59d3020 	ldr	r3, [sp, #32]
   12cb8:	e1530005 	cmp	r3, r5
   12cbc:	13a04000 	movne	r4, #0
   12cc0:	059d0024 	ldreq	r0, [sp, #36]	@ 0x24
   12cc4:	00404006 	subeq	r4, r0, r6
   12cc8:	016f4f14 	clzeq	r4, r4
   12ccc:	01a042a4 	lsreq	r4, r4, #5
   12cd0:	e28d000c 	add	r0, sp, #12
   12cd4:	eb000034 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12cd8:	e1a00004 	mov	r0, r4
   12cdc:	e28dd028 	add	sp, sp, #40	@ 0x28
   12ce0:	e8bd8070 	pop	{r4, r5, r6, pc}

00012ce4 <CBcmFrameBuffer::WaitForVerticalSync()>:
   12ce4:	e92d4010 	push	{r4, lr}
   12ce8:	e3a01000 	mov	r1, #0
   12cec:	e24dd020 	sub	sp, sp, #32
   12cf0:	e28d0008 	add	r0, sp, #8
   12cf4:	eb000025 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12cf8:	e3a03010 	mov	r3, #16
   12cfc:	e08d2003 	add	r2, sp, r3
   12d00:	e3a01000 	mov	r1, #0
   12d04:	e28d0008 	add	r0, sp, #8
   12d08:	e58d1000 	str	r1, [sp]
   12d0c:	e308100e 	movw	r1, #32782	@ 0x800e
   12d10:	e3401004 	movt	r1, #4
   12d14:	eb00006f 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12d18:	e1a04000 	mov	r4, r0
   12d1c:	e28d0008 	add	r0, sp, #8
   12d20:	eb000021 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12d24:	e1a00004 	mov	r0, r4
   12d28:	e28dd020 	add	sp, sp, #32
   12d2c:	e8bd8010 	pop	{r4, pc}

00012d30 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   12d30:	e92d4010 	push	{r4, lr}
   12d34:	e1a04001 	mov	r4, r1
   12d38:	e3a01000 	mov	r1, #0
   12d3c:	e24dd020 	sub	sp, sp, #32
   12d40:	e28d0008 	add	r0, sp, #8
   12d44:	eb000011 	bl	12d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12d48:	e3a03010 	mov	r3, #16
   12d4c:	e08d2003 	add	r2, sp, r3
   12d50:	e3a01004 	mov	r1, #4
   12d54:	e28d0008 	add	r0, sp, #8
   12d58:	e58d1000 	str	r1, [sp]
   12d5c:	e308100f 	movw	r1, #32783	@ 0x800f
   12d60:	e3401004 	movt	r1, #4
   12d64:	e58d401c 	str	r4, [sp, #28]
   12d68:	eb00005a 	bl	12ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12d6c:	e1a04000 	mov	r4, r0
   12d70:	e28d0008 	add	r0, sp, #8
   12d74:	eb00000c 	bl	12dac <CBcmPropertyTags::~CBcmPropertyTags()>
   12d78:	e1a00004 	mov	r0, r4
   12d7c:	e28dd020 	add	sp, sp, #32
   12d80:	e8bd8010 	pop	{r4, pc}

00012d84 <CBcmFrameBuffer::SetDisplay()>:
   12d84:	e12fff1e 	bx	lr

00012d88 <CBcmFrameBuffer::GetNumDisplays()>:
   12d88:	e3a00001 	mov	r0, #1
   12d8c:	e12fff1e 	bx	lr

00012d90 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   12d90:	e1a02001 	mov	r2, r1
   12d94:	e92d4010 	push	{r4, lr}
   12d98:	e3a01008 	mov	r1, #8
   12d9c:	e1a04000 	mov	r4, r0
   12da0:	eb000a5e 	bl	15720 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   12da4:	e1a00004 	mov	r0, r4
   12da8:	e8bd8010 	pop	{r4, pc}

00012dac <CBcmPropertyTags::~CBcmPropertyTags()>:
   12dac:	e92d4010 	push	{r4, lr}
   12db0:	e1a04000 	mov	r4, r0
   12db4:	eb000a5c 	bl	1572c <CBcmMailBox::~CBcmMailBox()>
   12db8:	e1a00004 	mov	r0, r4
   12dbc:	e8bd8010 	pop	{r4, pc}

00012dc0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   12dc0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12dc4:	e2519000 	subs	r9, r1, #0
   12dc8:	0a000033 	beq	12e9c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   12dcc:	e1a05002 	mov	r5, r2
   12dd0:	e352000f 	cmp	r2, #15
   12dd4:	9a000035 	bls	12eb0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   12dd8:	e282700c 	add	r7, r2, #12
   12ddc:	e2126003 	ands	r6, r2, #3
   12de0:	1a000037 	bne	12ec4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x104>
   12de4:	e1a08000 	mov	r8, r0
   12de8:	e1a00006 	mov	r0, r6
   12dec:	ebfff744 	bl	10b04 <CMemorySystem::GetCoherentPage(unsigned int)>
   12df0:	e280a008 	add	sl, r0, #8
   12df4:	e7e73457 	ubfx	r3, r7, #8, #8
   12df8:	e5c07000 	strb	r7, [r0]
   12dfc:	e5c06004 	strb	r6, [r0, #4]
   12e00:	e1a04000 	mov	r4, r0
   12e04:	e5c06005 	strb	r6, [r0, #5]
   12e08:	e1a02005 	mov	r2, r5
   12e0c:	e5c06006 	strb	r6, [r0, #6]
   12e10:	e1a01009 	mov	r1, r9
   12e14:	e5c06007 	strb	r6, [r0, #7]
   12e18:	e5c03001 	strb	r3, [r0, #1]
   12e1c:	e7e73857 	ubfx	r3, r7, #16, #8
   12e20:	e1a07c27 	lsr	r7, r7, #24
   12e24:	e5c03002 	strb	r3, [r0, #2]
   12e28:	e5c07003 	strb	r7, [r0, #3]
   12e2c:	e1a0000a 	mov	r0, sl
   12e30:	ebffe7af 	bl	ccf4 <memcpy>
   12e34:	e78a6005 	str	r6, [sl, r5]
   12e38:	f57ff04f 	dsb	sy
   12e3c:	e3846103 	orr	r6, r4, #-1073741824	@ 0xc0000000
   12e40:	e1a00008 	mov	r0, r8
   12e44:	e1a01006 	mov	r1, r6
   12e48:	eb000a38 	bl	15730 <CBcmMailBox::WriteRead(unsigned int)>
   12e4c:	e1500006 	cmp	r0, r6
   12e50:	0a000001 	beq	12e5c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   12e54:	e3a00000 	mov	r0, #0
   12e58:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e5c:	f57ff05f 	dmb	sy
   12e60:	e5d42005 	ldrb	r2, [r4, #5]
   12e64:	e5d43004 	ldrb	r3, [r4, #4]
   12e68:	e1833402 	orr	r3, r3, r2, lsl #8
   12e6c:	e5d42006 	ldrb	r2, [r4, #6]
   12e70:	e1833802 	orr	r3, r3, r2, lsl #16
   12e74:	e5d42007 	ldrb	r2, [r4, #7]
   12e78:	e1833c02 	orr	r3, r3, r2, lsl #24
   12e7c:	e3530102 	cmp	r3, #-2147483648	@ 0x80000000
   12e80:	1afffff3 	bne	12e54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x94>
   12e84:	e1a02005 	mov	r2, r5
   12e88:	e1a0100a 	mov	r1, sl
   12e8c:	e1a00009 	mov	r0, r9
   12e90:	ebffe797 	bl	ccf4 <memcpy>
   12e94:	e3a00001 	mov	r0, #1
   12e98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e9c:	e3071448 	movw	r1, #29768	@ 0x7448
   12ea0:	e3401001 	movt	r1, #1
   12ea4:	e3a0204b 	mov	r2, #75	@ 0x4b
   12ea8:	e2810014 	add	r0, r1, #20
   12eac:	ebfffca1 	bl	12138 <assertion_failed>
   12eb0:	e3071448 	movw	r1, #29768	@ 0x7448
   12eb4:	e3401001 	movt	r1, #1
   12eb8:	e3a0204c 	mov	r2, #76	@ 0x4c
   12ebc:	e2810020 	add	r0, r1, #32
   12ec0:	ebfffc9c 	bl	12138 <assertion_failed>
   12ec4:	e3071448 	movw	r1, #29768	@ 0x7448
   12ec8:	e3401001 	movt	r1, #1
   12ecc:	e3a0204e 	mov	r2, #78	@ 0x4e
   12ed0:	e281004c 	add	r0, r1, #76	@ 0x4c
   12ed4:	ebfffc97 	bl	12138 <assertion_failed>

00012ed8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   12ed8:	e92d4010 	push	{r4, lr}
   12edc:	e2524000 	subs	r4, r2, #0
   12ee0:	e59dc008 	ldr	ip, [sp, #8]
   12ee4:	0a00002e 	beq	12fa4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xcc>
   12ee8:	e353000f 	cmp	r3, #15
   12eec:	9a000031 	bls	12fb8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   12ef0:	e243e00c 	sub	lr, r3, #12
   12ef4:	e1a02003 	mov	r2, r3
   12ef8:	e5c41000 	strb	r1, [r4]
   12efc:	e7e73451 	ubfx	r3, r1, #8, #8
   12f00:	e5c4c008 	strb	ip, [r4, #8]
   12f04:	e5c4e004 	strb	lr, [r4, #4]
   12f08:	e5c43001 	strb	r3, [r4, #1]
   12f0c:	e7e73851 	ubfx	r3, r1, #16, #8
   12f10:	e1a01c21 	lsr	r1, r1, #24
   12f14:	e5c43002 	strb	r3, [r4, #2]
   12f18:	e5c41003 	strb	r1, [r4, #3]
   12f1c:	e7e7345e 	ubfx	r3, lr, #8, #8
   12f20:	e1a01004 	mov	r1, r4
   12f24:	e5c43005 	strb	r3, [r4, #5]
   12f28:	e7e7385e 	ubfx	r3, lr, #16, #8
   12f2c:	e1a0ec2e 	lsr	lr, lr, #24
   12f30:	e5c43006 	strb	r3, [r4, #6]
   12f34:	e7e7345c 	ubfx	r3, ip, #8, #8
   12f38:	e5c4e007 	strb	lr, [r4, #7]
   12f3c:	e5c43009 	strb	r3, [r4, #9]
   12f40:	e7e7385c 	ubfx	r3, ip, #16, #8
   12f44:	e7e6cc5c 	ubfx	ip, ip, #24, #7
   12f48:	e5c4300a 	strb	r3, [r4, #10]
   12f4c:	e5c4c00b 	strb	ip, [r4, #11]
   12f50:	ebffff9a 	bl	12dc0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12f54:	e3500000 	cmp	r0, #0
   12f58:	08bd8010 	popeq	{r4, pc}
   12f5c:	e5d40009 	ldrb	r0, [r4, #9]
   12f60:	e5d43008 	ldrb	r3, [r4, #8]
   12f64:	e5d4100a 	ldrb	r1, [r4, #10]
   12f68:	e5d4200b 	ldrb	r2, [r4, #11]
   12f6c:	e1833400 	orr	r3, r3, r0, lsl #8
   12f70:	e1833801 	orr	r3, r3, r1, lsl #16
   12f74:	e1833c02 	orr	r3, r3, r2, lsl #24
   12f78:	e5c43008 	strb	r3, [r4, #8]
   12f7c:	e3c32102 	bic	r2, r3, #-2147483648	@ 0x80000000
   12f80:	e2520000 	subs	r0, r2, #0
   12f84:	e7e71453 	ubfx	r1, r3, #8, #8
   12f88:	e1a02c22 	lsr	r2, r2, #24
   12f8c:	e7e73853 	ubfx	r3, r3, #16, #8
   12f90:	13a00001 	movne	r0, #1
   12f94:	e5c41009 	strb	r1, [r4, #9]
   12f98:	e5c4300a 	strb	r3, [r4, #10]
   12f9c:	e5c4200b 	strb	r2, [r4, #11]
   12fa0:	e8bd8010 	pop	{r4, pc}
   12fa4:	e3071448 	movw	r1, #29768	@ 0x7448
   12fa8:	e3401001 	movt	r1, #1
   12fac:	e3a02033 	mov	r2, #51	@ 0x33
   12fb0:	e2810064 	add	r0, r1, #100	@ 0x64
   12fb4:	ebfffc5f 	bl	12138 <assertion_failed>
   12fb8:	e3071448 	movw	r1, #29768	@ 0x7448
   12fbc:	e3401001 	movt	r1, #1
   12fc0:	e3a02034 	mov	r2, #52	@ 0x34
   12fc4:	e2810070 	add	r0, r1, #112	@ 0x70
   12fc8:	ebfffc5a 	bl	12138 <assertion_failed>

00012fcc <CCharGenerator::CCharGenerator(TFont const&, CCharGenerator::TFontFlags)>:
   12fcc:	e591c000 	ldr	ip, [r1]
   12fd0:	e2023001 	and	r3, r2, #1
   12fd4:	e3120002 	tst	r2, #2
   12fd8:	e2832001 	add	r2, r3, #1
   12fdc:	e8800006 	stm	r0, {r1, r2}
   12fe0:	e580c010 	str	ip, [r0, #16]
   12fe4:	e0020c92 	mul	r2, r2, ip
   12fe8:	e591c004 	ldr	ip, [r1, #4]
   12fec:	e580200c 	str	r2, [r0, #12]
   12ff0:	e5912008 	ldr	r2, [r1, #8]
   12ff4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   12ff8:	03a0e001 	moveq	lr, #1
   12ffc:	13a0e002 	movne	lr, #2
   13000:	e08c2002 	add	r2, ip, r2
   13004:	e580e008 	str	lr, [r0, #8]
   13008:	e00c0c9e 	mul	ip, lr, ip
   1300c:	e002029e 	mul	r2, lr, r2
   13010:	e580c018 	str	ip, [r0, #24]
   13014:	e5802014 	str	r2, [r0, #20]
   13018:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001301c <CCharGenerator::GetPixelLine(char, unsigned int) const>:
   1301c:	e5903000 	ldr	r3, [r0]
   13020:	e6ef1071 	uxtb	r1, r1
   13024:	e593c00c 	ldr	ip, [r3, #12]
   13028:	e15c0001 	cmp	ip, r1
   1302c:	8a000011 	bhi	13078 <CCharGenerator::GetPixelLine(char, unsigned int) const+0x5c>
   13030:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   13034:	e593e010 	ldr	lr, [r3, #16]
   13038:	e15e0001 	cmp	lr, r1
   1303c:	3a00000b 	bcc	13070 <CCharGenerator::GetPixelLine(char, unsigned int) const+0x54>
   13040:	e590e018 	ldr	lr, [r0, #24]
   13044:	e15e0002 	cmp	lr, r2
   13048:	9a000008 	bls	13070 <CCharGenerator::GetPixelLine(char, unsigned int) const+0x54>
   1304c:	e5900008 	ldr	r0, [r0, #8]
   13050:	e041100c 	sub	r1, r1, ip
   13054:	e3500002 	cmp	r0, #2
   13058:	e5930004 	ldr	r0, [r3, #4]
   1305c:	e5933014 	ldr	r3, [r3, #20]
   13060:	01a020a2 	lsreq	r2, r2, #1
   13064:	e0233190 	mla	r3, r0, r1, r3
   13068:	e7d30002 	ldrb	r0, [r3, r2]
   1306c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   13070:	e3a00000 	mov	r0, #0
   13074:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   13078:	e3a00000 	mov	r0, #0
   1307c:	e12fff1e 	bx	lr

00013080 <debug_hexdump(void const*, unsigned int, char const*)>:
   13080:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13084:	e3520000 	cmp	r2, #0
   13088:	e30784e0 	movw	r8, #29920	@ 0x74e0
   1308c:	e3408001 	movt	r8, #1
   13090:	e24dd054 	sub	sp, sp, #84	@ 0x54
   13094:	11a08002 	movne	r8, r2
   13098:	e1a05001 	mov	r5, r1
   1309c:	e1a04000 	mov	r4, r0
   130a0:	eb0004bd 	bl	1439c <CLogger::Get()>
   130a4:	e3a02004 	mov	r2, #4
   130a8:	e1a01008 	mov	r1, r8
   130ac:	e30635fc 	movw	r3, #26108	@ 0x65fc
   130b0:	e3403001 	movt	r3, #1
   130b4:	e58d4004 	str	r4, [sp, #4]
   130b8:	e58d5000 	str	r5, [sp]
   130bc:	eb00067f 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   130c0:	e3550000 	cmp	r5, #0
   130c4:	0a00002f 	beq	13188 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   130c8:	e3063624 	movw	r3, #26148	@ 0x6624
   130cc:	e3403001 	movt	r3, #1
   130d0:	e205900f 	and	r9, r5, #15
   130d4:	e58d304c 	str	r3, [sp, #76]	@ 0x4c
   130d8:	ea000001 	b	130e4 <debug_hexdump(void const*, unsigned int, char const*)+0x64>
   130dc:	e2555010 	subs	r5, r5, #16
   130e0:	0a000028 	beq	13188 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   130e4:	eb0004ac 	bl	1439c <CLogger::Get()>
   130e8:	e5d4e00f 	ldrb	lr, [r4, #15]
   130ec:	e5d4c00e 	ldrb	ip, [r4, #14]
   130f0:	e3a02004 	mov	r2, #4
   130f4:	e5d4a00d 	ldrb	sl, [r4, #13]
   130f8:	e5d4300c 	ldrb	r3, [r4, #12]
   130fc:	e5d4700b 	ldrb	r7, [r4, #11]
   13100:	e5d4100a 	ldrb	r1, [r4, #10]
   13104:	e5d46009 	ldrb	r6, [r4, #9]
   13108:	e58de040 	str	lr, [sp, #64]	@ 0x40
   1310c:	e58dc03c 	str	ip, [sp, #60]	@ 0x3c
   13110:	e5d4e008 	ldrb	lr, [r4, #8]
   13114:	e5d4c007 	ldrb	ip, [r4, #7]
   13118:	e58da038 	str	sl, [sp, #56]	@ 0x38
   1311c:	e58d3034 	str	r3, [sp, #52]	@ 0x34
   13120:	e5d43006 	ldrb	r3, [r4, #6]
   13124:	e5d4b005 	ldrb	fp, [r4, #5]
   13128:	e58d7030 	str	r7, [sp, #48]	@ 0x30
   1312c:	e58d102c 	str	r1, [sp, #44]	@ 0x2c
   13130:	e5d41004 	ldrb	r1, [r4, #4]
   13134:	e5d4a003 	ldrb	sl, [r4, #3]
   13138:	e58d6028 	str	r6, [sp, #40]	@ 0x28
   1313c:	e58de024 	str	lr, [sp, #36]	@ 0x24
   13140:	e5d47002 	ldrb	r7, [r4, #2]
   13144:	e5d46001 	ldrb	r6, [r4, #1]
   13148:	e58dc020 	str	ip, [sp, #32]
   1314c:	e6ffc074 	uxth	ip, r4
   13150:	e58d301c 	str	r3, [sp, #28]
   13154:	e2844010 	add	r4, r4, #16
   13158:	e59d304c 	ldr	r3, [sp, #76]	@ 0x4c
   1315c:	e554e010 	ldrb	lr, [r4, #-16]
   13160:	e58d1014 	str	r1, [sp, #20]
   13164:	e1a01008 	mov	r1, r8
   13168:	e58db018 	str	fp, [sp, #24]
   1316c:	e58da010 	str	sl, [sp, #16]
   13170:	e58d700c 	str	r7, [sp, #12]
   13174:	e58d6008 	str	r6, [sp, #8]
   13178:	e88d5000 	stm	sp, {ip, lr}
   1317c:	eb00064f 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13180:	e1590005 	cmp	r9, r5
   13184:	1affffd4 	bne	130dc <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   13188:	e28dd054 	add	sp, sp, #84	@ 0x54
   1318c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013190 <debug_stacktrace(unsigned int const*, char const*)>:
   13190:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13194:	e3510000 	cmp	r1, #0
   13198:	e30774e0 	movw	r7, #29920	@ 0x74e0
   1319c:	e3407001 	movt	r7, #1
   131a0:	e3056fec 	movw	r6, #24556	@ 0x5fec
   131a4:	e3406001 	movt	r6, #1
   131a8:	e306867c 	movw	r8, #26236	@ 0x667c
   131ac:	e3408001 	movt	r8, #1
   131b0:	e24dd008 	sub	sp, sp, #8
   131b4:	11a07001 	movne	r7, r1
   131b8:	e2405004 	sub	r5, r0, #4
   131bc:	e3a04000 	mov	r4, #0
   131c0:	ea000002 	b	131d0 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   131c4:	e2844001 	add	r4, r4, #1
   131c8:	e3540040 	cmp	r4, #64	@ 0x40
   131cc:	0a000010 	beq	13214 <debug_stacktrace(unsigned int const*, char const*)+0x84>
   131d0:	e5b53004 	ldr	r3, [r5, #4]!
   131d4:	e3530902 	cmp	r3, #32768	@ 0x8000
   131d8:	3afffff9 	bcc	131c4 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   131dc:	e1530006 	cmp	r3, r6
   131e0:	2afffff7 	bcs	131c4 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   131e4:	e3130003 	tst	r3, #3
   131e8:	1afffff5 	bne	131c4 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   131ec:	eb00046a 	bl	1439c <CLogger::Get()>
   131f0:	e595c000 	ldr	ip, [r5]
   131f4:	e88d1010 	stm	sp, {r4, ip}
   131f8:	e1a03008 	mov	r3, r8
   131fc:	e3a02004 	mov	r2, #4
   13200:	e1a01007 	mov	r1, r7
   13204:	e2844001 	add	r4, r4, #1
   13208:	eb00062c 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1320c:	e3540040 	cmp	r4, #64	@ 0x40
   13210:	1affffee 	bne	131d0 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   13214:	e28dd008 	add	sp, sp, #8
   13218:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1321c:	00000000 	andeq	r0, r0, r0

00013220 <DelayLoop>:
   13220:	e1a01001 	mov	r1, r1
   13224:	e1a02002 	mov	r2, r2
   13228:	e2500001 	subs	r0, r0, #1
   1322c:	8afffffb 	bhi	13220 <DelayLoop>
   13230:	e1a0f00e 	mov	pc, lr

00013234 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   13234:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13238:	e1a05000 	mov	r5, r0
   1323c:	e1a04001 	mov	r4, r1
   13240:	e1a06002 	mov	r6, r2
   13244:	ebffda69 	bl	9bf0 <CMachineInfo::Get()>
   13248:	e1a01004 	mov	r1, r4
   1324c:	e3a04000 	mov	r4, #0
   13250:	ebffda10 	bl	9a98 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   13254:	e5854014 	str	r4, [r5, #20]
   13258:	e3500080 	cmp	r0, #128	@ 0x80
   1325c:	e5850000 	str	r0, [r5]
   13260:	e585602c 	str	r6, [r5, #44]	@ 0x2c
   13264:	e5c54030 	strb	r4, [r5, #48]	@ 0x30
   13268:	e5854034 	str	r4, [r5, #52]	@ 0x34
   1326c:	e5854038 	str	r4, [r5, #56]	@ 0x38
   13270:	e5c5403c 	strb	r4, [r5, #60]	@ 0x3c
   13274:	0a000025 	beq	13310 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xdc>
   13278:	e350000b 	cmp	r0, #11
   1327c:	91a06005 	movls	r6, r5
   13280:	92857010 	addls	r7, r5, #16
   13284:	8a000026 	bhi	13324 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xf0>
   13288:	e3a01000 	mov	r1, #0
   1328c:	e3a00020 	mov	r0, #32
   13290:	ebffe787 	bl	d0b4 <operator new(unsigned int, int)>
   13294:	e5a60004 	str	r0, [r6, #4]!
   13298:	e5c04018 	strb	r4, [r0, #24]
   1329c:	e1560007 	cmp	r6, r7
   132a0:	e5c04019 	strb	r4, [r0, #25]
   132a4:	e5c0401a 	strb	r4, [r0, #26]
   132a8:	e5c0401b 	strb	r4, [r0, #27]
   132ac:	e5c0401c 	strb	r4, [r0, #28]
   132b0:	e5c0401d 	strb	r4, [r0, #29]
   132b4:	e5c0401e 	strb	r4, [r0, #30]
   132b8:	e5c0401f 	strb	r4, [r0, #31]
   132bc:	1afffff1 	bne	13288 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x54>
   132c0:	e3a03a07 	mov	r3, #28672	@ 0x7000
   132c4:	e3433f00 	movt	r3, #16128	@ 0x3f00
   132c8:	e5951000 	ldr	r1, [r5]
   132cc:	e3a0c001 	mov	ip, #1
   132d0:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
   132d4:	e5932ff0 	ldr	r2, [r3, #4080]	@ 0xff0
   132d8:	e182211c 	orr	r2, r2, ip, lsl r1
   132dc:	e5832ff0 	str	r2, [r3, #4080]	@ 0xff0
   132e0:	ebffe407 	bl	c304 <CTimer::SimpleusDelay(unsigned int)>
   132e4:	e5952000 	ldr	r2, [r5]
   132e8:	e3a03102 	mov	r3, #-2147483648	@ 0x80000000
   132ec:	e282283f 	add	r2, r2, #4128768	@ 0x3f0000
   132f0:	e2822070 	add	r2, r2, #112	@ 0x70
   132f4:	e1a02402 	lsl	r2, r2, #8
   132f8:	e5823000 	str	r3, [r2]
   132fc:	e5923000 	ldr	r3, [r2]
   13300:	e3530000 	cmp	r3, #0
   13304:	bafffffc 	blt	132fc <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc8>
   13308:	e1a00005 	mov	r0, r5
   1330c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13310:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13314:	e3401001 	movt	r1, #1
   13318:	e3a02038 	mov	r2, #56	@ 0x38
   1331c:	e2810010 	add	r0, r1, #16
   13320:	ebfffb84 	bl	12138 <assertion_failed>
   13324:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13328:	e3401001 	movt	r1, #1
   1332c:	e3a02039 	mov	r2, #57	@ 0x39
   13330:	e2810030 	add	r0, r1, #48	@ 0x30
   13334:	ebfffb7f 	bl	12138 <assertion_failed>

00013338 <CDMAChannel::~CDMAChannel()>:
   13338:	e5903000 	ldr	r3, [r0]
   1333c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13340:	e353000b 	cmp	r3, #11
   13344:	8a000032 	bhi	13414 <CDMAChannel::~CDMAChannel()+0xdc>
   13348:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   1334c:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
   13350:	e2833070 	add	r3, r3, #112	@ 0x70
   13354:	e1a05000 	mov	r5, r0
   13358:	e1a03403 	lsl	r3, r3, #8
   1335c:	e5832000 	str	r2, [r3]
   13360:	e5901000 	ldr	r1, [r0]
   13364:	e281283f 	add	r2, r1, #4128768	@ 0x3f0000
   13368:	e2822070 	add	r2, r2, #112	@ 0x70
   1336c:	e1a02402 	lsl	r2, r2, #8
   13370:	e5923000 	ldr	r3, [r2]
   13374:	e3530000 	cmp	r3, #0
   13378:	bafffffc 	blt	13370 <CDMAChannel::~CDMAChannel()+0x38>
   1337c:	e3a03a07 	mov	r3, #28672	@ 0x7000
   13380:	e3433f00 	movt	r3, #16128	@ 0x3f00
   13384:	e595002c 	ldr	r0, [r5, #44]	@ 0x2c
   13388:	e3a0e001 	mov	lr, #1
   1338c:	e3a0c000 	mov	ip, #0
   13390:	e5932ff0 	ldr	r2, [r3, #4080]	@ 0xff0
   13394:	e150000c 	cmp	r0, ip
   13398:	e1c2211e 	bic	r2, r2, lr, lsl r1
   1339c:	e5832ff0 	str	r2, [r3, #4080]	@ 0xff0
   133a0:	e585c034 	str	ip, [r5, #52]	@ 0x34
   133a4:	0a000004 	beq	133bc <CDMAChannel::~CDMAChannel()+0x84>
   133a8:	e5d53030 	ldrb	r3, [r5, #48]	@ 0x30
   133ac:	e153000c 	cmp	r3, ip
   133b0:	1a000011 	bne	133fc <CDMAChannel::~CDMAChannel()+0xc4>
   133b4:	e3a03000 	mov	r3, #0
   133b8:	e585302c 	str	r3, [r5, #44]	@ 0x2c
   133bc:	e3a07000 	mov	r7, #0
   133c0:	e1a04005 	mov	r4, r5
   133c4:	e2856010 	add	r6, r5, #16
   133c8:	ebffda08 	bl	9bf0 <CMachineInfo::Get()>
   133cc:	e5951000 	ldr	r1, [r5]
   133d0:	ebffd9e5 	bl	9b6c <CMachineInfo::FreeDMAChannel(unsigned int)>
   133d4:	e5b40004 	ldr	r0, [r4, #4]!
   133d8:	e3500000 	cmp	r0, #0
   133dc:	0a000001 	beq	133e8 <CDMAChannel::~CDMAChannel()+0xb0>
   133e0:	e3a01020 	mov	r1, #32
   133e4:	ebffe762 	bl	d174 <operator delete(void*, unsigned int)>
   133e8:	e1540006 	cmp	r4, r6
   133ec:	e5847000 	str	r7, [r4]
   133f0:	1afffff7 	bne	133d4 <CDMAChannel::~CDMAChannel()+0x9c>
   133f4:	e1a00005 	mov	r0, r5
   133f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   133fc:	e5951000 	ldr	r1, [r5]
   13400:	e351000c 	cmp	r1, #12
   13404:	8a000007 	bhi	13428 <CDMAChannel::~CDMAChannel()+0xf0>
   13408:	e2811010 	add	r1, r1, #16
   1340c:	ebfff752 	bl	1115c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13410:	eaffffe7 	b	133b4 <CDMAChannel::~CDMAChannel()+0x7c>
   13414:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13418:	e3401001 	movt	r1, #1
   1341c:	e3a02063 	mov	r2, #99	@ 0x63
   13420:	e2810030 	add	r0, r1, #48	@ 0x30
   13424:	ebfffb43 	bl	12138 <assertion_failed>
   13428:	e30714e8 	movw	r1, #29928	@ 0x74e8
   1342c:	e3401001 	movt	r1, #1
   13430:	e3a02075 	mov	r2, #117	@ 0x75
   13434:	e281004c 	add	r0, r1, #76	@ 0x4c
   13438:	ebfffb3e 	bl	12138 <assertion_failed>

0001343c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   1343c:	e92d4070 	push	{r4, r5, r6, lr}
   13440:	e1a06000 	mov	r6, r0
   13444:	e59de010 	ldr	lr, [sp, #16]
   13448:	e1a00002 	mov	r0, r2
   1344c:	e2515000 	subs	r5, r1, #0
   13450:	e5dd2014 	ldrb	r2, [sp, #20]
   13454:	0a00004d 	beq	13590 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x154>
   13458:	e3500000 	cmp	r0, #0
   1345c:	0a000050 	beq	135a4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x168>
   13460:	e1a04003 	mov	r4, r3
   13464:	e3530000 	cmp	r3, #0
   13468:	0a000052 	beq	135b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x17c>
   1346c:	e35e000f 	cmp	lr, #15
   13470:	8a000055 	bhi	135cc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x190>
   13474:	e596c004 	ldr	ip, [r6, #4]
   13478:	e35c0000 	cmp	ip, #0
   1347c:	0a000057 	beq	135e0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a4>
   13480:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   13484:	8a00005a 	bhi	135f4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b8>
   13488:	e5961000 	ldr	r1, [r6]
   1348c:	e3073020 	movw	r3, #28704	@ 0x7020
   13490:	e3433f00 	movt	r3, #16128	@ 0x3f00
   13494:	e7933401 	ldr	r3, [r3, r1, lsl #8]
   13498:	e2233201 	eor	r3, r3, #268435456	@ 0x10000000
   1349c:	e7e03e53 	ubfx	r3, r3, #28, #1
   134a0:	e3540801 	cmp	r4, #65536	@ 0x10000
   134a4:	33833001 	orrcc	r3, r3, #1
   134a8:	e3530000 	cmp	r3, #0
   134ac:	0a000055 	beq	13608 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1cc>
   134b0:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   134b4:	e1a0e60e 	lsl	lr, lr, #12
   134b8:	e38eee33 	orr	lr, lr, #816	@ 0x330
   134bc:	e3520000 	cmp	r2, #0
   134c0:	e1a03c23 	lsr	r3, r3, #24
   134c4:	e5cc3007 	strb	r3, [ip, #7]
   134c8:	e3853103 	orr	r3, r5, #-1073741824	@ 0xc0000000
   134cc:	e5cc0004 	strb	r0, [ip, #4]
   134d0:	e5cc5008 	strb	r5, [ip, #8]
   134d4:	e1a03c23 	lsr	r3, r3, #24
   134d8:	e5cc400c 	strb	r4, [ip, #12]
   134dc:	e5cc300b 	strb	r3, [ip, #11]
   134e0:	e3a03000 	mov	r3, #0
   134e4:	e5cc3010 	strb	r3, [ip, #16]
   134e8:	e5cc3011 	strb	r3, [ip, #17]
   134ec:	e5cc3012 	strb	r3, [ip, #18]
   134f0:	e5cc3013 	strb	r3, [ip, #19]
   134f4:	e5cc3014 	strb	r3, [ip, #20]
   134f8:	e5cc3015 	strb	r3, [ip, #21]
   134fc:	e5cc3016 	strb	r3, [ip, #22]
   13500:	e5cc3017 	strb	r3, [ip, #23]
   13504:	e3a03030 	mov	r3, #48	@ 0x30
   13508:	e5cc3000 	strb	r3, [ip]
   1350c:	e1a0342e 	lsr	r3, lr, #8
   13510:	e5cc3001 	strb	r3, [ip, #1]
   13514:	e7e7385e 	ubfx	r3, lr, #16, #8
   13518:	e1a0ec2e 	lsr	lr, lr, #24
   1351c:	e5cc3002 	strb	r3, [ip, #2]
   13520:	e5cce003 	strb	lr, [ip, #3]
   13524:	e7e73450 	ubfx	r3, r0, #8, #8
   13528:	e5cc3005 	strb	r3, [ip, #5]
   1352c:	e7e73850 	ubfx	r3, r0, #16, #8
   13530:	e5cc3006 	strb	r3, [ip, #6]
   13534:	e7e73455 	ubfx	r3, r5, #8, #8
   13538:	e5cc3009 	strb	r3, [ip, #9]
   1353c:	e7e73855 	ubfx	r3, r5, #16, #8
   13540:	e5cc300a 	strb	r3, [ip, #10]
   13544:	e7e73454 	ubfx	r3, r4, #8, #8
   13548:	e5cc300d 	strb	r3, [ip, #13]
   1354c:	e7e73854 	ubfx	r3, r4, #16, #8
   13550:	e5cc300e 	strb	r3, [ip, #14]
   13554:	e1a03c24 	lsr	r3, r4, #24
   13558:	e5cc300f 	strb	r3, [ip, #15]
   1355c:	05862040 	streq	r2, [r6, #64]	@ 0x40
   13560:	1a000002 	bne	13570 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x134>
   13564:	e3a03001 	mov	r3, #1
   13568:	e5863014 	str	r3, [r6, #20]
   1356c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13570:	e1a01004 	mov	r1, r4
   13574:	e5865040 	str	r5, [r6, #64]	@ 0x40
   13578:	e5864044 	str	r4, [r6, #68]	@ 0x44
   1357c:	ebfff48d 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   13580:	e1a01004 	mov	r1, r4
   13584:	e1a00005 	mov	r0, r5
   13588:	ebfff48a 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   1358c:	eafffff4 	b	13564 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x128>
   13590:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13594:	e3401001 	movt	r1, #1
   13598:	e3a02091 	mov	r2, #145	@ 0x91
   1359c:	e2810060 	add	r0, r1, #96	@ 0x60
   135a0:	ebfffae4 	bl	12138 <assertion_failed>
   135a4:	e30714e8 	movw	r1, #29928	@ 0x74e8
   135a8:	e3401001 	movt	r1, #1
   135ac:	e3a02092 	mov	r2, #146	@ 0x92
   135b0:	e2810074 	add	r0, r1, #116	@ 0x74
   135b4:	ebfffadf 	bl	12138 <assertion_failed>
   135b8:	e30714e8 	movw	r1, #29928	@ 0x74e8
   135bc:	e3401001 	movt	r1, #1
   135c0:	e3a02093 	mov	r2, #147	@ 0x93
   135c4:	e2810084 	add	r0, r1, #132	@ 0x84
   135c8:	ebfffada 	bl	12138 <assertion_failed>
   135cc:	e30714e8 	movw	r1, #29928	@ 0x74e8
   135d0:	e3401001 	movt	r1, #1
   135d4:	e3a02094 	mov	r2, #148	@ 0x94
   135d8:	e2810090 	add	r0, r1, #144	@ 0x90
   135dc:	ebfffad5 	bl	12138 <assertion_failed>
   135e0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   135e4:	e3401001 	movt	r1, #1
   135e8:	e3a02096 	mov	r2, #150	@ 0x96
   135ec:	e28100a4 	add	r0, r1, #164	@ 0xa4
   135f0:	ebfffad0 	bl	12138 <assertion_failed>
   135f4:	e30714e8 	movw	r1, #29928	@ 0x74e8
   135f8:	e3401001 	movt	r1, #1
   135fc:	e3a02097 	mov	r2, #151	@ 0x97
   13600:	e28100bc 	add	r0, r1, #188	@ 0xbc
   13604:	ebfffacb 	bl	12138 <assertion_failed>
   13608:	e30714e8 	movw	r1, #29928	@ 0x74e8
   1360c:	e3401001 	movt	r1, #1
   13610:	e3a02098 	mov	r2, #152	@ 0x98
   13614:	e28100d4 	add	r0, r1, #212	@ 0xd4
   13618:	ebfffac6 	bl	12138 <assertion_failed>

0001361c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   1361c:	e92d4010 	push	{r4, lr}
   13620:	e1a04000 	mov	r4, r0
   13624:	e2510000 	subs	r0, r1, #0
   13628:	e5dde008 	ldrb	lr, [sp, #8]
   1362c:	0a00003f 	beq	13730 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x114>
   13630:	e3530000 	cmp	r3, #0
   13634:	0a000042 	beq	13744 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x128>
   13638:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   1363c:	8a000045 	bhi	13758 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x13c>
   13640:	e594c000 	ldr	ip, [r4]
   13644:	e3071020 	movw	r1, #28704	@ 0x7020
   13648:	e3431f00 	movt	r1, #16128	@ 0x3f00
   1364c:	e791140c 	ldr	r1, [r1, ip, lsl #8]
   13650:	e2211201 	eor	r1, r1, #268435456	@ 0x10000000
   13654:	e7e01e51 	ubfx	r1, r1, #28, #1
   13658:	e3530801 	cmp	r3, #65536	@ 0x10000
   1365c:	33811001 	orrcc	r1, r1, #1
   13660:	e3510000 	cmp	r1, #0
   13664:	0a00004a 	beq	13794 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   13668:	e3d224ff 	bics	r2, r2, #-16777216	@ 0xff000000
   1366c:	0a00003e 	beq	1376c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x150>
   13670:	e594c004 	ldr	ip, [r4, #4]
   13674:	e282247e 	add	r2, r2, #2113929216	@ 0x7e000000
   13678:	e35c0000 	cmp	ip, #0
   1367c:	0a00003f 	beq	13780 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x164>
   13680:	e3801103 	orr	r1, r0, #-1073741824	@ 0xc0000000
   13684:	e5cc2004 	strb	r2, [ip, #4]
   13688:	e5cc300c 	strb	r3, [ip, #12]
   1368c:	e1a01c21 	lsr	r1, r1, #24
   13690:	e5cc100b 	strb	r1, [ip, #11]
   13694:	e3001438 	movw	r1, #1080	@ 0x438
   13698:	e5cce002 	strb	lr, [ip, #2]
   1369c:	e5cc1000 	strb	r1, [ip]
   136a0:	e1a01421 	lsr	r1, r1, #8
   136a4:	e5cc0008 	strb	r0, [ip, #8]
   136a8:	e5cc1001 	strb	r1, [ip, #1]
   136ac:	e3a01000 	mov	r1, #0
   136b0:	e5cc1010 	strb	r1, [ip, #16]
   136b4:	e5cc1011 	strb	r1, [ip, #17]
   136b8:	e5cc1012 	strb	r1, [ip, #18]
   136bc:	e5cc1013 	strb	r1, [ip, #19]
   136c0:	e5cc1014 	strb	r1, [ip, #20]
   136c4:	e5cc1015 	strb	r1, [ip, #21]
   136c8:	e5cc1016 	strb	r1, [ip, #22]
   136cc:	e5cc1017 	strb	r1, [ip, #23]
   136d0:	e5cc1003 	strb	r1, [ip, #3]
   136d4:	e7e71452 	ubfx	r1, r2, #8, #8
   136d8:	e5cc1005 	strb	r1, [ip, #5]
   136dc:	e7e71852 	ubfx	r1, r2, #16, #8
   136e0:	e1a02c22 	lsr	r2, r2, #24
   136e4:	e5cc1006 	strb	r1, [ip, #6]
   136e8:	e5cc2007 	strb	r2, [ip, #7]
   136ec:	e1a01003 	mov	r1, r3
   136f0:	e7e72450 	ubfx	r2, r0, #8, #8
   136f4:	e5cc2009 	strb	r2, [ip, #9]
   136f8:	e7e72850 	ubfx	r2, r0, #16, #8
   136fc:	e5cc200a 	strb	r2, [ip, #10]
   13700:	e7e72453 	ubfx	r2, r3, #8, #8
   13704:	e5cc200d 	strb	r2, [ip, #13]
   13708:	e7e72853 	ubfx	r2, r3, #16, #8
   1370c:	e5cc200e 	strb	r2, [ip, #14]
   13710:	e1a02c23 	lsr	r2, r3, #24
   13714:	e5cc200f 	strb	r2, [ip, #15]
   13718:	e5843044 	str	r3, [r4, #68]	@ 0x44
   1371c:	e5840040 	str	r0, [r4, #64]	@ 0x40
   13720:	ebfff424 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   13724:	e3a03001 	mov	r3, #1
   13728:	e5843014 	str	r3, [r4, #20]
   1372c:	e8bd8010 	pop	{r4, pc}
   13730:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13734:	e3401001 	movt	r1, #1
   13738:	e3a020c1 	mov	r2, #193	@ 0xc1
   1373c:	e2810060 	add	r0, r1, #96	@ 0x60
   13740:	ebfffa7c 	bl	12138 <assertion_failed>
   13744:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13748:	e3401001 	movt	r1, #1
   1374c:	e3a020c2 	mov	r2, #194	@ 0xc2
   13750:	e2810084 	add	r0, r1, #132	@ 0x84
   13754:	ebfffa77 	bl	12138 <assertion_failed>
   13758:	e30714e8 	movw	r1, #29928	@ 0x74e8
   1375c:	e3401001 	movt	r1, #1
   13760:	e3a020c3 	mov	r2, #195	@ 0xc3
   13764:	e28100bc 	add	r0, r1, #188	@ 0xbc
   13768:	ebfffa72 	bl	12138 <assertion_failed>
   1376c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13770:	e3401001 	movt	r1, #1
   13774:	e3a020c8 	mov	r2, #200	@ 0xc8
   13778:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   1377c:	ebfffa6d 	bl	12138 <assertion_failed>
   13780:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13784:	e3401001 	movt	r1, #1
   13788:	e3a020cb 	mov	r2, #203	@ 0xcb
   1378c:	e28100a4 	add	r0, r1, #164	@ 0xa4
   13790:	ebfffa68 	bl	12138 <assertion_failed>
   13794:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13798:	e3401001 	movt	r1, #1
   1379c:	e3a020c4 	mov	r2, #196	@ 0xc4
   137a0:	e28100d4 	add	r0, r1, #212	@ 0xd4
   137a4:	ebfffa63 	bl	12138 <assertion_failed>

000137a8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   137a8:	e92d4070 	push	{r4, r5, r6, lr}
   137ac:	e1a04000 	mov	r4, r0
   137b0:	e2520000 	subs	r0, r2, #0
   137b4:	e5dd5010 	ldrb	r5, [sp, #16]
   137b8:	0a00003f 	beq	138bc <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x114>
   137bc:	e1a0e001 	mov	lr, r1
   137c0:	e3530000 	cmp	r3, #0
   137c4:	e1a01003 	mov	r1, r3
   137c8:	0a000040 	beq	138d0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x128>
   137cc:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   137d0:	8a000043 	bhi	138e4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x13c>
   137d4:	e5942000 	ldr	r2, [r4]
   137d8:	e3073020 	movw	r3, #28704	@ 0x7020
   137dc:	e3433f00 	movt	r3, #16128	@ 0x3f00
   137e0:	e793c402 	ldr	ip, [r3, r2, lsl #8]
   137e4:	e22cc201 	eor	ip, ip, #268435456	@ 0x10000000
   137e8:	e7e0ce5c 	ubfx	ip, ip, #28, #1
   137ec:	e3510801 	cmp	r1, #65536	@ 0x10000
   137f0:	338cc001 	orrcc	ip, ip, #1
   137f4:	e35c0000 	cmp	ip, #0
   137f8:	0a000048 	beq	13920 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x178>
   137fc:	e3dee4ff 	bics	lr, lr, #-16777216	@ 0xff000000
   13800:	0a00003c 	beq	138f8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x150>
   13804:	e594c004 	ldr	ip, [r4, #4]
   13808:	e28ee47e 	add	lr, lr, #2113929216	@ 0x7e000000
   1380c:	e35c0000 	cmp	ip, #0
   13810:	0a00003d 	beq	1390c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x164>
   13814:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   13818:	e5cce008 	strb	lr, [ip, #8]
   1381c:	e3a02048 	mov	r2, #72	@ 0x48
   13820:	e5cc5002 	strb	r5, [ip, #2]
   13824:	e5cc2000 	strb	r2, [ip]
   13828:	e1a03c23 	lsr	r3, r3, #24
   1382c:	e3a02003 	mov	r2, #3
   13830:	e5cc3007 	strb	r3, [ip, #7]
   13834:	e5cc2001 	strb	r2, [ip, #1]
   13838:	e3a03000 	mov	r3, #0
   1383c:	e7e72450 	ubfx	r2, r0, #8, #8
   13840:	e5cc3010 	strb	r3, [ip, #16]
   13844:	e5cc3011 	strb	r3, [ip, #17]
   13848:	e5cc3012 	strb	r3, [ip, #18]
   1384c:	e5cc3013 	strb	r3, [ip, #19]
   13850:	e5cc3014 	strb	r3, [ip, #20]
   13854:	e5cc3015 	strb	r3, [ip, #21]
   13858:	e5cc3016 	strb	r3, [ip, #22]
   1385c:	e5cc3017 	strb	r3, [ip, #23]
   13860:	e5cc3003 	strb	r3, [ip, #3]
   13864:	e5cc2005 	strb	r2, [ip, #5]
   13868:	e7e72850 	ubfx	r2, r0, #16, #8
   1386c:	e5cc0004 	strb	r0, [ip, #4]
   13870:	e5cc2006 	strb	r2, [ip, #6]
   13874:	e7e7245e 	ubfx	r2, lr, #8, #8
   13878:	e5cc100c 	strb	r1, [ip, #12]
   1387c:	e5cc2009 	strb	r2, [ip, #9]
   13880:	e7e7285e 	ubfx	r2, lr, #16, #8
   13884:	e1a0ec2e 	lsr	lr, lr, #24
   13888:	e5cc200a 	strb	r2, [ip, #10]
   1388c:	e5cce00b 	strb	lr, [ip, #11]
   13890:	e7e72451 	ubfx	r2, r1, #8, #8
   13894:	e5cc200d 	strb	r2, [ip, #13]
   13898:	e7e72851 	ubfx	r2, r1, #16, #8
   1389c:	e5cc200e 	strb	r2, [ip, #14]
   138a0:	e1a02c21 	lsr	r2, r1, #24
   138a4:	e5cc200f 	strb	r2, [ip, #15]
   138a8:	e5843040 	str	r3, [r4, #64]	@ 0x40
   138ac:	ebfff3c1 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   138b0:	e3a03001 	mov	r3, #1
   138b4:	e5843014 	str	r3, [r4, #20]
   138b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   138bc:	e30714e8 	movw	r1, #29928	@ 0x74e8
   138c0:	e3401001 	movt	r1, #1
   138c4:	e3a020eb 	mov	r2, #235	@ 0xeb
   138c8:	e2810074 	add	r0, r1, #116	@ 0x74
   138cc:	ebfffa19 	bl	12138 <assertion_failed>
   138d0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   138d4:	e3401001 	movt	r1, #1
   138d8:	e3a020ec 	mov	r2, #236	@ 0xec
   138dc:	e2810084 	add	r0, r1, #132	@ 0x84
   138e0:	ebfffa14 	bl	12138 <assertion_failed>
   138e4:	e30714e8 	movw	r1, #29928	@ 0x74e8
   138e8:	e3401001 	movt	r1, #1
   138ec:	e3a020ed 	mov	r2, #237	@ 0xed
   138f0:	e28100bc 	add	r0, r1, #188	@ 0xbc
   138f4:	ebfffa0f 	bl	12138 <assertion_failed>
   138f8:	e30714e8 	movw	r1, #29928	@ 0x74e8
   138fc:	e3401001 	movt	r1, #1
   13900:	e3a020f2 	mov	r2, #242	@ 0xf2
   13904:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   13908:	ebfffa0a 	bl	12138 <assertion_failed>
   1390c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13910:	e3401001 	movt	r1, #1
   13914:	e3a020f5 	mov	r2, #245	@ 0xf5
   13918:	e28100a4 	add	r0, r1, #164	@ 0xa4
   1391c:	ebfffa05 	bl	12138 <assertion_failed>
   13920:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13924:	e3401001 	movt	r1, #1
   13928:	e3a020ee 	mov	r2, #238	@ 0xee
   1392c:	e28100d4 	add	r0, r1, #212	@ 0xd4
   13930:	ebfffa00 	bl	12138 <assertion_failed>

00013934 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)>:
   13934:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13938:	e2525000 	subs	r5, r2, #0
   1393c:	e24dd00c 	sub	sp, sp, #12
   13940:	e59da030 	ldr	sl, [sp, #48]	@ 0x30
   13944:	e5dd9034 	ldrb	r9, [sp, #52]	@ 0x34
   13948:	0a000080 	beq	13b50 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x21c>
   1394c:	e35a0000 	cmp	sl, #0
   13950:	0a000083 	beq	13b64 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x230>
   13954:	e37a0107 	cmn	sl, #-1073741823	@ 0xc0000001
   13958:	8a000086 	bhi	13b78 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x244>
   1395c:	e5902000 	ldr	r2, [r0]
   13960:	e1a07003 	mov	r7, r3
   13964:	e3073020 	movw	r3, #28704	@ 0x7020
   13968:	e3433f00 	movt	r3, #16128	@ 0x3f00
   1396c:	e1a06000 	mov	r6, r0
   13970:	e7933402 	ldr	r3, [r3, r2, lsl #8]
   13974:	e2233201 	eor	r3, r3, #268435456	@ 0x10000000
   13978:	e7e03e53 	ubfx	r3, r3, #28, #1
   1397c:	e35a0801 	cmp	sl, #65536	@ 0x10000
   13980:	33833001 	orrcc	r3, r3, #1
   13984:	e3530000 	cmp	r3, #0
   13988:	0a000084 	beq	13ba0 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x26c>
   1398c:	e3d144ff 	bics	r4, r1, #-16777216	@ 0xff000000
   13990:	0a00007d 	beq	13b8c <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x258>
   13994:	e284447e 	add	r4, r4, #2113929216	@ 0x7e000000
   13998:	e3570000 	cmp	r7, #0
   1399c:	0a000062 	beq	13b2c <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x1f8>
   139a0:	e1a09809 	lsl	r9, r9, #16
   139a4:	e3a08000 	mov	r8, #0
   139a8:	e3893fd2 	orr	r3, r9, #840	@ 0x348
   139ac:	e1a0b000 	mov	fp, r0
   139b0:	e1a01008 	mov	r1, r8
   139b4:	e1a06003 	mov	r6, r3
   139b8:	e1a08000 	mov	r8, r0
   139bc:	e1a03005 	mov	r3, r5
   139c0:	e4950004 	ldr	r0, [r5], #4
   139c4:	e3500000 	cmp	r0, #0
   139c8:	0a000044 	beq	13ae0 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x1ac>
   139cc:	e5bb9004 	ldr	r9, [fp, #4]!
   139d0:	e3590000 	cmp	r9, #0
   139d4:	0a000058 	beq	13b3c <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x208>
   139d8:	e3a02048 	mov	r2, #72	@ 0x48
   139dc:	e5c92000 	strb	r2, [r9]
   139e0:	e3a02003 	mov	r2, #3
   139e4:	e5c92001 	strb	r2, [r9, #1]
   139e8:	e3802103 	orr	r2, r0, #-1073741824	@ 0xc0000000
   139ec:	e3a0c000 	mov	ip, #0
   139f0:	e3570001 	cmp	r7, #1
   139f4:	e5c90004 	strb	r0, [r9, #4]
   139f8:	e1a02c22 	lsr	r2, r2, #24
   139fc:	e5c94008 	strb	r4, [r9, #8]
   13a00:	e5c92007 	strb	r2, [r9, #7]
   13a04:	e1a02826 	lsr	r2, r6, #16
   13a08:	e5c9a00c 	strb	sl, [r9, #12]
   13a0c:	e5c92002 	strb	r2, [r9, #2]
   13a10:	e1a02c26 	lsr	r2, r6, #24
   13a14:	e5c9c010 	strb	ip, [r9, #16]
   13a18:	e5c92003 	strb	r2, [r9, #3]
   13a1c:	e7e72450 	ubfx	r2, r0, #8, #8
   13a20:	e5c9c011 	strb	ip, [r9, #17]
   13a24:	e5c92005 	strb	r2, [r9, #5]
   13a28:	e7e72850 	ubfx	r2, r0, #16, #8
   13a2c:	e5c9c012 	strb	ip, [r9, #18]
   13a30:	e5c92006 	strb	r2, [r9, #6]
   13a34:	e7e72454 	ubfx	r2, r4, #8, #8
   13a38:	e5c9c013 	strb	ip, [r9, #19]
   13a3c:	e5c92009 	strb	r2, [r9, #9]
   13a40:	e7e72854 	ubfx	r2, r4, #16, #8
   13a44:	e5c9200a 	strb	r2, [r9, #10]
   13a48:	e1a02c24 	lsr	r2, r4, #24
   13a4c:	e5c9200b 	strb	r2, [r9, #11]
   13a50:	e7e7245a 	ubfx	r2, sl, #8, #8
   13a54:	e5c9200d 	strb	r2, [r9, #13]
   13a58:	e7e7285a 	ubfx	r2, sl, #16, #8
   13a5c:	e5c9200e 	strb	r2, [r9, #14]
   13a60:	e1a02c2a 	lsr	r2, sl, #24
   13a64:	e5c9200f 	strb	r2, [r9, #15]
   13a68:	0a000021 	beq	13af4 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x1c0>
   13a6c:	e247e001 	sub	lr, r7, #1
   13a70:	e2812001 	add	r2, r1, #1
   13a74:	e151000e 	cmp	r1, lr
   13a78:	e1a0100a 	mov	r1, sl
   13a7c:	11a03002 	movne	r3, r2
   13a80:	01a0300c 	moveq	r3, ip
   13a84:	e58d2004 	str	r2, [sp, #4]
   13a88:	e0883103 	add	r3, r8, r3, lsl #2
   13a8c:	e5933004 	ldr	r3, [r3, #4]
   13a90:	e5c93014 	strb	r3, [r9, #20]
   13a94:	e383e103 	orr	lr, r3, #-1073741824	@ 0xc0000000
   13a98:	e1a0ec2e 	lsr	lr, lr, #24
   13a9c:	e5c9e017 	strb	lr, [r9, #23]
   13aa0:	e7e7e453 	ubfx	lr, r3, #8, #8
   13aa4:	e7e73853 	ubfx	r3, r3, #16, #8
   13aa8:	e5c9e015 	strb	lr, [r9, #21]
   13aac:	e5c93016 	strb	r3, [r9, #22]
   13ab0:	e588c040 	str	ip, [r8, #64]	@ 0x40
   13ab4:	ebfff33f 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   13ab8:	e59d2004 	ldr	r2, [sp, #4]
   13abc:	e5153004 	ldr	r3, [r5, #-4]
   13ac0:	e1520007 	cmp	r2, r7
   13ac4:	e58b3018 	str	r3, [fp, #24]
   13ac8:	0a000039 	beq	13bb4 <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x280>
   13acc:	e1a03005 	mov	r3, r5
   13ad0:	e4950004 	ldr	r0, [r5], #4
   13ad4:	e1a01002 	mov	r1, r2
   13ad8:	e3500000 	cmp	r0, #0
   13adc:	1affffba 	bne	139cc <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x98>
   13ae0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13ae4:	e3401001 	movt	r1, #1
   13ae8:	e2810f76 	add	r0, r1, #472	@ 0x1d8
   13aec:	e3002122 	movw	r2, #290	@ 0x122
   13af0:	ebfff990 	bl	12138 <assertion_failed>
   13af4:	e1a06008 	mov	r6, r8
   13af8:	e5c9c014 	strb	ip, [r9, #20]
   13afc:	e1a08001 	mov	r8, r1
   13b00:	e5c9c015 	strb	ip, [r9, #21]
   13b04:	e5c9c016 	strb	ip, [r9, #22]
   13b08:	e1a0100a 	mov	r1, sl
   13b0c:	e5c9c017 	strb	ip, [r9, #23]
   13b10:	e0868108 	add	r8, r6, r8, lsl #2
   13b14:	e586c040 	str	ip, [r6, #64]	@ 0x40
   13b18:	e58d3004 	str	r3, [sp, #4]
   13b1c:	ebfff325 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   13b20:	e59d3004 	ldr	r3, [sp, #4]
   13b24:	e5933000 	ldr	r3, [r3]
   13b28:	e588301c 	str	r3, [r8, #28]
   13b2c:	e5867014 	str	r7, [r6, #20]
   13b30:	e586a044 	str	sl, [r6, #68]	@ 0x44
   13b34:	e28dd00c 	add	sp, sp, #12
   13b38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b3c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13b40:	e3401001 	movt	r1, #1
   13b44:	e2810f7a 	add	r0, r1, #488	@ 0x1e8
   13b48:	e3002123 	movw	r2, #291	@ 0x123
   13b4c:	ebfff979 	bl	12138 <assertion_failed>
   13b50:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13b54:	e3401001 	movt	r1, #1
   13b58:	e2810d05 	add	r0, r1, #320	@ 0x140
   13b5c:	e3002116 	movw	r2, #278	@ 0x116
   13b60:	ebfff974 	bl	12138 <assertion_failed>
   13b64:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13b68:	e3401001 	movt	r1, #1
   13b6c:	e2810e15 	add	r0, r1, #336	@ 0x150
   13b70:	e3002117 	movw	r2, #279	@ 0x117
   13b74:	ebfff96f 	bl	12138 <assertion_failed>
   13b78:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13b7c:	e3401001 	movt	r1, #1
   13b80:	e3a02f46 	mov	r2, #280	@ 0x118
   13b84:	e2810e16 	add	r0, r1, #352	@ 0x160
   13b88:	ebfff96a 	bl	12138 <assertion_failed>
   13b8c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13b90:	e3401001 	movt	r1, #1
   13b94:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   13b98:	e300211d 	movw	r2, #285	@ 0x11d
   13b9c:	ebfff965 	bl	12138 <assertion_failed>
   13ba0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13ba4:	e3401001 	movt	r1, #1
   13ba8:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   13bac:	e3002119 	movw	r2, #281	@ 0x119
   13bb0:	ebfff960 	bl	12138 <assertion_failed>
   13bb4:	e1a06008 	mov	r6, r8
   13bb8:	eaffffdb 	b	13b2c <CDMAChannel::SetupCyclicIOWrite(unsigned int, void const**, unsigned int, unsigned int, TDREQ)+0x1f8>

00013bbc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   13bbc:	e92d4070 	push	{r4, r5, r6, lr}
   13bc0:	e2515000 	subs	r5, r1, #0
   13bc4:	e59d6010 	ldr	r6, [sp, #16]
   13bc8:	e59de014 	ldr	lr, [sp, #20]
   13bcc:	0a000051 	beq	13d18 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   13bd0:	e1a04000 	mov	r4, r0
   13bd4:	e3520000 	cmp	r2, #0
   13bd8:	e1a00002 	mov	r0, r2
   13bdc:	0a000052 	beq	13d2c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x170>
   13be0:	e3530000 	cmp	r3, #0
   13be4:	0a000055 	beq	13d40 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x184>
   13be8:	e3530801 	cmp	r3, #65536	@ 0x10000
   13bec:	2a000058 	bcs	13d54 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x198>
   13bf0:	e3560000 	cmp	r6, #0
   13bf4:	0a00005b 	beq	13d68 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ac>
   13bf8:	e3560901 	cmp	r6, #16384	@ 0x4000
   13bfc:	2a00005e 	bcs	13d7c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
   13c00:	e35e0801 	cmp	lr, #65536	@ 0x10000
   13c04:	2a00003e 	bcs	13d04 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x148>
   13c08:	e59d2018 	ldr	r2, [sp, #24]
   13c0c:	e352000f 	cmp	r2, #15
   13c10:	8a00005e 	bhi	13d90 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1d4>
   13c14:	e5941000 	ldr	r1, [r4]
   13c18:	e3072020 	movw	r2, #28704	@ 0x7020
   13c1c:	e3432f00 	movt	r2, #16128	@ 0x3f00
   13c20:	e7922401 	ldr	r2, [r2, r1, lsl #8]
   13c24:	e3120201 	tst	r2, #268435456	@ 0x10000000
   13c28:	1a00005d 	bne	13da4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e8>
   13c2c:	e594c004 	ldr	ip, [r4, #4]
   13c30:	e35c0000 	cmp	ip, #0
   13c34:	0a00005f 	beq	13db8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1fc>
   13c38:	e5cce012 	strb	lr, [ip, #18]
   13c3c:	e2462001 	sub	r2, r6, #1
   13c40:	e7e7e45e 	ubfx	lr, lr, #8, #8
   13c44:	e5cce013 	strb	lr, [ip, #19]
   13c48:	e59de018 	ldr	lr, [sp, #24]
   13c4c:	e0010396 	mul	r1, r6, r3
   13c50:	e1832802 	orr	r2, r3, r2, lsl #16
   13c54:	e5cc300c 	strb	r3, [ip, #12]
   13c58:	e7e73453 	ubfx	r3, r3, #8, #8
   13c5c:	e5cc300d 	strb	r3, [ip, #13]
   13c60:	e3003332 	movw	r3, #818	@ 0x332
   13c64:	e5cc3000 	strb	r3, [ip]
   13c68:	e183360e 	orr	r3, r3, lr, lsl #12
   13c6c:	e380e103 	orr	lr, r0, #-1073741824	@ 0xc0000000
   13c70:	e5cc0004 	strb	r0, [ip, #4]
   13c74:	e1a0ec2e 	lsr	lr, lr, #24
   13c78:	e5cce007 	strb	lr, [ip, #7]
   13c7c:	e385e103 	orr	lr, r5, #-1073741824	@ 0xc0000000
   13c80:	e1a06423 	lsr	r6, r3, #8
   13c84:	e5cc5008 	strb	r5, [ip, #8]
   13c88:	e5cc6001 	strb	r6, [ip, #1]
   13c8c:	e1a0ec2e 	lsr	lr, lr, #24
   13c90:	e7e76853 	ubfx	r6, r3, #16, #8
   13c94:	e5cce00b 	strb	lr, [ip, #11]
   13c98:	e1a03c23 	lsr	r3, r3, #24
   13c9c:	e3a0e000 	mov	lr, #0
   13ca0:	e5cc3003 	strb	r3, [ip, #3]
   13ca4:	e7e73450 	ubfx	r3, r0, #8, #8
   13ca8:	e5cce014 	strb	lr, [ip, #20]
   13cac:	e5cc3005 	strb	r3, [ip, #5]
   13cb0:	e7e73850 	ubfx	r3, r0, #16, #8
   13cb4:	e5cce015 	strb	lr, [ip, #21]
   13cb8:	e5cc3006 	strb	r3, [ip, #6]
   13cbc:	e7e73455 	ubfx	r3, r5, #8, #8
   13cc0:	e5cce016 	strb	lr, [ip, #22]
   13cc4:	e5cc3009 	strb	r3, [ip, #9]
   13cc8:	e7e73855 	ubfx	r3, r5, #16, #8
   13ccc:	e5cce017 	strb	lr, [ip, #23]
   13cd0:	e5cc300a 	strb	r3, [ip, #10]
   13cd4:	e7e73852 	ubfx	r3, r2, #16, #8
   13cd8:	e5cc6002 	strb	r6, [ip, #2]
   13cdc:	e1a02c22 	lsr	r2, r2, #24
   13ce0:	e5cc300e 	strb	r3, [ip, #14]
   13ce4:	e5cc200f 	strb	r2, [ip, #15]
   13ce8:	e5cce010 	strb	lr, [ip, #16]
   13cec:	e5cce011 	strb	lr, [ip, #17]
   13cf0:	e584e040 	str	lr, [r4, #64]	@ 0x40
   13cf4:	ebfff2af 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   13cf8:	e3a03001 	mov	r3, #1
   13cfc:	e5843014 	str	r3, [r4, #20]
   13d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   13d04:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d08:	e3401001 	movt	r1, #1
   13d0c:	e3a02f56 	mov	r2, #344	@ 0x158
   13d10:	e2810f95 	add	r0, r1, #596	@ 0x254
   13d14:	ebfff907 	bl	12138 <assertion_failed>
   13d18:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d1c:	e3401001 	movt	r1, #1
   13d20:	e2810060 	add	r0, r1, #96	@ 0x60
   13d24:	e3002152 	movw	r2, #338	@ 0x152
   13d28:	ebfff902 	bl	12138 <assertion_failed>
   13d2c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d30:	e3401001 	movt	r1, #1
   13d34:	e2810074 	add	r0, r1, #116	@ 0x74
   13d38:	e3002153 	movw	r2, #339	@ 0x153
   13d3c:	ebfff8fd 	bl	12138 <assertion_failed>
   13d40:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d44:	e3401001 	movt	r1, #1
   13d48:	e3a02f55 	mov	r2, #340	@ 0x154
   13d4c:	e2810c02 	add	r0, r1, #512	@ 0x200
   13d50:	ebfff8f8 	bl	12138 <assertion_failed>
   13d54:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d58:	e3401001 	movt	r1, #1
   13d5c:	e2810f85 	add	r0, r1, #532	@ 0x214
   13d60:	e3002155 	movw	r2, #341	@ 0x155
   13d64:	ebfff8f3 	bl	12138 <assertion_failed>
   13d68:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d6c:	e3401001 	movt	r1, #1
   13d70:	e2810f8b 	add	r0, r1, #556	@ 0x22c
   13d74:	e3002156 	movw	r2, #342	@ 0x156
   13d78:	ebfff8ee 	bl	12138 <assertion_failed>
   13d7c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d80:	e3401001 	movt	r1, #1
   13d84:	e2810f8f 	add	r0, r1, #572	@ 0x23c
   13d88:	e3002157 	movw	r2, #343	@ 0x157
   13d8c:	ebfff8e9 	bl	12138 <assertion_failed>
   13d90:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13d94:	e3401001 	movt	r1, #1
   13d98:	e2810090 	add	r0, r1, #144	@ 0x90
   13d9c:	e3002159 	movw	r2, #345	@ 0x159
   13da0:	ebfff8e4 	bl	12138 <assertion_failed>
   13da4:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13da8:	e3401001 	movt	r1, #1
   13dac:	e2810f9b 	add	r0, r1, #620	@ 0x26c
   13db0:	e300215b 	movw	r2, #347	@ 0x15b
   13db4:	ebfff8df 	bl	12138 <assertion_failed>
   13db8:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13dbc:	e3401001 	movt	r1, #1
   13dc0:	e28100a4 	add	r0, r1, #164	@ 0xa4
   13dc4:	e300215d 	movw	r2, #349	@ 0x15d
   13dc8:	ebfff8da 	bl	12138 <assertion_failed>

00013dcc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)>:
   13dcc:	e92d4070 	push	{r4, r5, r6, lr}
   13dd0:	e1a05001 	mov	r5, r1
   13dd4:	e5901000 	ldr	r1, [r0]
   13dd8:	e351000c 	cmp	r1, #12
   13ddc:	8a000014 	bhi	13e34 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x68>
   13de0:	e1a04000 	mov	r4, r0
   13de4:	e590002c 	ldr	r0, [r0, #44]	@ 0x2c
   13de8:	e3500000 	cmp	r0, #0
   13dec:	0a000015 	beq	13e48 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x7c>
   13df0:	e5d43030 	ldrb	r3, [r4, #48]	@ 0x30
   13df4:	e1a06002 	mov	r6, r2
   13df8:	e3530000 	cmp	r3, #0
   13dfc:	0a000004 	beq	13e14 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x48>
   13e00:	e3550000 	cmp	r5, #0
   13e04:	e5845034 	str	r5, [r4, #52]	@ 0x34
   13e08:	0a000013 	beq	13e5c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x90>
   13e0c:	e5846038 	str	r6, [r4, #56]	@ 0x38
   13e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e14:	e1a03004 	mov	r3, r4
   13e18:	e2811010 	add	r1, r1, #16
   13e1c:	e3042294 	movw	r2, #17044	@ 0x4294
   13e20:	e3402001 	movt	r2, #1
   13e24:	ebfff485 	bl	11040 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13e28:	e3a03001 	mov	r3, #1
   13e2c:	e5c43030 	strb	r3, [r4, #48]	@ 0x30
   13e30:	eafffff2 	b	13e00 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x34>
   13e34:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13e38:	e3401001 	movt	r1, #1
   13e3c:	e2810fa9 	add	r0, r1, #676	@ 0x2a4
   13e40:	e300217e 	movw	r2, #382	@ 0x17e
   13e44:	ebfff8bb 	bl	12138 <assertion_failed>
   13e48:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13e4c:	e3401001 	movt	r1, #1
   13e50:	e2810d0b 	add	r0, r1, #704	@ 0x2c0
   13e54:	e300217f 	movw	r2, #383	@ 0x17f
   13e58:	ebfff8b6 	bl	12138 <assertion_failed>
   13e5c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13e60:	e3401001 	movt	r1, #1
   13e64:	e2810fb6 	add	r0, r1, #728	@ 0x2d8
   13e68:	e3002189 	movw	r2, #393	@ 0x189
   13e6c:	ebfff8b1 	bl	12138 <assertion_failed>

00013e70 <CDMAChannel::Start()>:
   13e70:	e5903014 	ldr	r3, [r0, #20]
   13e74:	e92d4070 	push	{r4, r5, r6, lr}
   13e78:	e1a04000 	mov	r4, r0
   13e7c:	e3530000 	cmp	r3, #0
   13e80:	0a000022 	beq	13f10 <CDMAChannel::Start()+0xa0>
   13e84:	e1a06000 	mov	r6, r0
   13e88:	e3a05000 	mov	r5, #0
   13e8c:	e5b60004 	ldr	r0, [r6, #4]!
   13e90:	e3500000 	cmp	r0, #0
   13e94:	0a000038 	beq	13f7c <CDMAChannel::Start()+0x10c>
   13e98:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
   13e9c:	e3530000 	cmp	r3, #0
   13ea0:	0a000014 	beq	13ef8 <CDMAChannel::Start()+0x88>
   13ea4:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   13ea8:	e3530000 	cmp	r3, #0
   13eac:	0a000037 	beq	13f90 <CDMAChannel::Start()+0x120>
   13eb0:	e5d43030 	ldrb	r3, [r4, #48]	@ 0x30
   13eb4:	e3530000 	cmp	r3, #0
   13eb8:	0a000039 	beq	13fa4 <CDMAChannel::Start()+0x134>
   13ebc:	e5d03000 	ldrb	r3, [r0]
   13ec0:	e5d0c001 	ldrb	ip, [r0, #1]
   13ec4:	e5d01002 	ldrb	r1, [r0, #2]
   13ec8:	e5d02003 	ldrb	r2, [r0, #3]
   13ecc:	e183340c 	orr	r3, r3, ip, lsl #8
   13ed0:	e1833801 	orr	r3, r3, r1, lsl #16
   13ed4:	e1833c02 	orr	r3, r3, r2, lsl #24
   13ed8:	e3833001 	orr	r3, r3, #1
   13edc:	e5c03000 	strb	r3, [r0]
   13ee0:	e7e71453 	ubfx	r1, r3, #8, #8
   13ee4:	e7e72853 	ubfx	r2, r3, #16, #8
   13ee8:	e5c01001 	strb	r1, [r0, #1]
   13eec:	e1a03c23 	lsr	r3, r3, #24
   13ef0:	e5c02002 	strb	r2, [r0, #2]
   13ef4:	e5c03003 	strb	r3, [r0, #3]
   13ef8:	e3a01020 	mov	r1, #32
   13efc:	e2855001 	add	r5, r5, #1
   13f00:	ebfff22c 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   13f04:	e5943014 	ldr	r3, [r4, #20]
   13f08:	e1530005 	cmp	r3, r5
   13f0c:	8affffde 	bhi	13e8c <CDMAChannel::Start()+0x1c>
   13f10:	e5942000 	ldr	r2, [r4]
   13f14:	e352000b 	cmp	r2, #11
   13f18:	8a000026 	bhi	13fb8 <CDMAChannel::Start()+0x148>
   13f1c:	e282383f 	add	r3, r2, #4128768	@ 0x3f0000
   13f20:	e2833070 	add	r3, r3, #112	@ 0x70
   13f24:	e1a03403 	lsl	r3, r3, #8
   13f28:	e5931000 	ldr	r1, [r3]
   13f2c:	e3110004 	tst	r1, #4
   13f30:	1a000025 	bne	13fcc <CDMAChannel::Start()+0x15c>
   13f34:	e3a01a07 	mov	r1, #28672	@ 0x7000
   13f38:	e3431f00 	movt	r1, #16128	@ 0x3f00
   13f3c:	e3a00001 	mov	r0, #1
   13f40:	e5911fe0 	ldr	r1, [r1, #4064]	@ 0xfe0
   13f44:	e0111210 	ands	r1, r1, r0, lsl r2
   13f48:	1a000024 	bne	13fe0 <CDMAChannel::Start()+0x170>
   13f4c:	e5942004 	ldr	r2, [r4, #4]
   13f50:	e5841018 	str	r1, [r4, #24]
   13f54:	e3a01001 	mov	r1, #1
   13f58:	e34110f1 	movt	r1, #4337	@ 0x10f1
   13f5c:	e3822103 	orr	r2, r2, #-1073741824	@ 0xc0000000
   13f60:	e5832004 	str	r2, [r3, #4]
   13f64:	e5943000 	ldr	r3, [r4]
   13f68:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   13f6c:	e2833070 	add	r3, r3, #112	@ 0x70
   13f70:	e1a03403 	lsl	r3, r3, #8
   13f74:	e5831000 	str	r1, [r3]
   13f78:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f7c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13f80:	e3401001 	movt	r1, #1
   13f84:	e2810f7a 	add	r0, r1, #488	@ 0x1e8
   13f88:	e300219b 	movw	r2, #411	@ 0x19b
   13f8c:	ebfff869 	bl	12138 <assertion_failed>
   13f90:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13f94:	e3401001 	movt	r1, #1
   13f98:	e2810d0b 	add	r0, r1, #704	@ 0x2c0
   13f9c:	e300219f 	movw	r2, #415	@ 0x19f
   13fa0:	ebfff864 	bl	12138 <assertion_failed>
   13fa4:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13fa8:	e3401001 	movt	r1, #1
   13fac:	e3a02e1a 	mov	r2, #416	@ 0x1a0
   13fb0:	e2810fbd 	add	r0, r1, #756	@ 0x2f4
   13fb4:	ebfff85f 	bl	12138 <assertion_failed>
   13fb8:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13fbc:	e3401001 	movt	r1, #1
   13fc0:	e2810030 	add	r0, r1, #48	@ 0x30
   13fc4:	e30021aa 	movw	r2, #426	@ 0x1aa
   13fc8:	ebfff85a 	bl	12138 <assertion_failed>
   13fcc:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13fd0:	e3401001 	movt	r1, #1
   13fd4:	e2810fc1 	add	r0, r1, #772	@ 0x304
   13fd8:	e30021ab 	movw	r2, #427	@ 0x1ab
   13fdc:	ebfff855 	bl	12138 <assertion_failed>
   13fe0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   13fe4:	e3401001 	movt	r1, #1
   13fe8:	e3a02f6b 	mov	r2, #428	@ 0x1ac
   13fec:	e2810fce 	add	r0, r1, #824	@ 0x338
   13ff0:	ebfff850 	bl	12138 <assertion_failed>

00013ff4 <CDMAChannel::Wait()>:
   13ff4:	e5902000 	ldr	r2, [r0]
   13ff8:	e92d4010 	push	{r4, lr}
   13ffc:	e352000b 	cmp	r2, #11
   14000:	8a000014 	bhi	14058 <CDMAChannel::Wait()+0x64>
   14004:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
   14008:	e1a04000 	mov	r4, r0
   1400c:	e3530000 	cmp	r3, #0
   14010:	0282283f 	addeq	r2, r2, #4128768	@ 0x3f0000
   14014:	02822070 	addeq	r2, r2, #112	@ 0x70
   14018:	01a02402 	lsleq	r2, r2, #8
   1401c:	1a000012 	bne	1406c <CDMAChannel::Wait()+0x78>
   14020:	e5923000 	ldr	r3, [r2]
   14024:	e3130001 	tst	r3, #1
   14028:	1afffffc 	bne	14020 <CDMAChannel::Wait()+0x2c>
   1402c:	e5942040 	ldr	r2, [r4, #64]	@ 0x40
   14030:	e2233c01 	eor	r3, r3, #256	@ 0x100
   14034:	e3520000 	cmp	r2, #0
   14038:	e7e00453 	ubfx	r0, r3, #8, #1
   1403c:	e5c4003c 	strb	r0, [r4, #60]	@ 0x3c
   14040:	08bd8010 	popeq	{r4, pc}
   14044:	e1a00002 	mov	r0, r2
   14048:	e5941044 	ldr	r1, [r4, #68]	@ 0x44
   1404c:	ebfff1d9 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   14050:	e5d4003c 	ldrb	r0, [r4, #60]	@ 0x3c
   14054:	e8bd8010 	pop	{r4, pc}
   14058:	e30714e8 	movw	r1, #29928	@ 0x74e8
   1405c:	e3401001 	movt	r1, #1
   14060:	e2810030 	add	r0, r1, #48	@ 0x30
   14064:	e30021c2 	movw	r2, #450	@ 0x1c2
   14068:	ebfff832 	bl	12138 <assertion_failed>
   1406c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   14070:	e3401001 	movt	r1, #1
   14074:	e2810fdb 	add	r0, r1, #876	@ 0x36c
   14078:	e30021c3 	movw	r2, #451	@ 0x1c3
   1407c:	ebfff82d 	bl	12138 <assertion_failed>

00014080 <CDMAChannel::GetStatus()>:
   14080:	e5903000 	ldr	r3, [r0]
   14084:	e92d4010 	push	{r4, lr}
   14088:	e353000b 	cmp	r3, #11
   1408c:	8a000007 	bhi	140b0 <CDMAChannel::GetStatus()+0x30>
   14090:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   14094:	e2833070 	add	r3, r3, #112	@ 0x70
   14098:	e1a03403 	lsl	r3, r3, #8
   1409c:	e5933000 	ldr	r3, [r3]
   140a0:	e3130001 	tst	r3, #1
   140a4:	1a000006 	bne	140c4 <CDMAChannel::GetStatus()+0x44>
   140a8:	e5d0003c 	ldrb	r0, [r0, #60]	@ 0x3c
   140ac:	e8bd8010 	pop	{r4, pc}
   140b0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   140b4:	e3401001 	movt	r1, #1
   140b8:	e2810030 	add	r0, r1, #48	@ 0x30
   140bc:	e30021e2 	movw	r2, #482	@ 0x1e2
   140c0:	ebfff81c 	bl	12138 <assertion_failed>
   140c4:	e30714e8 	movw	r1, #29928	@ 0x74e8
   140c8:	e3401001 	movt	r1, #1
   140cc:	e2810fe2 	add	r0, r1, #904	@ 0x388
   140d0:	e30021e3 	movw	r2, #483	@ 0x1e3
   140d4:	ebfff817 	bl	12138 <assertion_failed>

000140d8 <CDMAChannel::Cancel()>:
   140d8:	e5903000 	ldr	r3, [r0]
   140dc:	e353000b 	cmp	r3, #11
   140e0:	8a000005 	bhi	140fc <CDMAChannel::Cancel()+0x24>
   140e4:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   140e8:	e3a02000 	mov	r2, #0
   140ec:	e2833070 	add	r3, r3, #112	@ 0x70
   140f0:	e1a03403 	lsl	r3, r3, #8
   140f4:	e5832000 	str	r2, [r3]
   140f8:	e12fff1e 	bx	lr
   140fc:	e30714e8 	movw	r1, #29928	@ 0x74e8
   14100:	e3401001 	movt	r1, #1
   14104:	e2810030 	add	r0, r1, #48	@ 0x30
   14108:	e92d4010 	push	{r4, lr}
   1410c:	e30021f5 	movw	r2, #501	@ 0x1f5
   14110:	ebfff808 	bl	12138 <assertion_failed>

00014114 <CDMAChannel::InterruptHandler()>:
   14114:	e92d4070 	push	{r4, r5, r6, lr}
   14118:	e1a04000 	mov	r4, r0
   1411c:	e5900040 	ldr	r0, [r0, #64]	@ 0x40
   14120:	e3500000 	cmp	r0, #0
   14124:	1a000036 	bne	14204 <CDMAChannel::InterruptHandler()+0xf0>
   14128:	e5941000 	ldr	r1, [r4]
   1412c:	e351000b 	cmp	r1, #11
   14130:	8a000038 	bhi	14218 <CDMAChannel::InterruptHandler()+0x104>
   14134:	e3a02a07 	mov	r2, #28672	@ 0x7000
   14138:	e3432f00 	movt	r2, #16128	@ 0x3f00
   1413c:	e3a03001 	mov	r3, #1
   14140:	e5920fe0 	ldr	r0, [r2, #4064]	@ 0xfe0
   14144:	e1a03113 	lsl	r3, r3, r1
   14148:	e1130000 	tst	r3, r0
   1414c:	0a000036 	beq	1422c <CDMAChannel::InterruptHandler()+0x118>
   14150:	e5823fe0 	str	r3, [r2, #4064]	@ 0xfe0
   14154:	e5943000 	ldr	r3, [r4]
   14158:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   1415c:	e2833070 	add	r3, r3, #112	@ 0x70
   14160:	e1a03403 	lsl	r3, r3, #8
   14164:	e5931000 	ldr	r1, [r3]
   14168:	e3110004 	tst	r1, #4
   1416c:	0a000033 	beq	14240 <CDMAChannel::InterruptHandler()+0x12c>
   14170:	e5945034 	ldr	r5, [r4, #52]	@ 0x34
   14174:	e2212c01 	eor	r2, r1, #256	@ 0x100
   14178:	e5831000 	str	r1, [r3]
   1417c:	e7e02452 	ubfx	r2, r2, #8, #1
   14180:	e3550000 	cmp	r5, #0
   14184:	e5c4203c 	strb	r2, [r4, #60]	@ 0x3c
   14188:	0a000031 	beq	14254 <CDMAChannel::InterruptHandler()+0x140>
   1418c:	e5943018 	ldr	r3, [r4, #24]
   14190:	e3a06000 	mov	r6, #0
   14194:	e5846034 	str	r6, [r4, #52]	@ 0x34
   14198:	e3530003 	cmp	r3, #3
   1419c:	8a000031 	bhi	14268 <CDMAChannel::InterruptHandler()+0x154>
   141a0:	e5943038 	ldr	r3, [r4, #56]	@ 0x38
   141a4:	e5941018 	ldr	r1, [r4, #24]
   141a8:	e5940000 	ldr	r0, [r4]
   141ac:	e12fff35 	blx	r5
   141b0:	e5d4303c 	ldrb	r3, [r4, #60]	@ 0x3c
   141b4:	e3530000 	cmp	r3, #0
   141b8:	08bd8070 	popeq	{r4, r5, r6, pc}
   141bc:	e5943014 	ldr	r3, [r4, #20]
   141c0:	e3530001 	cmp	r3, #1
   141c4:	98bd8070 	popls	{r4, r5, r6, pc}
   141c8:	e5942018 	ldr	r2, [r4, #24]
   141cc:	e1530002 	cmp	r3, r2
   141d0:	9a000029 	bls	1427c <CDMAChannel::InterruptHandler()+0x168>
   141d4:	e5943018 	ldr	r3, [r4, #24]
   141d8:	e5941044 	ldr	r1, [r4, #68]	@ 0x44
   141dc:	e0843103 	add	r3, r4, r3, lsl #2
   141e0:	e593001c 	ldr	r0, [r3, #28]
   141e4:	ebfff173 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   141e8:	e5943018 	ldr	r3, [r4, #24]
   141ec:	e5942014 	ldr	r2, [r4, #20]
   141f0:	e2833001 	add	r3, r3, #1
   141f4:	e5843018 	str	r3, [r4, #24]
   141f8:	e1530002 	cmp	r3, r2
   141fc:	05846018 	streq	r6, [r4, #24]
   14200:	e8bd8070 	pop	{r4, r5, r6, pc}
   14204:	e5941044 	ldr	r1, [r4, #68]	@ 0x44
   14208:	ebfff16a 	bl	107b8 <CleanAndInvalidateDataCacheRange>
   1420c:	e5941000 	ldr	r1, [r4]
   14210:	e351000b 	cmp	r1, #11
   14214:	9affffc6 	bls	14134 <CDMAChannel::InterruptHandler()+0x20>
   14218:	e30714e8 	movw	r1, #29928	@ 0x74e8
   1421c:	e3401001 	movt	r1, #1
   14220:	e3a02f81 	mov	r2, #516	@ 0x204
   14224:	e2810030 	add	r0, r1, #48	@ 0x30
   14228:	ebfff7c2 	bl	12138 <assertion_failed>
   1422c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   14230:	e3401001 	movt	r1, #1
   14234:	e2810fef 	add	r0, r1, #956	@ 0x3bc
   14238:	e300220a 	movw	r2, #522	@ 0x20a
   1423c:	ebfff7bd 	bl	12138 <assertion_failed>
   14240:	e30714e8 	movw	r1, #29928	@ 0x74e8
   14244:	e3401001 	movt	r1, #1
   14248:	e2810ff5 	add	r0, r1, #980	@ 0x3d4
   1424c:	e300220e 	movw	r2, #526	@ 0x20e
   14250:	ebfff7b8 	bl	12138 <assertion_failed>
   14254:	e30714e8 	movw	r1, #29928	@ 0x74e8
   14258:	e3401001 	movt	r1, #1
   1425c:	e2810fb6 	add	r0, r1, #728	@ 0x2d8
   14260:	e3002215 	movw	r2, #533	@ 0x215
   14264:	ebfff7b3 	bl	12138 <assertion_failed>
   14268:	e30714e8 	movw	r1, #29928	@ 0x74e8
   1426c:	e3401001 	movt	r1, #1
   14270:	e2810ff9 	add	r0, r1, #996	@ 0x3e4
   14274:	e3002219 	movw	r2, #537	@ 0x219
   14278:	ebfff7ae 	bl	12138 <assertion_failed>
   1427c:	e30714e8 	movw	r1, #29928	@ 0x74e8
   14280:	e3401001 	movt	r1, #1
   14284:	e59f0004 	ldr	r0, [pc, #4]	@ 14290 <CDMAChannel::InterruptHandler()+0x17c>
   14288:	e300221f 	movw	r2, #543	@ 0x21f
   1428c:	ebfff7a9 	bl	12138 <assertion_failed>
   14290:	000178f0 	.word	0x000178f0

00014294 <CDMAChannel::InterruptStub(void*)>:
   14294:	e3500000 	cmp	r0, #0
   14298:	0a000000 	beq	142a0 <CDMAChannel::InterruptStub(void*)+0xc>
   1429c:	eaffff9c 	b	14114 <CDMAChannel::InterruptHandler()>
   142a0:	e30714e8 	movw	r1, #29928	@ 0x74e8
   142a4:	e3401001 	movt	r1, #1
   142a8:	e59f0008 	ldr	r0, [pc, #8]	@ 142b8 <CDMAChannel::InterruptStub(void*)+0x24>
   142ac:	e300222e 	movw	r2, #558	@ 0x22e
   142b0:	e92d4010 	push	{r4, lr}
   142b4:	ebfff79f 	bl	12138 <assertion_failed>
   142b8:	00017910 	.word	0x00017910

000142bc <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   142bc:	e92d4010 	push	{r4, lr}
   142c0:	e1a04000 	mov	r4, r0
   142c4:	e3a0c000 	mov	ip, #0
   142c8:	e8800006 	stm	r0, {r1, r2}
   142cc:	e3a02001 	mov	r2, #1
   142d0:	e5c43008 	strb	r3, [r4, #8]
   142d4:	e3a00901 	mov	r0, #16384	@ 0x4000
   142d8:	e584c00c 	str	ip, [r4, #12]
   142dc:	e584c010 	str	ip, [r4, #16]
   142e0:	e584c014 	str	ip, [r4, #20]
   142e4:	e584c018 	str	ip, [r4, #24]
   142e8:	e584201c 	str	r2, [r4, #28]
   142ec:	e584c0e8 	str	ip, [r4, #232]	@ 0xe8
   142f0:	e584c0ec 	str	ip, [r4, #236]	@ 0xec
   142f4:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
   142f8:	e584c0f4 	str	ip, [r4, #244]	@ 0xf4
   142fc:	e584c0f8 	str	ip, [r4, #248]	@ 0xf8
   14300:	ebffe389 	bl	d12c <operator new[](unsigned int)>
   14304:	e3073b58 	movw	r3, #31576	@ 0x7b58
   14308:	e3403001 	movt	r3, #1
   1430c:	e5840010 	str	r0, [r4, #16]
   14310:	e1a00004 	mov	r0, r4
   14314:	e5834000 	str	r4, [r3]
   14318:	e8bd8010 	pop	{r4, pc}

0001431c <CLogger::~CLogger()>:
   1431c:	e3072b58 	movw	r2, #31576	@ 0x7b58
   14320:	e3402001 	movt	r2, #1
   14324:	e92d4010 	push	{r4, lr}
   14328:	e3a01000 	mov	r1, #0
   1432c:	e59030ec 	ldr	r3, [r0, #236]	@ 0xec
   14330:	e590c0e8 	ldr	ip, [r0, #232]	@ 0xe8
   14334:	e1a04000 	mov	r4, r0
   14338:	e5821000 	str	r1, [r2]
   1433c:	ea00000a 	b	1436c <CLogger::~CLogger()+0x50>
   14340:	e7940102 	ldr	r0, [r4, r2, lsl #2]
   14344:	e3500000 	cmp	r0, #0
   14348:	0a000002 	beq	14358 <CLogger::~CLogger()+0x3c>
   1434c:	ebffe388 	bl	d174 <operator delete(void*, unsigned int)>
   14350:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
   14354:	e594c0e8 	ldr	ip, [r4, #232]	@ 0xe8
   14358:	e2833001 	add	r3, r3, #1
   1435c:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   14360:	e3530032 	cmp	r3, #50	@ 0x32
   14364:	03a03000 	moveq	r3, #0
   14368:	058430ec 	streq	r3, [r4, #236]	@ 0xec
   1436c:	e2832008 	add	r2, r3, #8
   14370:	e3a01f42 	mov	r1, #264	@ 0x108
   14374:	e153000c 	cmp	r3, ip
   14378:	1afffff0 	bne	14340 <CLogger::~CLogger()+0x24>
   1437c:	e5940010 	ldr	r0, [r4, #16]
   14380:	e3500000 	cmp	r0, #0
   14384:	0a000000 	beq	1438c <CLogger::~CLogger()+0x70>
   14388:	ebffe373 	bl	d15c <operator delete[](void*)>
   1438c:	e1a00004 	mov	r0, r4
   14390:	e8bd8010 	pop	{r4, pc}

00014394 <CLogger::SetNewTarget(CDevice*)>:
   14394:	e580100c 	str	r1, [r0, #12]
   14398:	e12fff1e 	bx	lr

0001439c <CLogger::Get()>:
   1439c:	e92d4070 	push	{r4, r5, r6, lr}
   143a0:	e3075b58 	movw	r5, #31576	@ 0x7b58
   143a4:	e3405001 	movt	r5, #1
   143a8:	e5954000 	ldr	r4, [r5]
   143ac:	e3540000 	cmp	r4, #0
   143b0:	0a000001 	beq	143bc <CLogger::Get()+0x20>
   143b4:	e1a00004 	mov	r0, r4
   143b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   143bc:	e3a000fc 	mov	r0, #252	@ 0xfc
   143c0:	ebffe353 	bl	d114 <operator new(unsigned int)>
   143c4:	e1a04000 	mov	r4, r0
   143c8:	e3a03000 	mov	r3, #0
   143cc:	e3a02001 	mov	r2, #1
   143d0:	e3a00901 	mov	r0, #16384	@ 0x4000
   143d4:	e5843000 	str	r3, [r4]
   143d8:	e5843004 	str	r3, [r4, #4]
   143dc:	e5c42008 	strb	r2, [r4, #8]
   143e0:	e584300c 	str	r3, [r4, #12]
   143e4:	e5843010 	str	r3, [r4, #16]
   143e8:	e5843014 	str	r3, [r4, #20]
   143ec:	e5843018 	str	r3, [r4, #24]
   143f0:	e584201c 	str	r2, [r4, #28]
   143f4:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
   143f8:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   143fc:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
   14400:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
   14404:	e58430f8 	str	r3, [r4, #248]	@ 0xf8
   14408:	ebffe347 	bl	d12c <operator new[](unsigned int)>
   1440c:	e5854000 	str	r4, [r5]
   14410:	e5840010 	str	r0, [r4, #16]
   14414:	e1a00004 	mov	r0, r4
   14418:	e8bd8070 	pop	{r4, r5, r6, pc}

0001441c <CLogger::Write(char const*)>:
   1441c:	e92d4070 	push	{r4, r5, r6, lr}
   14420:	e1a04000 	mov	r4, r0
   14424:	e1a00001 	mov	r0, r1
   14428:	e1a05001 	mov	r5, r1
   1442c:	ebffe015 	bl	c488 <strlen>
   14430:	e594300c 	ldr	r3, [r4, #12]
   14434:	e1a06000 	mov	r6, r0
   14438:	e3530000 	cmp	r3, #0
   1443c:	0a000005 	beq	14458 <CLogger::Write(char const*)+0x3c>
   14440:	e5932000 	ldr	r2, [r3]
   14444:	e1a00003 	mov	r0, r3
   14448:	e1a01005 	mov	r1, r5
   1444c:	e592300c 	ldr	r3, [r2, #12]
   14450:	e1a02006 	mov	r2, r6
   14454:	e12fff33 	blx	r3
   14458:	e594001c 	ldr	r0, [r4, #28]
   1445c:	e3500000 	cmp	r0, #0
   14460:	1a000021 	bne	144ec <CLogger::Write(char const*)+0xd0>
   14464:	e3560000 	cmp	r6, #0
   14468:	08bd8070 	popeq	{r4, r5, r6, pc}
   1446c:	e1a0c005 	mov	ip, r5
   14470:	ea000002 	b	14480 <CLogger::Write(char const*)+0x64>
   14474:	e045300c 	sub	r3, r5, ip
   14478:	e1730006 	cmn	r3, r6
   1447c:	0a000015 	beq	144d8 <CLogger::Write(char const*)+0xbc>
   14480:	e0dc30d1 	ldrsb	r3, [ip], #1
   14484:	e353000d 	cmp	r3, #13
   14488:	0afffff9 	beq	14474 <CLogger::Write(char const*)+0x58>
   1448c:	e5942014 	ldr	r2, [r4, #20]
   14490:	e5941010 	ldr	r1, [r4, #16]
   14494:	e7c13002 	strb	r3, [r1, r2]
   14498:	e5943014 	ldr	r3, [r4, #20]
   1449c:	e594e018 	ldr	lr, [r4, #24]
   144a0:	e2833001 	add	r3, r3, #1
   144a4:	e7ed3053 	ubfx	r3, r3, #0, #14
   144a8:	e5843014 	str	r3, [r4, #20]
   144ac:	e153000e 	cmp	r3, lr
   144b0:	1affffef 	bne	14474 <CLogger::Write(char const*)+0x58>
   144b4:	e5d41008 	ldrb	r1, [r4, #8]
   144b8:	e2832001 	add	r2, r3, #1
   144bc:	e3510000 	cmp	r1, #0
   144c0:	0a00000d 	beq	144fc <CLogger::Write(char const*)+0xe0>
   144c4:	e045300c 	sub	r3, r5, ip
   144c8:	e7ed2052 	ubfx	r2, r2, #0, #14
   144cc:	e1730006 	cmn	r3, r6
   144d0:	e5842018 	str	r2, [r4, #24]
   144d4:	1affffe9 	bne	14480 <CLogger::Write(char const*)+0x64>
   144d8:	e594301c 	ldr	r3, [r4, #28]
   144dc:	e3530000 	cmp	r3, #0
   144e0:	08bd8070 	popeq	{r4, r5, r6, pc}
   144e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   144e8:	eafff1df 	b	10c6c <LeaveCritical>
   144ec:	ebfff1b3 	bl	10bc0 <EnterCritical>
   144f0:	e3560000 	cmp	r6, #0
   144f4:	1affffdc 	bne	1446c <CLogger::Write(char const*)+0x50>
   144f8:	eafffff6 	b	144d8 <CLogger::Write(char const*)+0xbc>
   144fc:	e2433001 	sub	r3, r3, #1
   14500:	e7ed3053 	ubfx	r3, r3, #0, #14
   14504:	e5843014 	str	r3, [r4, #20]
   14508:	eafffff2 	b	144d8 <CLogger::Write(char const*)+0xbc>

0001450c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1450c:	e92d4070 	push	{r4, r5, r6, lr}
   14510:	e1a05003 	mov	r5, r3
   14514:	e5903000 	ldr	r3, [r0]
   14518:	e24dd0c8 	sub	sp, sp, #200	@ 0xc8
   1451c:	e1520003 	cmp	r2, r3
   14520:	8a000012 	bhi	14570 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   14524:	e3a03000 	mov	r3, #0
   14528:	e1a04000 	mov	r4, r0
   1452c:	e3520000 	cmp	r2, #0
   14530:	e5cd3000 	strb	r3, [sp]
   14534:	0a00000f 	beq	14578 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   14538:	e1a0000d 	mov	r0, sp
   1453c:	ebffe089 	bl	c768 <strcat>
   14540:	e59f1098 	ldr	r1, [pc, #152]	@ 145e0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   14544:	e1a0000d 	mov	r0, sp
   14548:	ebffe086 	bl	c768 <strcat>
   1454c:	e1a01005 	mov	r1, r5
   14550:	e1a0000d 	mov	r0, sp
   14554:	ebffe083 	bl	c768 <strcat>
   14558:	e59f1084 	ldr	r1, [pc, #132]	@ 145e4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   1455c:	e1a0000d 	mov	r0, sp
   14560:	ebffe080 	bl	c768 <strcat>
   14564:	e1a0100d 	mov	r1, sp
   14568:	e1a00004 	mov	r0, r4
   1456c:	ebffffaa 	bl	1441c <CLogger::Write(char const*)>
   14570:	e28dd0c8 	add	sp, sp, #200	@ 0xc8
   14574:	e8bd8070 	pop	{r4, r5, r6, pc}
   14578:	e1a06001 	mov	r6, r1
   1457c:	e1a0000d 	mov	r0, sp
   14580:	e307191c 	movw	r1, #31004	@ 0x791c
   14584:	e3401001 	movt	r1, #1
   14588:	ebffe05e 	bl	c708 <strcpy>
   1458c:	e1a01006 	mov	r1, r6
   14590:	e1a0000d 	mov	r0, sp
   14594:	ebffe073 	bl	c768 <strcat>
   14598:	e59f1040 	ldr	r1, [pc, #64]	@ 145e0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   1459c:	e1a0000d 	mov	r0, sp
   145a0:	ebffe070 	bl	c768 <strcat>
   145a4:	e1a01005 	mov	r1, r5
   145a8:	e1a0000d 	mov	r0, sp
   145ac:	ebffe06d 	bl	c768 <strcat>
   145b0:	e59f1030 	ldr	r1, [pc, #48]	@ 145e8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   145b4:	e1a0000d 	mov	r0, sp
   145b8:	ebffe06a 	bl	c768 <strcat>
   145bc:	e59f1020 	ldr	r1, [pc, #32]	@ 145e4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   145c0:	e1a0000d 	mov	r0, sp
   145c4:	ebffe067 	bl	c768 <strcat>
   145c8:	e1a0100d 	mov	r1, sp
   145cc:	e1a00004 	mov	r0, r4
   145d0:	ebffff91 	bl	1441c <CLogger::Write(char const*)>
   145d4:	e3a000ff 	mov	r0, #255	@ 0xff
   145d8:	ebffdbb7 	bl	b4bc <set_qemu_exit_status>
   145dc:	ebffdbb7 	bl	b4c0 <halt>
   145e0:	00017924 	.word	0x00017924
   145e4:	00017930 	.word	0x00017930
   145e8:	00017928 	.word	0x00017928

000145ec <CLogger::Read(void*, unsigned int, bool)>:
   145ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145f0:	e1a04000 	mov	r4, r0
   145f4:	e590001c 	ldr	r0, [r0, #28]
   145f8:	e1a05001 	mov	r5, r1
   145fc:	e1a07002 	mov	r7, r2
   14600:	e1a08003 	mov	r8, r3
   14604:	e3500000 	cmp	r0, #0
   14608:	1a00001a 	bne	14678 <CLogger::Read(void*, unsigned int, bool)+0x8c>
   1460c:	e594c018 	ldr	ip, [r4, #24]
   14610:	e5943014 	ldr	r3, [r4, #20]
   14614:	e153000c 	cmp	r3, ip
   14618:	0a00001f 	beq	1469c <CLogger::Read(void*, unsigned int, bool)+0xb0>
   1461c:	e1a09007 	mov	r9, r7
   14620:	e3a0e000 	mov	lr, #0
   14624:	ea000007 	b	14648 <CLogger::Read(void*, unsigned int, bool)+0x5c>
   14628:	e5946010 	ldr	r6, [r4, #16]
   1462c:	e28ee001 	add	lr, lr, #1
   14630:	e19660dc 	ldrsb	r6, [r6, ip]
   14634:	e7edc051 	ubfx	ip, r1, #0, #14
   14638:	e4c56001 	strb	r6, [r5], #1
   1463c:	e5941014 	ldr	r1, [r4, #20]
   14640:	e151000c 	cmp	r1, ip
   14644:	0a000009 	beq	14670 <CLogger::Read(void*, unsigned int, bool)+0x84>
   14648:	e28c1001 	add	r1, ip, #1
   1464c:	e15e0007 	cmp	lr, r7
   14650:	1afffff4 	bne	14628 <CLogger::Read(void*, unsigned int, bool)+0x3c>
   14654:	e594301c 	ldr	r3, [r4, #28]
   14658:	e3580000 	cmp	r8, #0
   1465c:	1584c018 	strne	ip, [r4, #24]
   14660:	e3530000 	cmp	r3, #0
   14664:	1a00000e 	bne	146a4 <CLogger::Read(void*, unsigned int, bool)+0xb8>
   14668:	e1a00009 	mov	r0, r9
   1466c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14670:	e1a0900e 	mov	r9, lr
   14674:	eafffff6 	b	14654 <CLogger::Read(void*, unsigned int, bool)+0x68>
   14678:	ebfff150 	bl	10bc0 <EnterCritical>
   1467c:	e594c018 	ldr	ip, [r4, #24]
   14680:	e5943014 	ldr	r3, [r4, #20]
   14684:	e153000c 	cmp	r3, ip
   14688:	1affffe3 	bne	1461c <CLogger::Read(void*, unsigned int, bool)+0x30>
   1468c:	e594301c 	ldr	r3, [r4, #28]
   14690:	e3530000 	cmp	r3, #0
   14694:	0a000000 	beq	1469c <CLogger::Read(void*, unsigned int, bool)+0xb0>
   14698:	ebfff173 	bl	10c6c <LeaveCritical>
   1469c:	e3e09000 	mvn	r9, #0
   146a0:	eafffff0 	b	14668 <CLogger::Read(void*, unsigned int, bool)+0x7c>
   146a4:	ebfff170 	bl	10c6c <LeaveCritical>
   146a8:	e1a00009 	mov	r0, r9
   146ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000146b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   146b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   146b4:	e1a05000 	mov	r5, r0
   146b8:	e3a00f42 	mov	r0, #264	@ 0x108
   146bc:	e24dd008 	sub	sp, sp, #8
   146c0:	e1a06003 	mov	r6, r3
   146c4:	e1a07002 	mov	r7, r2
   146c8:	e1a08001 	mov	r8, r1
   146cc:	ebffe290 	bl	d114 <operator new(unsigned int)>
   146d0:	e1a04000 	mov	r4, r0
   146d4:	e1a01008 	mov	r1, r8
   146d8:	e3a02032 	mov	r2, #50	@ 0x32
   146dc:	e4c07001 	strb	r7, [r0], #1
   146e0:	ebffe013 	bl	c734 <strncpy>
   146e4:	e1a01006 	mov	r1, r6
   146e8:	e3a020c8 	mov	r2, #200	@ 0xc8
   146ec:	e3a06000 	mov	r6, #0
   146f0:	e2840033 	add	r0, r4, #51	@ 0x33
   146f4:	e5c46032 	strb	r6, [r4, #50]	@ 0x32
   146f8:	ebffe00d 	bl	c734 <strncpy>
   146fc:	e5950004 	ldr	r0, [r5, #4]
   14700:	e5c460fa 	strb	r6, [r4, #250]	@ 0xfa
   14704:	e1500006 	cmp	r0, r6
   14708:	0a000004 	beq	14720 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   1470c:	e28d2004 	add	r2, sp, #4
   14710:	e1a0100d 	mov	r1, sp
   14714:	ebffdc67 	bl	b8b8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   14718:	e1500006 	cmp	r0, r6
   1471c:	1a000037 	bne	14800 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x150>
   14720:	e3a03000 	mov	r3, #0
   14724:	e58430fc 	str	r3, [r4, #252]	@ 0xfc
   14728:	e1a00003 	mov	r0, r3
   1472c:	e5843100 	str	r3, [r4, #256]	@ 0x100
   14730:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
   14734:	e5840104 	str	r0, [r4, #260]	@ 0x104
   14738:	e3520000 	cmp	r2, #0
   1473c:	1a00002b 	bne	147f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   14740:	e59530e8 	ldr	r3, [r5, #232]	@ 0xe8
   14744:	e3530031 	cmp	r3, #49	@ 0x31
   14748:	e2831001 	add	r1, r3, #1
   1474c:	e0850103 	add	r0, r5, r3, lsl #2
   14750:	e5804020 	str	r4, [r0, #32]
   14754:	e595c0ec 	ldr	ip, [r5, #236]	@ 0xec
   14758:	0a000019 	beq	147c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
   1475c:	e151000c 	cmp	r1, ip
   14760:	e58510e8 	str	r1, [r5, #232]	@ 0xe8
   14764:	0a000007 	beq	14788 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
   14768:	e3520000 	cmp	r2, #0
   1476c:	1a000012 	bne	147bc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
   14770:	e59530f4 	ldr	r3, [r5, #244]	@ 0xf4
   14774:	e3530000 	cmp	r3, #0
   14778:	0a000000 	beq	14780 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   1477c:	e12fff33 	blx	r3
   14780:	e28dd008 	add	sp, sp, #8
   14784:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14788:	e3530030 	cmp	r3, #48	@ 0x30
   1478c:	e5904024 	ldr	r4, [r0, #36]	@ 0x24
   14790:	12833002 	addne	r3, r3, #2
   14794:	03a03000 	moveq	r3, #0
   14798:	e3520000 	cmp	r2, #0
   1479c:	e58530ec 	str	r3, [r5, #236]	@ 0xec
   147a0:	1a000010 	bne	147e8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   147a4:	e3540000 	cmp	r4, #0
   147a8:	0afffff0 	beq	14770 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   147ac:	e3a01f42 	mov	r1, #264	@ 0x108
   147b0:	e1a00004 	mov	r0, r4
   147b4:	ebffe26e 	bl	d174 <operator delete(void*, unsigned int)>
   147b8:	eaffffec 	b	14770 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   147bc:	ebfff12a 	bl	10c6c <LeaveCritical>
   147c0:	eaffffea 	b	14770 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   147c4:	e3a03000 	mov	r3, #0
   147c8:	e58530e8 	str	r3, [r5, #232]	@ 0xe8
   147cc:	e15c0003 	cmp	ip, r3
   147d0:	1affffe4 	bne	14768 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb8>
   147d4:	e3a03001 	mov	r3, #1
   147d8:	e5954020 	ldr	r4, [r5, #32]
   147dc:	e3520000 	cmp	r2, #0
   147e0:	e58530ec 	str	r3, [r5, #236]	@ 0xec
   147e4:	0affffee 	beq	147a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   147e8:	ebfff11f 	bl	10c6c <LeaveCritical>
   147ec:	eaffffec 	b	147a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   147f0:	e1a00002 	mov	r0, r2
   147f4:	ebfff0f1 	bl	10bc0 <EnterCritical>
   147f8:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
   147fc:	eaffffcf 	b	14740 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x90>
   14800:	e59d3004 	ldr	r3, [sp, #4]
   14804:	e3012759 	movw	r2, #5977	@ 0x1759
   14808:	e34d21b7 	movt	r2, #53687	@ 0xd1b7
   1480c:	e59d1000 	ldr	r1, [sp]
   14810:	e5950004 	ldr	r0, [r5, #4]
   14814:	e58410fc 	str	r1, [r4, #252]	@ 0xfc
   14818:	e0832392 	umull	r2, r3, r2, r3
   1481c:	e1a036a3 	lsr	r3, r3, #13
   14820:	e5843100 	str	r3, [r4, #256]	@ 0x100
   14824:	ebffdbee 	bl	b7e4 <CTimer::GetTimeZone() const>
   14828:	eaffffc0 	b	14730 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0001482c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   1482c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14830:	e1a04000 	mov	r4, r0
   14834:	e59000f0 	ldr	r0, [r0, #240]	@ 0xf0
   14838:	e1a06001 	mov	r6, r1
   1483c:	e1a08002 	mov	r8, r2
   14840:	e1a07003 	mov	r7, r3
   14844:	e3500000 	cmp	r0, #0
   14848:	1a00001e 	bne	148c8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x9c>
   1484c:	e594c0ec 	ldr	ip, [r4, #236]	@ 0xec
   14850:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
   14854:	e153000c 	cmp	r3, ip
   14858:	0a00002e 	beq	14918 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   1485c:	e35c0031 	cmp	ip, #49	@ 0x31
   14860:	128c0001 	addne	r0, ip, #1
   14864:	e28cc008 	add	ip, ip, #8
   14868:	e794510c 	ldr	r5, [r4, ip, lsl #2]
   1486c:	e58400ec 	str	r0, [r4, #236]	@ 0xec
   14870:	e1a01005 	mov	r1, r5
   14874:	e1a00008 	mov	r0, r8
   14878:	e4d13001 	ldrb	r3, [r1], #1
   1487c:	e5c63000 	strb	r3, [r6]
   14880:	ebffdfa0 	bl	c708 <strcpy>
   14884:	e2851033 	add	r1, r5, #51	@ 0x33
   14888:	e1a00007 	mov	r0, r7
   1488c:	ebffdf9d 	bl	c708 <strcpy>
   14890:	e59d1018 	ldr	r1, [sp, #24]
   14894:	e59520fc 	ldr	r2, [r5, #252]	@ 0xfc
   14898:	e1a00005 	mov	r0, r5
   1489c:	e5953100 	ldr	r3, [r5, #256]	@ 0x100
   148a0:	e5812000 	str	r2, [r1]
   148a4:	e3a01f42 	mov	r1, #264	@ 0x108
   148a8:	e59d201c 	ldr	r2, [sp, #28]
   148ac:	e5823000 	str	r3, [r2]
   148b0:	e59d2020 	ldr	r2, [sp, #32]
   148b4:	e5953104 	ldr	r3, [r5, #260]	@ 0x104
   148b8:	e5823000 	str	r3, [r2]
   148bc:	ebffe22c 	bl	d174 <operator delete(void*, unsigned int)>
   148c0:	e3a00001 	mov	r0, #1
   148c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   148c8:	ebfff0bc 	bl	10bc0 <EnterCritical>
   148cc:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
   148d0:	e59420e8 	ldr	r2, [r4, #232]	@ 0xe8
   148d4:	e1520003 	cmp	r2, r3
   148d8:	0a00000a 	beq	14908 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   148dc:	e2832008 	add	r2, r3, #8
   148e0:	e3530031 	cmp	r3, #49	@ 0x31
   148e4:	12833001 	addne	r3, r3, #1
   148e8:	03a03000 	moveq	r3, #0
   148ec:	e7945102 	ldr	r5, [r4, r2, lsl #2]
   148f0:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   148f4:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
   148f8:	e3530000 	cmp	r3, #0
   148fc:	0affffdb 	beq	14870 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
   14900:	ebfff0d9 	bl	10c6c <LeaveCritical>
   14904:	eaffffd9 	b	14870 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
   14908:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
   1490c:	e3530000 	cmp	r3, #0
   14910:	0a000000 	beq	14918 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   14914:	ebfff0d4 	bl	10c6c <LeaveCritical>
   14918:	e3a00000 	mov	r0, #0
   1491c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00014920 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   14920:	e58010f4 	str	r1, [r0, #244]	@ 0xf4
   14924:	e12fff1e 	bx	lr

00014928 <CLogger::RegisterPanicHandler(void (*)())>:
   14928:	e58010f8 	str	r1, [r0, #248]	@ 0xf8
   1492c:	e12fff1e 	bx	lr

00014930 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   14930:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14934:	e1a06003 	mov	r6, r3
   14938:	e1a04000 	mov	r4, r0
   1493c:	e24dd024 	sub	sp, sp, #36	@ 0x24
   14940:	e1a05002 	mov	r5, r2
   14944:	e1a0000d 	mov	r0, sp
   14948:	e1a07001 	mov	r7, r1
   1494c:	ebffd4e6 	bl	9cec <CString::CString()>
   14950:	e1a01006 	mov	r1, r6
   14954:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
   14958:	e1a0000d 	mov	r0, sp
   1495c:	ebffd765 	bl	a6f8 <CString::FormatV(char const*, std::__va_list)>
   14960:	e1a0000d 	mov	r0, sp
   14964:	ebffd518 	bl	9dcc <CString::operator char const*() const>
   14968:	e1a02005 	mov	r2, r5
   1496c:	e1a03000 	mov	r3, r0
   14970:	e1a01007 	mov	r1, r7
   14974:	e1a00004 	mov	r0, r4
   14978:	ebffff4c 	bl	146b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   1497c:	e5943000 	ldr	r3, [r4]
   14980:	e1550003 	cmp	r5, r3
   14984:	8a00002b 	bhi	14a38 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x108>
   14988:	e28d0010 	add	r0, sp, #16
   1498c:	ebffd4d6 	bl	9cec <CString::CString()>
   14990:	e3550000 	cmp	r5, #0
   14994:	0a00002b 	beq	14a48 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x118>
   14998:	e5940004 	ldr	r0, [r4, #4]
   1499c:	e3500000 	cmp	r0, #0
   149a0:	0a00000d 	beq	149dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   149a4:	ebffdc2e 	bl	ba64 <CTimer::GetTimeString()>
   149a8:	e2506000 	subs	r6, r0, #0
   149ac:	0a00000a 	beq	149dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   149b0:	ebffd505 	bl	9dcc <CString::operator char const*() const>
   149b4:	e1a01000 	mov	r1, r0
   149b8:	e28d0010 	add	r0, sp, #16
   149bc:	ebffd54a 	bl	9eec <CString::Append(char const*)>
   149c0:	e28d0010 	add	r0, sp, #16
   149c4:	e59f10e4 	ldr	r1, [pc, #228]	@ 14ab0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x180>
   149c8:	ebffd547 	bl	9eec <CString::Append(char const*)>
   149cc:	e5963000 	ldr	r3, [r6]
   149d0:	e1a00006 	mov	r0, r6
   149d4:	e5933004 	ldr	r3, [r3, #4]
   149d8:	e12fff33 	blx	r3
   149dc:	e1a01007 	mov	r1, r7
   149e0:	e28d0010 	add	r0, sp, #16
   149e4:	ebffd540 	bl	9eec <CString::Append(char const*)>
   149e8:	e59f10c4 	ldr	r1, [pc, #196]	@ 14ab4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x184>
   149ec:	e28d0010 	add	r0, sp, #16
   149f0:	ebffd53d 	bl	9eec <CString::Append(char const*)>
   149f4:	e1a0000d 	mov	r0, sp
   149f8:	ebffd4f3 	bl	9dcc <CString::operator char const*() const>
   149fc:	e1a01000 	mov	r1, r0
   14a00:	e28d0010 	add	r0, sp, #16
   14a04:	ebffd538 	bl	9eec <CString::Append(char const*)>
   14a08:	e3550000 	cmp	r5, #0
   14a0c:	0a000015 	beq	14a68 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
   14a10:	e59f10a0 	ldr	r1, [pc, #160]	@ 14ab8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   14a14:	e28d0010 	add	r0, sp, #16
   14a18:	ebffd533 	bl	9eec <CString::Append(char const*)>
   14a1c:	e28d0010 	add	r0, sp, #16
   14a20:	ebffd4e9 	bl	9dcc <CString::operator char const*() const>
   14a24:	e1a01000 	mov	r1, r0
   14a28:	e1a00004 	mov	r0, r4
   14a2c:	ebfffe7a 	bl	1441c <CLogger::Write(char const*)>
   14a30:	e28d0010 	add	r0, sp, #16
   14a34:	ebffd479 	bl	9c20 <CString::~CString()>
   14a38:	e1a0000d 	mov	r0, sp
   14a3c:	ebffd477 	bl	9c20 <CString::~CString()>
   14a40:	e28dd024 	add	sp, sp, #36	@ 0x24
   14a44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14a48:	e28d0010 	add	r0, sp, #16
   14a4c:	e307191c 	movw	r1, #31004	@ 0x791c
   14a50:	e3401001 	movt	r1, #1
   14a54:	ebffd4e2 	bl	9de4 <CString::operator=(char const*)>
   14a58:	e5940004 	ldr	r0, [r4, #4]
   14a5c:	e3500000 	cmp	r0, #0
   14a60:	1affffcf 	bne	149a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   14a64:	eaffffdc 	b	149dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   14a68:	e59f104c 	ldr	r1, [pc, #76]	@ 14abc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x18c>
   14a6c:	e28d0010 	add	r0, sp, #16
   14a70:	ebffd51d 	bl	9eec <CString::Append(char const*)>
   14a74:	e59f103c 	ldr	r1, [pc, #60]	@ 14ab8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   14a78:	e28d0010 	add	r0, sp, #16
   14a7c:	ebffd51a 	bl	9eec <CString::Append(char const*)>
   14a80:	e28d0010 	add	r0, sp, #16
   14a84:	ebffd4d0 	bl	9dcc <CString::operator char const*() const>
   14a88:	e1a01000 	mov	r1, r0
   14a8c:	e1a00004 	mov	r0, r4
   14a90:	ebfffe61 	bl	1441c <CLogger::Write(char const*)>
   14a94:	e59430f8 	ldr	r3, [r4, #248]	@ 0xf8
   14a98:	e3530000 	cmp	r3, #0
   14a9c:	0a000000 	beq	14aa4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
   14aa0:	e12fff33 	blx	r3
   14aa4:	e3a000ff 	mov	r0, #255	@ 0xff
   14aa8:	ebffda83 	bl	b4bc <set_qemu_exit_status>
   14aac:	ebffda83 	bl	b4c0 <halt>
   14ab0:	00017934 	.word	0x00017934
   14ab4:	00017924 	.word	0x00017924
   14ab8:	00017930 	.word	0x00017930
   14abc:	00017928 	.word	0x00017928

00014ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   14ac0:	e52d3004 	push	{r3}		@ (str r3, [sp, #-4]!)
   14ac4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   14ac8:	e24dd010 	sub	sp, sp, #16
   14acc:	e28dc018 	add	ip, sp, #24
   14ad0:	e59d3014 	ldr	r3, [sp, #20]
   14ad4:	e58dc000 	str	ip, [sp]
   14ad8:	e58dc00c 	str	ip, [sp, #12]
   14adc:	ebffff93 	bl	14930 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   14ae0:	e28dd010 	add	sp, sp, #16
   14ae4:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   14ae8:	e28dd004 	add	sp, sp, #4
   14aec:	e12fff1e 	bx	lr

00014af0 <CLogger::Initialize(CDevice*)>:
   14af0:	e92d4070 	push	{r4, r5, r6, lr}
   14af4:	e1a04000 	mov	r4, r0
   14af8:	e3a06001 	mov	r6, #1
   14afc:	e24dd030 	sub	sp, sp, #48	@ 0x30
   14b00:	e580100c 	str	r1, [r0, #12]
   14b04:	ebffd439 	bl	9bf0 <CMachineInfo::Get()>
   14b08:	ebffd33f 	bl	980c <CMachineInfo::GetRAMSize() const>
   14b0c:	e1a05000 	mov	r5, r0
   14b10:	e28d0010 	add	r0, sp, #16
   14b14:	ebffd474 	bl	9cec <CString::CString()>
   14b18:	e3550b01 	cmp	r5, #1024	@ 0x400
   14b1c:	31a02005 	movcc	r2, r5
   14b20:	21a02525 	lsrcs	r2, r5, #10
   14b24:	e28d0010 	add	r0, sp, #16
   14b28:	359f10b0 	ldrcc	r1, [pc, #176]	@ 14be0 <CLogger::Initialize(CDevice*)+0xf0>
   14b2c:	259f10b0 	ldrcs	r1, [pc, #176]	@ 14be4 <CLogger::Initialize(CDevice*)+0xf4>
   14b30:	ebffda52 	bl	b480 <CString::Format(char const*, ...)>
   14b34:	e59f10ac 	ldr	r1, [pc, #172]	@ 14be8 <CLogger::Initialize(CDevice*)+0xf8>
   14b38:	e28d0020 	add	r0, sp, #32
   14b3c:	ebffd470 	bl	9d04 <CString::CString(char const*)>
   14b40:	e59f10a4 	ldr	r1, [pc, #164]	@ 14bec <CLogger::Initialize(CDevice*)+0xfc>
   14b44:	e3a03002 	mov	r3, #2
   14b48:	e3a0200d 	mov	r2, #13
   14b4c:	e28d0020 	add	r0, sp, #32
   14b50:	e58d6000 	str	r6, [sp]
   14b54:	ebffda49 	bl	b480 <CString::Format(char const*, ...)>
   14b58:	ebffd424 	bl	9bf0 <CMachineInfo::Get()>
   14b5c:	ebffd31d 	bl	97d8 <CMachineInfo::GetMachineName() const>
   14b60:	e1a05000 	mov	r5, r0
   14b64:	e28d0010 	add	r0, sp, #16
   14b68:	ebffd497 	bl	9dcc <CString::operator char const*() const>
   14b6c:	e3073acc 	movw	r3, #31436	@ 0x7acc
   14b70:	e3403001 	movt	r3, #1
   14b74:	e58d3000 	str	r3, [sp]
   14b78:	e59f3070 	ldr	r3, [pc, #112]	@ 14bf0 <CLogger::Initialize(CDevice*)+0x100>
   14b7c:	e3a02003 	mov	r2, #3
   14b80:	e58d5004 	str	r5, [sp, #4]
   14b84:	e283101c 	add	r1, r3, #28
   14b88:	e58d0008 	str	r0, [sp, #8]
   14b8c:	e1a00004 	mov	r0, r4
   14b90:	ebffffca 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b94:	ebffd415 	bl	9bf0 <CMachineInfo::Get()>
   14b98:	ebffd323 	bl	982c <CMachineInfo::GetRevisionRaw() const>
   14b9c:	e1a05000 	mov	r5, r0
   14ba0:	e28d0020 	add	r0, sp, #32
   14ba4:	ebffd488 	bl	9dcc <CString::operator char const*() const>
   14ba8:	e59f3044 	ldr	r3, [pc, #68]	@ 14bf4 <CLogger::Initialize(CDevice*)+0x104>
   14bac:	e3a02004 	mov	r2, #4
   14bb0:	e58d0004 	str	r0, [sp, #4]
   14bb4:	e2431008 	sub	r1, r3, #8
   14bb8:	e1a00004 	mov	r0, r4
   14bbc:	e58d5000 	str	r5, [sp]
   14bc0:	ebffffbe 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bc4:	e28d0020 	add	r0, sp, #32
   14bc8:	ebffd414 	bl	9c20 <CString::~CString()>
   14bcc:	e28d0010 	add	r0, sp, #16
   14bd0:	ebffd412 	bl	9c20 <CString::~CString()>
   14bd4:	e1a00006 	mov	r0, r6
   14bd8:	e28dd030 	add	sp, sp, #48	@ 0x30
   14bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   14be0:	00017938 	.word	0x00017938
   14be4:	00017940 	.word	0x00017940
   14be8:	00017948 	.word	0x00017948
   14bec:	00017950 	.word	0x00017950
   14bf0:	00017960 	.word	0x00017960
   14bf4:	00017984 	.word	0x00017984

00014bf8 <CPtrList::CPtrList()>:
   14bf8:	e3a02000 	mov	r2, #0
   14bfc:	e5802000 	str	r2, [r0]
   14c00:	e12fff1e 	bx	lr

00014c04 <CPtrList::~CPtrList()>:
   14c04:	e5903000 	ldr	r3, [r0]
   14c08:	e3530000 	cmp	r3, #0
   14c0c:	012fff1e 	bxeq	lr
   14c10:	e3061690 	movw	r1, #26256	@ 0x6690
   14c14:	e3401001 	movt	r1, #1
   14c18:	e306069c 	movw	r0, #26268	@ 0x669c
   14c1c:	e3400001 	movt	r0, #1
   14c20:	e3a0202a 	mov	r2, #42	@ 0x2a
   14c24:	e92d4010 	push	{r4, lr}
   14c28:	ebfff542 	bl	12138 <assertion_failed>

00014c2c <CPtrList::GetFirst() const>:
   14c2c:	e5900000 	ldr	r0, [r0]
   14c30:	e12fff1e 	bx	lr

00014c34 <CPtrList::GetNext(TPtrListElement*) const>:
   14c34:	e3510000 	cmp	r1, #0
   14c38:	e92d4010 	push	{r4, lr}
   14c3c:	0a000006 	beq	14c5c <CPtrList::GetNext(TPtrListElement*) const+0x28>
   14c40:	e5912000 	ldr	r2, [r1]
   14c44:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14c48:	e345304c 	movt	r3, #20556	@ 0x504c
   14c4c:	e1520003 	cmp	r2, r3
   14c50:	1a000007 	bne	14c74 <CPtrList::GetNext(TPtrListElement*) const+0x40>
   14c54:	e5910008 	ldr	r0, [r1, #8]
   14c58:	e8bd8010 	pop	{r4, pc}
   14c5c:	e3061690 	movw	r1, #26256	@ 0x6690
   14c60:	e3401001 	movt	r1, #1
   14c64:	e30606ac 	movw	r0, #26284	@ 0x66ac
   14c68:	e3400001 	movt	r0, #1
   14c6c:	e3a02034 	mov	r2, #52	@ 0x34
   14c70:	ebfff530 	bl	12138 <assertion_failed>
   14c74:	e3061690 	movw	r1, #26256	@ 0x6690
   14c78:	e3401001 	movt	r1, #1
   14c7c:	e30606bc 	movw	r0, #26300	@ 0x66bc
   14c80:	e3400001 	movt	r0, #1
   14c84:	e3a02035 	mov	r2, #53	@ 0x35
   14c88:	ebfff52a 	bl	12138 <assertion_failed>

00014c8c <CPtrList::GetPtr(TPtrListElement*)>:
   14c8c:	e3500000 	cmp	r0, #0
   14c90:	e92d4010 	push	{r4, lr}
   14c94:	0a000006 	beq	14cb4 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   14c98:	e5902000 	ldr	r2, [r0]
   14c9c:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14ca0:	e345304c 	movt	r3, #20556	@ 0x504c
   14ca4:	e1520003 	cmp	r2, r3
   14ca8:	1a000007 	bne	14ccc <CPtrList::GetPtr(TPtrListElement*)+0x40>
   14cac:	e590000c 	ldr	r0, [r0, #12]
   14cb0:	e8bd8010 	pop	{r4, pc}
   14cb4:	e3061690 	movw	r1, #26256	@ 0x6690
   14cb8:	e3401001 	movt	r1, #1
   14cbc:	e30606ac 	movw	r0, #26284	@ 0x66ac
   14cc0:	e3400001 	movt	r0, #1
   14cc4:	e3a0203c 	mov	r2, #60	@ 0x3c
   14cc8:	ebfff51a 	bl	12138 <assertion_failed>
   14ccc:	e3061690 	movw	r1, #26256	@ 0x6690
   14cd0:	e3401001 	movt	r1, #1
   14cd4:	e30606bc 	movw	r0, #26300	@ 0x66bc
   14cd8:	e3400001 	movt	r0, #1
   14cdc:	e3a0203d 	mov	r2, #61	@ 0x3d
   14ce0:	ebfff514 	bl	12138 <assertion_failed>

00014ce4 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   14ce4:	e92d4070 	push	{r4, r5, r6, lr}
   14ce8:	e1a05000 	mov	r5, r0
   14cec:	e3a00010 	mov	r0, #16
   14cf0:	e1a06002 	mov	r6, r2
   14cf4:	e1a04001 	mov	r4, r1
   14cf8:	ebffe105 	bl	d114 <operator new(unsigned int)>
   14cfc:	e5952000 	ldr	r2, [r5]
   14d00:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14d04:	e345304c 	movt	r3, #20556	@ 0x504c
   14d08:	e3520000 	cmp	r2, #0
   14d0c:	e5803000 	str	r3, [r0]
   14d10:	e580600c 	str	r6, [r0, #12]
   14d14:	0a000016 	beq	14d74 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   14d18:	e3540000 	cmp	r4, #0
   14d1c:	0a00001a 	beq	14d8c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   14d20:	e5941000 	ldr	r1, [r4]
   14d24:	e1510003 	cmp	r1, r3
   14d28:	1a00001d 	bne	14da4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   14d2c:	e1520004 	cmp	r2, r4
   14d30:	0a000009 	beq	14d5c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   14d34:	e5943004 	ldr	r3, [r4, #4]
   14d38:	e9800018 	stmib	r0, {r3, r4}
   14d3c:	e3530000 	cmp	r3, #0
   14d40:	0a000003 	beq	14d54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   14d44:	e5932000 	ldr	r2, [r3]
   14d48:	e1520001 	cmp	r2, r1
   14d4c:	05830008 	streq	r0, [r3, #8]
   14d50:	1a000019 	bne	14dbc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   14d54:	e5840004 	str	r0, [r4, #4]
   14d58:	e8bd8070 	pop	{r4, r5, r6, pc}
   14d5c:	e3a03000 	mov	r3, #0
   14d60:	e5820004 	str	r0, [r2, #4]
   14d64:	e5803004 	str	r3, [r0, #4]
   14d68:	e5802008 	str	r2, [r0, #8]
   14d6c:	e5850000 	str	r0, [r5]
   14d70:	e8bd8070 	pop	{r4, r5, r6, pc}
   14d74:	e3061690 	movw	r1, #26256	@ 0x6690
   14d78:	e3401001 	movt	r1, #1
   14d7c:	e30606e0 	movw	r0, #26336	@ 0x66e0
   14d80:	e3400001 	movt	r0, #1
   14d84:	e3a0204c 	mov	r2, #76	@ 0x4c
   14d88:	ebfff4ea 	bl	12138 <assertion_failed>
   14d8c:	e3061690 	movw	r1, #26256	@ 0x6690
   14d90:	e3401001 	movt	r1, #1
   14d94:	e30606f0 	movw	r0, #26352	@ 0x66f0
   14d98:	e3400001 	movt	r0, #1
   14d9c:	e3a0204d 	mov	r2, #77	@ 0x4d
   14da0:	ebfff4e4 	bl	12138 <assertion_failed>
   14da4:	e3061690 	movw	r1, #26256	@ 0x6690
   14da8:	e3401001 	movt	r1, #1
   14dac:	e30606fc 	movw	r0, #26364	@ 0x66fc
   14db0:	e3400001 	movt	r0, #1
   14db4:	e3a0204e 	mov	r2, #78	@ 0x4e
   14db8:	ebfff4de 	bl	12138 <assertion_failed>
   14dbc:	e3061690 	movw	r1, #26256	@ 0x6690
   14dc0:	e3401001 	movt	r1, #1
   14dc4:	e3060720 	movw	r0, #26400	@ 0x6720
   14dc8:	e3400001 	movt	r0, #1
   14dcc:	e3a02060 	mov	r2, #96	@ 0x60
   14dd0:	ebfff4d8 	bl	12138 <assertion_failed>

00014dd4 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   14dd4:	e92d4070 	push	{r4, r5, r6, lr}
   14dd8:	e1a04001 	mov	r4, r1
   14ddc:	e1a05000 	mov	r5, r0
   14de0:	e3a00010 	mov	r0, #16
   14de4:	e1a06002 	mov	r6, r2
   14de8:	ebffe0c9 	bl	d114 <operator new(unsigned int)>
   14dec:	e3043d43 	movw	r3, #19779	@ 0x4d43
   14df0:	e345304c 	movt	r3, #20556	@ 0x504c
   14df4:	e3540000 	cmp	r4, #0
   14df8:	e5803000 	str	r3, [r0]
   14dfc:	e580600c 	str	r6, [r0, #12]
   14e00:	0a000010 	beq	14e48 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   14e04:	e5952000 	ldr	r2, [r5]
   14e08:	e3520000 	cmp	r2, #0
   14e0c:	0a000014 	beq	14e64 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   14e10:	e5942000 	ldr	r2, [r4]
   14e14:	e1520003 	cmp	r2, r3
   14e18:	1a000017 	bne	14e7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   14e1c:	e5943008 	ldr	r3, [r4, #8]
   14e20:	e5804004 	str	r4, [r0, #4]
   14e24:	e3530000 	cmp	r3, #0
   14e28:	e5803008 	str	r3, [r0, #8]
   14e2c:	0a000003 	beq	14e40 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   14e30:	e5931000 	ldr	r1, [r3]
   14e34:	e1510002 	cmp	r1, r2
   14e38:	05830004 	streq	r0, [r3, #4]
   14e3c:	1a000014 	bne	14e94 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   14e40:	e5840008 	str	r0, [r4, #8]
   14e44:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e48:	e5953000 	ldr	r3, [r5]
   14e4c:	e3530000 	cmp	r3, #0
   14e50:	1a000015 	bne	14eac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   14e54:	e5803004 	str	r3, [r0, #4]
   14e58:	e5803008 	str	r3, [r0, #8]
   14e5c:	e5850000 	str	r0, [r5]
   14e60:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e64:	e3061690 	movw	r1, #26256	@ 0x6690
   14e68:	e3401001 	movt	r1, #1
   14e6c:	e30606e0 	movw	r0, #26336	@ 0x66e0
   14e70:	e3400001 	movt	r0, #1
   14e74:	e3a0207d 	mov	r2, #125	@ 0x7d
   14e78:	ebfff4ae 	bl	12138 <assertion_failed>
   14e7c:	e3061690 	movw	r1, #26256	@ 0x6690
   14e80:	e3401001 	movt	r1, #1
   14e84:	e3060748 	movw	r0, #26440	@ 0x6748
   14e88:	e3400001 	movt	r0, #1
   14e8c:	e3a0207e 	mov	r2, #126	@ 0x7e
   14e90:	ebfff4a8 	bl	12138 <assertion_failed>
   14e94:	e3061690 	movw	r1, #26256	@ 0x6690
   14e98:	e3401001 	movt	r1, #1
   14e9c:	e306076c 	movw	r0, #26476	@ 0x676c
   14ea0:	e3400001 	movt	r0, #1
   14ea4:	e3a02085 	mov	r2, #133	@ 0x85
   14ea8:	ebfff4a2 	bl	12138 <assertion_failed>
   14eac:	e3061690 	movw	r1, #26256	@ 0x6690
   14eb0:	e3401001 	movt	r1, #1
   14eb4:	e306069c 	movw	r0, #26268	@ 0x669c
   14eb8:	e3400001 	movt	r0, #1
   14ebc:	e3a02074 	mov	r2, #116	@ 0x74
   14ec0:	ebfff49c 	bl	12138 <assertion_failed>

00014ec4 <CPtrList::Remove(TPtrListElement*)>:
   14ec4:	e1a03000 	mov	r3, r0
   14ec8:	e92d4010 	push	{r4, lr}
   14ecc:	e2510000 	subs	r0, r1, #0
   14ed0:	0a00002d 	beq	14f8c <CPtrList::Remove(TPtrListElement*)+0xc8>
   14ed4:	e5901000 	ldr	r1, [r0]
   14ed8:	e3042d43 	movw	r2, #19779	@ 0x4d43
   14edc:	e345204c 	movt	r2, #20556	@ 0x504c
   14ee0:	e1510002 	cmp	r1, r2
   14ee4:	1a00002e 	bne	14fa4 <CPtrList::Remove(TPtrListElement*)+0xe0>
   14ee8:	e5932000 	ldr	r2, [r3]
   14eec:	e1520000 	cmp	r2, r0
   14ef0:	0a000010 	beq	14f38 <CPtrList::Remove(TPtrListElement*)+0x74>
   14ef4:	e5903004 	ldr	r3, [r0, #4]
   14ef8:	e3530000 	cmp	r3, #0
   14efc:	0a00002e 	beq	14fbc <CPtrList::Remove(TPtrListElement*)+0xf8>
   14f00:	e593c000 	ldr	ip, [r3]
   14f04:	e15c0001 	cmp	ip, r1
   14f08:	1a000019 	bne	14f74 <CPtrList::Remove(TPtrListElement*)+0xb0>
   14f0c:	e5902008 	ldr	r2, [r0, #8]
   14f10:	e5832008 	str	r2, [r3, #8]
   14f14:	e3520000 	cmp	r2, #0
   14f18:	0a000003 	beq	14f2c <CPtrList::Remove(TPtrListElement*)+0x68>
   14f1c:	e5921000 	ldr	r1, [r2]
   14f20:	e151000c 	cmp	r1, ip
   14f24:	05823004 	streq	r3, [r2, #4]
   14f28:	1a000029 	bne	14fd4 <CPtrList::Remove(TPtrListElement*)+0x110>
   14f2c:	e8bd4010 	pop	{r4, lr}
   14f30:	e3a01010 	mov	r1, #16
   14f34:	eaffe08e 	b	d174 <operator delete(void*, unsigned int)>
   14f38:	e5922008 	ldr	r2, [r2, #8]
   14f3c:	e5832000 	str	r2, [r3]
   14f40:	e3520000 	cmp	r2, #0
   14f44:	0afffff8 	beq	14f2c <CPtrList::Remove(TPtrListElement*)+0x68>
   14f48:	e5923000 	ldr	r3, [r2]
   14f4c:	e1530001 	cmp	r3, r1
   14f50:	03a03000 	moveq	r3, #0
   14f54:	05823004 	streq	r3, [r2, #4]
   14f58:	0afffff3 	beq	14f2c <CPtrList::Remove(TPtrListElement*)+0x68>
   14f5c:	e3061690 	movw	r1, #26256	@ 0x6690
   14f60:	e3401001 	movt	r1, #1
   14f64:	e3060798 	movw	r0, #26520	@ 0x6798
   14f68:	e3400001 	movt	r0, #1
   14f6c:	e3a02098 	mov	r2, #152	@ 0x98
   14f70:	ebfff470 	bl	12138 <assertion_failed>
   14f74:	e3061690 	movw	r1, #26256	@ 0x6690
   14f78:	e3401001 	movt	r1, #1
   14f7c:	e30607dc 	movw	r0, #26588	@ 0x67dc
   14f80:	e3400001 	movt	r0, #1
   14f84:	e3a0209f 	mov	r2, #159	@ 0x9f
   14f88:	ebfff46a 	bl	12138 <assertion_failed>
   14f8c:	e3061690 	movw	r1, #26256	@ 0x6690
   14f90:	e3401001 	movt	r1, #1
   14f94:	e30606ac 	movw	r0, #26284	@ 0x66ac
   14f98:	e3400001 	movt	r0, #1
   14f9c:	e3a0208f 	mov	r2, #143	@ 0x8f
   14fa0:	ebfff464 	bl	12138 <assertion_failed>
   14fa4:	e3061690 	movw	r1, #26256	@ 0x6690
   14fa8:	e3401001 	movt	r1, #1
   14fac:	e30606bc 	movw	r0, #26300	@ 0x66bc
   14fb0:	e3400001 	movt	r0, #1
   14fb4:	e3a02090 	mov	r2, #144	@ 0x90
   14fb8:	ebfff45e 	bl	12138 <assertion_failed>
   14fbc:	e3061690 	movw	r1, #26256	@ 0x6690
   14fc0:	e3401001 	movt	r1, #1
   14fc4:	e30607c4 	movw	r0, #26564	@ 0x67c4
   14fc8:	e3400001 	movt	r0, #1
   14fcc:	e3a0209e 	mov	r2, #158	@ 0x9e
   14fd0:	ebfff458 	bl	12138 <assertion_failed>
   14fd4:	e3061690 	movw	r1, #26256	@ 0x6690
   14fd8:	e3401001 	movt	r1, #1
   14fdc:	e3060798 	movw	r0, #26520	@ 0x6798
   14fe0:	e3400001 	movt	r0, #1
   14fe4:	e3a020a4 	mov	r2, #164	@ 0xa4
   14fe8:	ebfff452 	bl	12138 <assertion_failed>

00014fec <CPtrList::Find(void*) const>:
   14fec:	e5900000 	ldr	r0, [r0]
   14ff0:	e3500000 	cmp	r0, #0
   14ff4:	012fff1e 	bxeq	lr
   14ff8:	e3042d43 	movw	r2, #19779	@ 0x4d43
   14ffc:	e345204c 	movt	r2, #20556	@ 0x504c
   15000:	ea000005 	b	1501c <CPtrList::Find(void*) const+0x30>
   15004:	e590300c 	ldr	r3, [r0, #12]
   15008:	e1530001 	cmp	r3, r1
   1500c:	012fff1e 	bxeq	lr
   15010:	e5900008 	ldr	r0, [r0, #8]
   15014:	e3500000 	cmp	r0, #0
   15018:	012fff1e 	bxeq	lr
   1501c:	e5903000 	ldr	r3, [r0]
   15020:	e1530002 	cmp	r3, r2
   15024:	0afffff6 	beq	15004 <CPtrList::Find(void*) const+0x18>
   15028:	e3061690 	movw	r1, #26256	@ 0x6690
   1502c:	e3401001 	movt	r1, #1
   15030:	e30606bc 	movw	r0, #26300	@ 0x66bc
   15034:	e3400001 	movt	r0, #1
   15038:	e3a020b3 	mov	r2, #179	@ 0xb3
   1503c:	e92d4010 	push	{r4, lr}
   15040:	ebfff43c 	bl	12138 <assertion_failed>

00015044 <CPageAllocator::CPageAllocator()>:
   15044:	e3a02000 	mov	r2, #0
   15048:	e3a01001 	mov	r1, #1
   1504c:	e5802000 	str	r2, [r0]
   15050:	e5802004 	str	r2, [r0, #4]
   15054:	e5802008 	str	r2, [r0, #8]
   15058:	e580100c 	str	r1, [r0, #12]
   1505c:	e12fff1e 	bx	lr

00015060 <CPageAllocator::~CPageAllocator()>:
   15060:	e12fff1e 	bx	lr

00015064 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   15064:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   15068:	e28db000 	add	fp, sp, #0
   1506c:	e24dd014 	sub	sp, sp, #20
   15070:	e50b0008 	str	r0, [fp, #-8]
   15074:	e50b100c 	str	r1, [fp, #-12]
   15078:	e50b2010 	str	r2, [fp, #-16]
   1507c:	e51b300c 	ldr	r3, [fp, #-12]
   15080:	e2833eff 	add	r3, r3, #4080	@ 0xff0
   15084:	e283300f 	add	r3, r3, #15
   15088:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   1508c:	e3c3300f 	bic	r3, r3, #15
   15090:	e1a02003 	mov	r2, r3
   15094:	e51b3008 	ldr	r3, [fp, #-8]
   15098:	e5832000 	str	r2, [r3]
   1509c:	e51b200c 	ldr	r2, [fp, #-12]
   150a0:	e51b3010 	ldr	r3, [fp, #-16]
   150a4:	e0823003 	add	r3, r2, r3
   150a8:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   150ac:	e3c3300f 	bic	r3, r3, #15
   150b0:	e1a02003 	mov	r2, r3
   150b4:	e51b3008 	ldr	r3, [fp, #-8]
   150b8:	e5832004 	str	r2, [r3, #4]
   150bc:	e320f000 	nop	{0}
   150c0:	e28bd000 	add	sp, fp, #0
   150c4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   150c8:	e12fff1e 	bx	lr

000150cc <CPageAllocator::GetFreeSpace() const>:
   150cc:	e8900005 	ldm	r0, {r0, r2}
   150d0:	e0420000 	sub	r0, r2, r0
   150d4:	e12fff1e 	bx	lr

000150d8 <CPageAllocator::Allocate()>:
   150d8:	e5903000 	ldr	r3, [r0]
   150dc:	e92d4070 	push	{r4, r5, r6, lr}
   150e0:	e3530000 	cmp	r3, #0
   150e4:	0a000024 	beq	1517c <CPageAllocator::Allocate()+0xa4>
   150e8:	e1a04000 	mov	r4, r0
   150ec:	e590000c 	ldr	r0, [r0, #12]
   150f0:	e3500000 	cmp	r0, #0
   150f4:	1a000010 	bne	1513c <CPageAllocator::Allocate()+0x64>
   150f8:	e5945008 	ldr	r5, [r4, #8]
   150fc:	e3550000 	cmp	r5, #0
   15100:	0a000011 	beq	1514c <CPageAllocator::Allocate()+0x74>
   15104:	e5952000 	ldr	r2, [r5]
   15108:	e3043d43 	movw	r3, #19779	@ 0x4d43
   1510c:	e3453047 	movt	r3, #20551	@ 0x5047
   15110:	e1520003 	cmp	r2, r3
   15114:	1a00001d 	bne	15190 <CPageAllocator::Allocate()+0xb8>
   15118:	e594000c 	ldr	r0, [r4, #12]
   1511c:	e3a03000 	mov	r3, #0
   15120:	e5952004 	ldr	r2, [r5, #4]
   15124:	e5842008 	str	r2, [r4, #8]
   15128:	e3500000 	cmp	r0, #0
   1512c:	e5853000 	str	r3, [r5]
   15130:	1a00000e 	bne	15170 <CPageAllocator::Allocate()+0x98>
   15134:	e1a00005 	mov	r0, r5
   15138:	e8bd8070 	pop	{r4, r5, r6, pc}
   1513c:	ebffee9f 	bl	10bc0 <EnterCritical>
   15140:	e5945008 	ldr	r5, [r4, #8]
   15144:	e3550000 	cmp	r5, #0
   15148:	1affffed 	bne	15104 <CPageAllocator::Allocate()+0x2c>
   1514c:	e5942000 	ldr	r2, [r4]
   15150:	e5941004 	ldr	r1, [r4, #4]
   15154:	e2823a01 	add	r3, r2, #4096	@ 0x1000
   15158:	e594000c 	ldr	r0, [r4, #12]
   1515c:	e1530001 	cmp	r3, r1
   15160:	e5843000 	str	r3, [r4]
   15164:	91a05002 	movls	r5, r2
   15168:	e3500000 	cmp	r0, #0
   1516c:	0afffff0 	beq	15134 <CPageAllocator::Allocate()+0x5c>
   15170:	ebffeebd 	bl	10c6c <LeaveCritical>
   15174:	e1a00005 	mov	r0, r5
   15178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1517c:	e30719b0 	movw	r1, #31152	@ 0x79b0
   15180:	e3401001 	movt	r1, #1
   15184:	e3a02036 	mov	r2, #54	@ 0x36
   15188:	e2810014 	add	r0, r1, #20
   1518c:	ebfff3e9 	bl	12138 <assertion_failed>
   15190:	e30719b0 	movw	r1, #31152	@ 0x79b0
   15194:	e3401001 	movt	r1, #1
   15198:	e3a02044 	mov	r2, #68	@ 0x44
   1519c:	e2810024 	add	r0, r1, #36	@ 0x24
   151a0:	ebfff3e4 	bl	12138 <assertion_failed>

000151a4 <CPageAllocator::Free(void*)>:
   151a4:	e92d4070 	push	{r4, r5, r6, lr}
   151a8:	e2514000 	subs	r4, r1, #0
   151ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   151b0:	e1a05000 	mov	r5, r0
   151b4:	e590000c 	ldr	r0, [r0, #12]
   151b8:	e3500000 	cmp	r0, #0
   151bc:	1a000006 	bne	151dc <CPageAllocator::Free(void*)+0x38>
   151c0:	e5952008 	ldr	r2, [r5, #8]
   151c4:	e3043d43 	movw	r3, #19779	@ 0x4d43
   151c8:	e3453047 	movt	r3, #20551	@ 0x5047
   151cc:	e5842004 	str	r2, [r4, #4]
   151d0:	e5843000 	str	r3, [r4]
   151d4:	e5854008 	str	r4, [r5, #8]
   151d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   151dc:	ebffee77 	bl	10bc0 <EnterCritical>
   151e0:	e595200c 	ldr	r2, [r5, #12]
   151e4:	e5951008 	ldr	r1, [r5, #8]
   151e8:	e3043d43 	movw	r3, #19779	@ 0x4d43
   151ec:	e3453047 	movt	r3, #20551	@ 0x5047
   151f0:	e3520000 	cmp	r2, #0
   151f4:	e5841004 	str	r1, [r4, #4]
   151f8:	e5843000 	str	r3, [r4]
   151fc:	e5854008 	str	r4, [r5, #8]
   15200:	08bd8070 	popeq	{r4, r5, r6, pc}
   15204:	e8bd4070 	pop	{r4, r5, r6, lr}
   15208:	eaffee97 	b	10c6c <LeaveCritical>

0001520c <UndefinedInstructionInternal>:
   1520c:	e24dd004 	sub	sp, sp, #4
   15210:	e24ee004 	sub	lr, lr, #4
   15214:	e92d4000 	stmfd	sp!, {lr}
   15218:	e14fe000 	mrs	lr, SPSR
   1521c:	e92d4000 	stmfd	sp!, {lr}
   15220:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   15224:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   15228:	e1a0100d 	mov	r1, sp
   1522c:	f1020012 	cps	#18
   15230:	e1a0200d 	mov	r2, sp
   15234:	e1a0300e 	mov	r3, lr
   15238:	f1020011 	cps	#17
   1523c:	e1a0400d 	mov	r4, sp
   15240:	e1a0500e 	mov	r5, lr
   15244:	f102001f 	cps	#31
   15248:	e1a0d001 	mov	sp, r1
   1524c:	e92d003c 	push	{r2, r3, r4, r5}
   15250:	e1a0100d 	mov	r1, sp
   15254:	e3a00001 	mov	r0, #1
   15258:	ea000244 	b	15b70 <ExceptionHandler>

0001525c <PrefetchAbortStub>:
   1525c:	e24dd004 	sub	sp, sp, #4
   15260:	e24ee004 	sub	lr, lr, #4
   15264:	e92d4000 	stmfd	sp!, {lr}
   15268:	e14fe000 	mrs	lr, SPSR
   1526c:	e92d4000 	stmfd	sp!, {lr}
   15270:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   15274:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   15278:	e1a0100d 	mov	r1, sp
   1527c:	f1020012 	cps	#18
   15280:	e1a0200d 	mov	r2, sp
   15284:	e1a0300e 	mov	r3, lr
   15288:	f1020011 	cps	#17
   1528c:	e1a0400d 	mov	r4, sp
   15290:	e1a0500e 	mov	r5, lr
   15294:	f102001f 	cps	#31
   15298:	e1a0d001 	mov	sp, r1
   1529c:	e92d003c 	push	{r2, r3, r4, r5}
   152a0:	e1a0100d 	mov	r1, sp
   152a4:	e3a00002 	mov	r0, #2
   152a8:	ea000230 	b	15b70 <ExceptionHandler>

000152ac <DataAbortStub>:
   152ac:	e24dd004 	sub	sp, sp, #4
   152b0:	e24ee008 	sub	lr, lr, #8
   152b4:	e92d4000 	stmfd	sp!, {lr}
   152b8:	e14fe000 	mrs	lr, SPSR
   152bc:	e92d4000 	stmfd	sp!, {lr}
   152c0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   152c4:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   152c8:	e1a0100d 	mov	r1, sp
   152cc:	f1020012 	cps	#18
   152d0:	e1a0200d 	mov	r2, sp
   152d4:	e1a0300e 	mov	r3, lr
   152d8:	f1020011 	cps	#17
   152dc:	e1a0400d 	mov	r4, sp
   152e0:	e1a0500e 	mov	r5, lr
   152e4:	f102001f 	cps	#31
   152e8:	e1a0d001 	mov	sp, r1
   152ec:	e92d003c 	push	{r2, r3, r4, r5}
   152f0:	e1a0100d 	mov	r1, sp
   152f4:	e3a00003 	mov	r0, #3
   152f8:	ea00021c 	b	15b70 <ExceptionHandler>

000152fc <UndefinedInstructionStub>:
   152fc:	e92d4001 	push	{r0, lr}
   15300:	eef80a10 	vmrs	r0, fpexc
   15304:	e3100102 	tst	r0, #-2147483648	@ 0x80000000
   15308:	0affffbf 	beq	1520c <UndefinedInstructionInternal>
   1530c:	e3c00102 	bic	r0, r0, #-2147483648	@ 0x80000000
   15310:	eee80a10 	vmsr	fpexc, r0
   15314:	e8fd8001 	ldm	sp!, {r0, pc}^

00015318 <IRQStub>:
   15318:	e24ee004 	sub	lr, lr, #4
   1531c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   15320:	e24dd004 	sub	sp, sp, #4
   15324:	eef10a10 	vmrs	r0, fpscr
   15328:	e92d0001 	stmfd	sp!, {r0}
   1532c:	ed2d0b20 	vpush	{d0-d15}
   15330:	ed6d0b20 	vpush	{d16-d31}
   15334:	e59f008c 	ldr	r0, [pc, #140]	@ 153c8 <FIQStub+0x70>
   15338:	e580e000 	str	lr, [r0]
   1533c:	ebfff02e 	bl	113fc <InterruptHandler>
   15340:	ecfd0b20 	vpop	{d16-d31}
   15344:	ecbd0b20 	vpop	{d0-d15}
   15348:	e8bd0001 	ldmfd	sp!, {r0}
   1534c:	eee10a10 	vmsr	fpscr, r0
   15350:	e28dd004 	add	sp, sp, #4
   15354:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00015358 <FIQStub>:
   15358:	e24ee004 	sub	lr, lr, #4
   1535c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   15360:	e24dd004 	sub	sp, sp, #4
   15364:	eef10a10 	vmrs	r0, fpscr
   15368:	e92d0001 	stmfd	sp!, {r0}
   1536c:	ed2d0b20 	vpush	{d0-d15}
   15370:	ed6d0b20 	vpush	{d16-d31}
   15374:	e59f2050 	ldr	r2, [pc, #80]	@ 153cc <FIQStub+0x74>
   15378:	e5921000 	ldr	r1, [r2]
   1537c:	e3510000 	cmp	r1, #0
   15380:	0a000007 	beq	153a4 <FIQStub+0x4c>
   15384:	e5920004 	ldr	r0, [r2, #4]
   15388:	e12fff31 	blx	r1
   1538c:	ecfd0b20 	vpop	{d16-d31}
   15390:	ecbd0b20 	vpop	{d0-d15}
   15394:	e8bd0001 	ldmfd	sp!, {r0}
   15398:	eee10a10 	vmsr	fpscr, r0
   1539c:	e28dd004 	add	sp, sp, #4
   153a0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   153a4:	e59f1024 	ldr	r1, [pc, #36]	@ 153d0 <FIQStub+0x78>
   153a8:	e3a00000 	mov	r0, #0
   153ac:	e5810000 	str	r0, [r1]
   153b0:	ecfd0b20 	vpop	{d16-d31}
   153b4:	ecbd0b20 	vpop	{d0-d15}
   153b8:	e8bd0001 	ldmfd	sp!, {r0}
   153bc:	eee10a10 	vmsr	fpscr, r0
   153c0:	e28dd004 	add	sp, sp, #4
   153c4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   153c8:	00017a88 	.word	0x00017a88
   153cc:	00017a7c 	.word	0x00017a7c
   153d0:	3f00b20c 	.word	0x3f00b20c

000153d4 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   153d4:	e1a03000 	mov	r3, r0
   153d8:	e280c0dc 	add	ip, r0, #220	@ 0xdc
   153dc:	e3a02000 	mov	r2, #0
   153e0:	e5801000 	str	r1, [r0]
   153e4:	e5e32004 	strb	r2, [r3, #4]!
   153e8:	e5a32004 	str	r2, [r3, #4]!
   153ec:	e153000c 	cmp	r3, ip
   153f0:	1afffffc 	bne	153e8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   153f4:	e12fff1e 	bx	lr

000153f8 <CGPIOManager::~CGPIOManager()>:
   153f8:	e92d4010 	push	{r4, lr}
   153fc:	e2803004 	add	r3, r0, #4
   15400:	e1a04000 	mov	r4, r0
   15404:	e28010dc 	add	r1, r0, #220	@ 0xdc
   15408:	ea000001 	b	15414 <CGPIOManager::~CGPIOManager()+0x1c>
   1540c:	e1530001 	cmp	r3, r1
   15410:	0a000008 	beq	15438 <CGPIOManager::~CGPIOManager()+0x40>
   15414:	e5b32004 	ldr	r2, [r3, #4]!
   15418:	e3520000 	cmp	r2, #0
   1541c:	0afffffa 	beq	1540c <CGPIOManager::~CGPIOManager()+0x14>
   15420:	e3061808 	movw	r1, #26632	@ 0x6808
   15424:	e3401001 	movt	r1, #1
   15428:	e3060818 	movw	r0, #26648	@ 0x6818
   1542c:	e3400001 	movt	r0, #1
   15430:	e3a0202c 	mov	r2, #44	@ 0x2c
   15434:	ebfff33f 	bl	12138 <assertion_failed>
   15438:	e5d43004 	ldrb	r3, [r4, #4]
   1543c:	e3530000 	cmp	r3, #0
   15440:	0a000004 	beq	15458 <CGPIOManager::~CGPIOManager()+0x60>
   15444:	e5940000 	ldr	r0, [r4]
   15448:	e3500000 	cmp	r0, #0
   1544c:	0a000003 	beq	15460 <CGPIOManager::~CGPIOManager()+0x68>
   15450:	e3a01034 	mov	r1, #52	@ 0x34
   15454:	ebffef40 	bl	1115c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   15458:	e1a00004 	mov	r0, r4
   1545c:	e8bd8010 	pop	{r4, pc}
   15460:	e3061808 	movw	r1, #26632	@ 0x6808
   15464:	e3401001 	movt	r1, #1
   15468:	e306082c 	movw	r0, #26668	@ 0x682c
   1546c:	e3400001 	movt	r0, #1
   15470:	e3a02032 	mov	r2, #50	@ 0x32
   15474:	ebfff32f 	bl	12138 <assertion_failed>

00015478 <CGPIOManager::Initialize()>:
   15478:	e5d03004 	ldrb	r3, [r0, #4]
   1547c:	e92d4010 	push	{r4, lr}
   15480:	e3530000 	cmp	r3, #0
   15484:	1a00000b 	bne	154b8 <CGPIOManager::Initialize()+0x40>
   15488:	e1a04000 	mov	r4, r0
   1548c:	e5900000 	ldr	r0, [r0]
   15490:	e3500000 	cmp	r0, #0
   15494:	0a00000d 	beq	154d0 <CGPIOManager::Initialize()+0x58>
   15498:	e1a03004 	mov	r3, r4
   1549c:	e3a01034 	mov	r1, #52	@ 0x34
   154a0:	e30526f8 	movw	r2, #22264	@ 0x56f8
   154a4:	e3402001 	movt	r2, #1
   154a8:	ebffeee4 	bl	11040 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   154ac:	e3a00001 	mov	r0, #1
   154b0:	e5c40004 	strb	r0, [r4, #4]
   154b4:	e8bd8010 	pop	{r4, pc}
   154b8:	e3061808 	movw	r1, #26632	@ 0x6808
   154bc:	e3401001 	movt	r1, #1
   154c0:	e3060840 	movw	r0, #26688	@ 0x6840
   154c4:	e3400001 	movt	r0, #1
   154c8:	e3a0203b 	mov	r2, #59	@ 0x3b
   154cc:	ebfff319 	bl	12138 <assertion_failed>
   154d0:	e3061808 	movw	r1, #26632	@ 0x6808
   154d4:	e3401001 	movt	r1, #1
   154d8:	e306082c 	movw	r0, #26668	@ 0x682c
   154dc:	e3400001 	movt	r0, #1
   154e0:	e3a0203c 	mov	r2, #60	@ 0x3c
   154e4:	ebfff313 	bl	12138 <assertion_failed>

000154e8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   154e8:	e5d03004 	ldrb	r3, [r0, #4]
   154ec:	e92d4010 	push	{r4, lr}
   154f0:	e3530000 	cmp	r3, #0
   154f4:	0a00000a 	beq	15524 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   154f8:	e3510000 	cmp	r1, #0
   154fc:	0a00000e 	beq	1553c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   15500:	e5913004 	ldr	r3, [r1, #4]
   15504:	e3530035 	cmp	r3, #53	@ 0x35
   15508:	8a000011 	bhi	15554 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   1550c:	e0800103 	add	r0, r0, r3, lsl #2
   15510:	e5903008 	ldr	r3, [r0, #8]
   15514:	e3530000 	cmp	r3, #0
   15518:	1a000013 	bne	1556c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   1551c:	e5801008 	str	r1, [r0, #8]
   15520:	e8bd8010 	pop	{r4, pc}
   15524:	e3061808 	movw	r1, #26632	@ 0x6808
   15528:	e3401001 	movt	r1, #1
   1552c:	e3060854 	movw	r0, #26708	@ 0x6854
   15530:	e3400001 	movt	r0, #1
   15534:	e3a02045 	mov	r2, #69	@ 0x45
   15538:	ebfff2fe 	bl	12138 <assertion_failed>
   1553c:	e3061808 	movw	r1, #26632	@ 0x6808
   15540:	e3401001 	movt	r1, #1
   15544:	e3060864 	movw	r0, #26724	@ 0x6864
   15548:	e3400001 	movt	r0, #1
   1554c:	e3a02047 	mov	r2, #71	@ 0x47
   15550:	ebfff2f8 	bl	12138 <assertion_failed>
   15554:	e3061808 	movw	r1, #26632	@ 0x6808
   15558:	e3401001 	movt	r1, #1
   1555c:	e3060870 	movw	r0, #26736	@ 0x6870
   15560:	e3400001 	movt	r0, #1
   15564:	e3a02049 	mov	r2, #73	@ 0x49
   15568:	ebfff2f2 	bl	12138 <assertion_failed>
   1556c:	e3061808 	movw	r1, #26632	@ 0x6808
   15570:	e3401001 	movt	r1, #1
   15574:	e3060818 	movw	r0, #26648	@ 0x6818
   15578:	e3400001 	movt	r0, #1
   1557c:	e3a0204b 	mov	r2, #75	@ 0x4b
   15580:	ebfff2ec 	bl	12138 <assertion_failed>

00015584 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   15584:	e5d03004 	ldrb	r3, [r0, #4]
   15588:	e92d4010 	push	{r4, lr}
   1558c:	e3530000 	cmp	r3, #0
   15590:	0a00000b 	beq	155c4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   15594:	e3510000 	cmp	r1, #0
   15598:	0a00000f 	beq	155dc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   1559c:	e5913004 	ldr	r3, [r1, #4]
   155a0:	e3530035 	cmp	r3, #53	@ 0x35
   155a4:	8a000012 	bhi	155f4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   155a8:	e0800103 	add	r0, r0, r3, lsl #2
   155ac:	e5903008 	ldr	r3, [r0, #8]
   155b0:	e3530000 	cmp	r3, #0
   155b4:	0a000014 	beq	1560c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   155b8:	e3a03000 	mov	r3, #0
   155bc:	e5803008 	str	r3, [r0, #8]
   155c0:	e8bd8010 	pop	{r4, pc}
   155c4:	e3061808 	movw	r1, #26632	@ 0x6808
   155c8:	e3401001 	movt	r1, #1
   155cc:	e3060854 	movw	r0, #26708	@ 0x6854
   155d0:	e3400001 	movt	r0, #1
   155d4:	e3a02052 	mov	r2, #82	@ 0x52
   155d8:	ebfff2d6 	bl	12138 <assertion_failed>
   155dc:	e3061808 	movw	r1, #26632	@ 0x6808
   155e0:	e3401001 	movt	r1, #1
   155e4:	e3060864 	movw	r0, #26724	@ 0x6864
   155e8:	e3400001 	movt	r0, #1
   155ec:	e3a02054 	mov	r2, #84	@ 0x54
   155f0:	ebfff2d0 	bl	12138 <assertion_failed>
   155f4:	e3061808 	movw	r1, #26632	@ 0x6808
   155f8:	e3401001 	movt	r1, #1
   155fc:	e3060870 	movw	r0, #26736	@ 0x6870
   15600:	e3400001 	movt	r0, #1
   15604:	e3a02056 	mov	r2, #86	@ 0x56
   15608:	ebfff2ca 	bl	12138 <assertion_failed>
   1560c:	e3061808 	movw	r1, #26632	@ 0x6808
   15610:	e3401001 	movt	r1, #1
   15614:	e3060884 	movw	r0, #26756	@ 0x6884
   15618:	e3400001 	movt	r0, #1
   1561c:	e3a02058 	mov	r2, #88	@ 0x58
   15620:	ebfff2c4 	bl	12138 <assertion_failed>

00015624 <CGPIOManager::InterruptHandler()>:
   15624:	e5d03004 	ldrb	r3, [r0, #4]
   15628:	e92d4070 	push	{r4, r5, r6, lr}
   1562c:	e3530000 	cmp	r3, #0
   15630:	0a00002a 	beq	156e0 <CGPIOManager::InterruptHandler()+0xbc>
   15634:	e3a03000 	mov	r3, #0
   15638:	e3433f20 	movt	r3, #16160	@ 0x3f20
   1563c:	e3a04000 	mov	r4, #0
   15640:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   15644:	ea000005 	b	15660 <CGPIOManager::InterruptHandler()+0x3c>
   15648:	e2844001 	add	r4, r4, #1
   1564c:	e1a030a3 	lsr	r3, r3, #1
   15650:	e314001f 	tst	r4, #31
   15654:	0a000011 	beq	156a0 <CGPIOManager::InterruptHandler()+0x7c>
   15658:	e3540036 	cmp	r4, #54	@ 0x36
   1565c:	08bd8070 	popeq	{r4, r5, r6, pc}
   15660:	e3130001 	tst	r3, #1
   15664:	0afffff7 	beq	15648 <CGPIOManager::InterruptHandler()+0x24>
   15668:	e2843002 	add	r3, r4, #2
   1566c:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   15670:	e3550000 	cmp	r5, #0
   15674:	0a00000e 	beq	156b4 <CGPIOManager::InterruptHandler()+0x90>
   15678:	e1a00005 	mov	r0, r5
   1567c:	ebfff266 	bl	1201c <CGPIOPin::InterruptHandler()>
   15680:	e5d53024 	ldrb	r3, [r5, #36]	@ 0x24
   15684:	e3530000 	cmp	r3, #0
   15688:	13a03040 	movne	r3, #64	@ 0x40
   1568c:	13433f20 	movtne	r3, #16160	@ 0x3f20
   15690:	15952008 	ldrne	r2, [r5, #8]
   15694:	1595100c 	ldrne	r1, [r5, #12]
   15698:	17821003 	strne	r1, [r2, r3]
   1569c:	e8bd8070 	pop	{r4, r5, r6, pc}
   156a0:	e3a03000 	mov	r3, #0
   156a4:	e3433f20 	movt	r3, #16160	@ 0x3f20
   156a8:	e3a04020 	mov	r4, #32
   156ac:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   156b0:	eaffffea 	b	15660 <CGPIOManager::InterruptHandler()+0x3c>
   156b4:	e1a00004 	mov	r0, r4
   156b8:	ebfff276 	bl	12098 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   156bc:	e3a03010 	mov	r3, #16
   156c0:	e3403fc8 	movt	r3, #4040	@ 0xfc8
   156c4:	e204101f 	and	r1, r4, #31
   156c8:	e08332a4 	add	r3, r3, r4, lsr #5
   156cc:	e3a02001 	mov	r2, #1
   156d0:	e1a03103 	lsl	r3, r3, #2
   156d4:	e1a02112 	lsl	r2, r2, r1
   156d8:	e5832000 	str	r2, [r3]
   156dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   156e0:	e3061808 	movw	r1, #26632	@ 0x6808
   156e4:	e3401001 	movt	r1, #1
   156e8:	e3060854 	movw	r0, #26708	@ 0x6854
   156ec:	e3400001 	movt	r0, #1
   156f0:	e3a0205e 	mov	r2, #94	@ 0x5e
   156f4:	ebfff28f 	bl	12138 <assertion_failed>

000156f8 <CGPIOManager::InterruptStub(void*)>:
   156f8:	e3500000 	cmp	r0, #0
   156fc:	0a000000 	beq	15704 <CGPIOManager::InterruptStub(void*)+0xc>
   15700:	eaffffc7 	b	15624 <CGPIOManager::InterruptHandler()>
   15704:	e3061808 	movw	r1, #26632	@ 0x6808
   15708:	e3401001 	movt	r1, #1
   1570c:	e3060898 	movw	r0, #26776	@ 0x6898
   15710:	e3400001 	movt	r0, #1
   15714:	e3a0208e 	mov	r2, #142	@ 0x8e
   15718:	e92d4010 	push	{r4, lr}
   1571c:	ebfff285 	bl	12138 <assertion_failed>

00015720 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   15720:	e5801000 	str	r1, [r0]
   15724:	e5c02004 	strb	r2, [r0, #4]
   15728:	e12fff1e 	bx	lr

0001572c <CBcmMailBox::~CBcmMailBox()>:
   1572c:	e12fff1e 	bx	lr

00015730 <CBcmMailBox::WriteRead(unsigned int)>:
   15730:	e92d4070 	push	{r4, r5, r6, lr}
   15734:	e1a05000 	mov	r5, r0
   15738:	e5d03004 	ldrb	r3, [r0, #4]
   1573c:	e24dd008 	sub	sp, sp, #8
   15740:	e1a06001 	mov	r6, r1
   15744:	e3530000 	cmp	r3, #0
   15748:	1a000004 	bne	15760 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   1574c:	e3073b5c 	movw	r3, #31580	@ 0x7b5c
   15750:	e3403001 	movt	r3, #1
   15754:	e5930000 	ldr	r0, [r3]
   15758:	e3500000 	cmp	r0, #0
   1575c:	1a000029 	bne	15808 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   15760:	e3a04a0b 	mov	r4, #45056	@ 0xb000
   15764:	e3434f00 	movt	r4, #16128	@ 0x3f00
   15768:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   1576c:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   15770:	1a000005 	bne	1578c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   15774:	e3a00014 	mov	r0, #20
   15778:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   1577c:	ebffdad1 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
   15780:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   15784:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   15788:	0afffff9 	beq	15774 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   1578c:	e3a00a0b 	mov	r0, #45056	@ 0xb000
   15790:	e3430f00 	movt	r0, #16128	@ 0x3f00
   15794:	e59038b8 	ldr	r3, [r0, #2232]	@ 0x8b8
   15798:	e3530000 	cmp	r3, #0
   1579c:	bafffffc 	blt	15794 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   157a0:	e316000f 	tst	r6, #15
   157a4:	1a00001e 	bne	15824 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   157a8:	e5953000 	ldr	r3, [r5]
   157ac:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   157b0:	e3432f00 	movt	r2, #16128	@ 0x3f00
   157b4:	e1866003 	orr	r6, r6, r3
   157b8:	e58068a0 	str	r6, [r0, #2208]	@ 0x8a0
   157bc:	e5950000 	ldr	r0, [r5]
   157c0:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   157c4:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   157c8:	1afffffc 	bne	157c0 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   157cc:	e5923880 	ldr	r3, [r2, #2176]	@ 0x880
   157d0:	e203100f 	and	r1, r3, #15
   157d4:	e1510000 	cmp	r1, r0
   157d8:	1afffff8 	bne	157c0 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   157dc:	e5d52004 	ldrb	r2, [r5, #4]
   157e0:	e3c3000f 	bic	r0, r3, #15
   157e4:	e3520000 	cmp	r2, #0
   157e8:	1a000004 	bne	15800 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   157ec:	e3073b5c 	movw	r3, #31580	@ 0x7b5c
   157f0:	e3403001 	movt	r3, #1
   157f4:	e5933000 	ldr	r3, [r3]
   157f8:	e3530000 	cmp	r3, #0
   157fc:	1a000003 	bne	15810 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   15800:	e28dd008 	add	sp, sp, #8
   15804:	e8bd8070 	pop	{r4, r5, r6, pc}
   15808:	ebffecec 	bl	10bc0 <EnterCritical>
   1580c:	eaffffd3 	b	15760 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   15810:	e58d0004 	str	r0, [sp, #4]
   15814:	ebffed14 	bl	10c6c <LeaveCritical>
   15818:	e59d0004 	ldr	r0, [sp, #4]
   1581c:	e28dd008 	add	sp, sp, #8
   15820:	e8bd8070 	pop	{r4, r5, r6, pc}
   15824:	e30618a4 	movw	r1, #26788	@ 0x68a4
   15828:	e3401001 	movt	r1, #1
   1582c:	e30608b4 	movw	r0, #26804	@ 0x68b4
   15830:	e3400001 	movt	r0, #1
   15834:	e3a02062 	mov	r2, #98	@ 0x62
   15838:	ebfff23e 	bl	12138 <assertion_failed>

0001583c <CBcmMailBox::Flush()>:
   1583c:	e92d4010 	push	{r4, lr}
   15840:	e3a04a0b 	mov	r4, #45056	@ 0xb000
   15844:	e3434f00 	movt	r4, #16128	@ 0x3f00
   15848:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   1584c:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   15850:	18bd8010 	popne	{r4, pc}
   15854:	e3a00014 	mov	r0, #20
   15858:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   1585c:	ebffda99 	bl	c2c8 <CTimer::SimpleMsDelay(unsigned int)>
   15860:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   15864:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   15868:	0afffff9 	beq	15854 <CBcmMailBox::Flush()+0x18>
   1586c:	e8bd8010 	pop	{r4, pc}

00015870 <CBcmMailBox::Read()>:
   15870:	e5901000 	ldr	r1, [r0]
   15874:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   15878:	e3432f00 	movt	r2, #16128	@ 0x3f00
   1587c:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   15880:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   15884:	1afffffc 	bne	1587c <CBcmMailBox::Read()+0xc>
   15888:	e5920880 	ldr	r0, [r2, #2176]	@ 0x880
   1588c:	e200300f 	and	r3, r0, #15
   15890:	e1530001 	cmp	r3, r1
   15894:	1afffff8 	bne	1587c <CBcmMailBox::Read()+0xc>
   15898:	e3c0000f 	bic	r0, r0, #15
   1589c:	e12fff1e 	bx	lr

000158a0 <CBcmMailBox::Write(unsigned int)>:
   158a0:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   158a4:	e3432f00 	movt	r2, #16128	@ 0x3f00
   158a8:	e59238b8 	ldr	r3, [r2, #2232]	@ 0x8b8
   158ac:	e3530000 	cmp	r3, #0
   158b0:	bafffffc 	blt	158a8 <CBcmMailBox::Write(unsigned int)+0x8>
   158b4:	e311000f 	tst	r1, #15
   158b8:	1a000003 	bne	158cc <CBcmMailBox::Write(unsigned int)+0x2c>
   158bc:	e5903000 	ldr	r3, [r0]
   158c0:	e1811003 	orr	r1, r1, r3
   158c4:	e58218a0 	str	r1, [r2, #2208]	@ 0x8a0
   158c8:	e12fff1e 	bx	lr
   158cc:	e30618a4 	movw	r1, #26788	@ 0x68a4
   158d0:	e3401001 	movt	r1, #1
   158d4:	e30608b4 	movw	r0, #26804	@ 0x68b4
   158d8:	e3400001 	movt	r0, #1
   158dc:	e3a02062 	mov	r2, #98	@ 0x62
   158e0:	e92d4010 	push	{r4, lr}
   158e4:	ebfff213 	bl	12138 <assertion_failed>

000158e8 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   158e8:	e3073b5c 	movw	r3, #31580	@ 0x7b5c
   158ec:	e3403001 	movt	r3, #1
   158f0:	e3a02000 	mov	r2, #0
   158f4:	e5832000 	str	r2, [r3]
   158f8:	e12fff1e 	bx	lr

000158fc <CExceptionHandler::~CExceptionHandler()>:
   158fc:	e3073b60 	movw	r3, #31584	@ 0x7b60
   15900:	e3403001 	movt	r3, #1
   15904:	e3a02000 	mov	r2, #0
   15908:	e5832000 	str	r2, [r3]
   1590c:	e12fff1e 	bx	lr

00015910 <CExceptionHandler::~CExceptionHandler()>:
   15910:	e3073b60 	movw	r3, #31584	@ 0x7b60
   15914:	e3403001 	movt	r3, #1
   15918:	e92d4010 	push	{r4, lr}
   1591c:	e3a01004 	mov	r1, #4
   15920:	e1a04000 	mov	r4, r0
   15924:	e3a02000 	mov	r2, #0
   15928:	e5832000 	str	r2, [r3]
   1592c:	ebffde10 	bl	d174 <operator delete(void*, unsigned int)>
   15930:	e1a00004 	mov	r0, r4
   15934:	e8bd8010 	pop	{r4, pc}

00015938 <CExceptionHandler::Throw(unsigned int)>:
   15938:	e92d4010 	push	{r4, lr}
   1593c:	e1a04001 	mov	r4, r1
   15940:	e24dd008 	sub	sp, sp, #8
   15944:	ebfffa94 	bl	1439c <CLogger::Get()>
   15948:	e307ca90 	movw	ip, #31376	@ 0x7a90
   1594c:	e340c001 	movt	ip, #1
   15950:	e3a02000 	mov	r2, #0
   15954:	e30638c8 	movw	r3, #26824	@ 0x68c8
   15958:	e3403001 	movt	r3, #1
   1595c:	e79c1104 	ldr	r1, [ip, r4, lsl #2]
   15960:	e58d1000 	str	r1, [sp]
   15964:	e30719f8 	movw	r1, #31224	@ 0x79f8
   15968:	e3401001 	movt	r1, #1
   1596c:	ebfffc53 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15970:	e28dd008 	add	sp, sp, #8
   15974:	e8bd8010 	pop	{r4, pc}

00015978 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   15978:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1597c:	e3510002 	cmp	r1, #2
   15980:	e1a05001 	mov	r5, r1
   15984:	e24dd024 	sub	sp, sp, #36	@ 0x24
   15988:	e1a04002 	mov	r4, r2
   1598c:	0a000030 	beq	15a54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   15990:	e3510003 	cmp	r1, #3
   15994:	13a08000 	movne	r8, #0
   15998:	11a09008 	movne	r9, r8
   1599c:	0a000022 	beq	15a2c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   159a0:	e3540000 	cmp	r4, #0
   159a4:	0a000024 	beq	15a3c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   159a8:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   159ac:	e5947048 	ldr	r7, [r4, #72]	@ 0x48
   159b0:	e203301f 	and	r3, r3, #31
   159b4:	e5946044 	ldr	r6, [r4, #68]	@ 0x44
   159b8:	e3530011 	cmp	r3, #17
   159bc:	0a000027 	beq	15a60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   159c0:	e3530012 	cmp	r3, #18
   159c4:	089400c0 	ldmeq	r4, {r6, r7}
   159c8:	e1a00006 	mov	r0, r6
   159cc:	e30719f8 	movw	r1, #31224	@ 0x79f8
   159d0:	e3401001 	movt	r1, #1
   159d4:	ebfff5ed 	bl	13190 <debug_stacktrace(unsigned int const*, char const*)>
   159d8:	ebfffa6f 	bl	1439c <CLogger::Get()>
   159dc:	e58d7014 	str	r7, [sp, #20]
   159e0:	e58d6010 	str	r6, [sp, #16]
   159e4:	e3073a90 	movw	r3, #31376	@ 0x7a90
   159e8:	e3403001 	movt	r3, #1
   159ec:	e58d800c 	str	r8, [sp, #12]
   159f0:	e30719f8 	movw	r1, #31224	@ 0x79f8
   159f4:	e3401001 	movt	r1, #1
   159f8:	e5942050 	ldr	r2, [r4, #80]	@ 0x50
   159fc:	e58d2004 	str	r2, [sp, #4]
   15a00:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   15a04:	e58d2018 	str	r2, [sp, #24]
   15a08:	e3a02000 	mov	r2, #0
   15a0c:	e58d9008 	str	r9, [sp, #8]
   15a10:	e793c105 	ldr	ip, [r3, r5, lsl #2]
   15a14:	e30638fc 	movw	r3, #26876	@ 0x68fc
   15a18:	e3403001 	movt	r3, #1
   15a1c:	e58dc000 	str	ip, [sp]
   15a20:	ebfffc26 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a24:	e28dd024 	add	sp, sp, #36	@ 0x24
   15a28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15a2c:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   15a30:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   15a34:	e3540000 	cmp	r4, #0
   15a38:	1affffda 	bne	159a8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   15a3c:	e30618d8 	movw	r1, #26840	@ 0x68d8
   15a40:	e3401001 	movt	r1, #1
   15a44:	e30608f0 	movw	r0, #26864	@ 0x68f0
   15a48:	e3400001 	movt	r0, #1
   15a4c:	e3a02069 	mov	r2, #105	@ 0x69
   15a50:	ebfff1b8 	bl	12138 <assertion_failed>
   15a54:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   15a58:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   15a5c:	eaffffcf 	b	159a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   15a60:	e594700c 	ldr	r7, [r4, #12]
   15a64:	e5946008 	ldr	r6, [r4, #8]
   15a68:	eaffffd6 	b	159c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

00015a6c <CExceptionHandler::CExceptionHandler()>:
   15a6c:	e3072b60 	movw	r2, #31584	@ 0x7b60
   15a70:	e3402001 	movt	r2, #1
   15a74:	e92d4010 	push	{r4, lr}
   15a78:	e59f10bc 	ldr	r1, [pc, #188]	@ 15b3c <CExceptionHandler::CExceptionHandler()+0xd0>
   15a7c:	e5923000 	ldr	r3, [r2]
   15a80:	e24dd008 	sub	sp, sp, #8
   15a84:	e5801000 	str	r1, [r0]
   15a88:	e3530000 	cmp	r3, #0
   15a8c:	1a000024 	bne	15b24 <CExceptionHandler::CExceptionHandler()+0xb8>
   15a90:	e3a03004 	mov	r3, #4
   15a94:	e58d3004 	str	r3, [sp, #4]
   15a98:	e59d1004 	ldr	r1, [sp, #4]
   15a9c:	e30532fc 	movw	r3, #21244	@ 0x52fc
   15aa0:	e3403001 	movt	r3, #1
   15aa4:	e1a04000 	mov	r4, r0
   15aa8:	e0433001 	sub	r3, r3, r1
   15aac:	e59d0004 	ldr	r0, [sp, #4]
   15ab0:	e59d1004 	ldr	r1, [sp, #4]
   15ab4:	e1a03143 	asr	r3, r3, #2
   15ab8:	e5824000 	str	r4, [r2]
   15abc:	e2433002 	sub	r3, r3, #2
   15ac0:	e2812008 	add	r2, r1, #8
   15ac4:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   15ac8:	e5803000 	str	r3, [r0]
   15acc:	e59d0004 	ldr	r0, [sp, #4]
   15ad0:	e305325c 	movw	r3, #21084	@ 0x525c
   15ad4:	e3403001 	movt	r3, #1
   15ad8:	e59d1004 	ldr	r1, [sp, #4]
   15adc:	e0432002 	sub	r2, r3, r2
   15ae0:	e30532ac 	movw	r3, #21164	@ 0x52ac
   15ae4:	e3403001 	movt	r3, #1
   15ae8:	e281100c 	add	r1, r1, #12
   15aec:	e0433001 	sub	r3, r3, r1
   15af0:	e59d1004 	ldr	r1, [sp, #4]
   15af4:	e1a02142 	asr	r2, r2, #2
   15af8:	e1a03143 	asr	r3, r3, #2
   15afc:	e2422002 	sub	r2, r2, #2
   15b00:	e2433002 	sub	r3, r3, #2
   15b04:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   15b08:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   15b0c:	e5802008 	str	r2, [r0, #8]
   15b10:	e581300c 	str	r3, [r1, #12]
   15b14:	ebffec69 	bl	10cc0 <SyncDataAndInstructionCache>
   15b18:	e1a00004 	mov	r0, r4
   15b1c:	e28dd008 	add	sp, sp, #8
   15b20:	e8bd8010 	pop	{r4, pc}
   15b24:	e30618d8 	movw	r1, #26840	@ 0x68d8
   15b28:	e3401001 	movt	r1, #1
   15b2c:	e30601c0 	movw	r0, #25024	@ 0x61c0
   15b30:	e3400001 	movt	r0, #1
   15b34:	e3a02030 	mov	r2, #48	@ 0x30
   15b38:	ebfff17e 	bl	12138 <assertion_failed>
   15b3c:	00017a08 	.word	0x00017a08

00015b40 <CExceptionHandler::Get()>:
   15b40:	e3073b60 	movw	r3, #31584	@ 0x7b60
   15b44:	e3403001 	movt	r3, #1
   15b48:	e5930000 	ldr	r0, [r3]
   15b4c:	e3500000 	cmp	r0, #0
   15b50:	112fff1e 	bxne	lr
   15b54:	e30618d8 	movw	r1, #26840	@ 0x68d8
   15b58:	e3401001 	movt	r1, #1
   15b5c:	e3060374 	movw	r0, #25460	@ 0x6374
   15b60:	e3400001 	movt	r0, #1
   15b64:	e3a02087 	mov	r2, #135	@ 0x87
   15b68:	e92d4010 	push	{r4, lr}
   15b6c:	ebfff171 	bl	12138 <assertion_failed>

00015b70 <ExceptionHandler>:
   15b70:	e92d4070 	push	{r4, r5, r6, lr}
   15b74:	e1a04000 	mov	r4, r0
   15b78:	e1a05001 	mov	r5, r1
   15b7c:	ebffeda6 	bl	1121c <CInterruptSystem::DisableFIQ()>
   15b80:	f1080040 	cpsie	f
   15b84:	e3073b60 	movw	r3, #31584	@ 0x7b60
   15b88:	e3403001 	movt	r3, #1
   15b8c:	e5930000 	ldr	r0, [r3]
   15b90:	e3500000 	cmp	r0, #0
   15b94:	0a000005 	beq	15bb0 <ExceptionHandler+0x40>
   15b98:	e5903000 	ldr	r3, [r0]
   15b9c:	e1a02005 	mov	r2, r5
   15ba0:	e1a01004 	mov	r1, r4
   15ba4:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ba8:	e593300c 	ldr	r3, [r3, #12]
   15bac:	e12fff13 	bx	r3
   15bb0:	e30618d8 	movw	r1, #26840	@ 0x68d8
   15bb4:	e3401001 	movt	r1, #1
   15bb8:	e3060374 	movw	r0, #25460	@ 0x6374
   15bbc:	e3400001 	movt	r0, #1
   15bc0:	e3a02087 	mov	r2, #135	@ 0x87
   15bc4:	ebfff15b 	bl	12138 <assertion_failed>

00015bc8 <raise>:
   15bc8:	e3073b60 	movw	r3, #31584	@ 0x7b60
   15bcc:	e3403001 	movt	r3, #1
   15bd0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   15bd4:	e5930000 	ldr	r0, [r3]
   15bd8:	e24dd00c 	sub	sp, sp, #12
   15bdc:	e3500000 	cmp	r0, #0
   15be0:	0a000018 	beq	15c48 <raise+0x80>
   15be4:	e5902000 	ldr	r2, [r0]
   15be8:	e3053938 	movw	r3, #22840	@ 0x5938
   15bec:	e3403001 	movt	r3, #1
   15bf0:	e5922008 	ldr	r2, [r2, #8]
   15bf4:	e1520003 	cmp	r2, r3
   15bf8:	1a00000d 	bne	15c34 <raise+0x6c>
   15bfc:	ebfff9e6 	bl	1439c <CLogger::Get()>
   15c00:	e307ca90 	movw	ip, #31376	@ 0x7a90
   15c04:	e340c001 	movt	ip, #1
   15c08:	e3a02000 	mov	r2, #0
   15c0c:	e30638c8 	movw	r3, #26824	@ 0x68c8
   15c10:	e3403001 	movt	r3, #1
   15c14:	e30719f8 	movw	r1, #31224	@ 0x79f8
   15c18:	e3401001 	movt	r1, #1
   15c1c:	e59cc010 	ldr	ip, [ip, #16]
   15c20:	e58dc000 	str	ip, [sp]
   15c24:	ebfffba5 	bl	14ac0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c28:	e3a00000 	mov	r0, #0
   15c2c:	e28dd00c 	add	sp, sp, #12
   15c30:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   15c34:	e3a01004 	mov	r1, #4
   15c38:	e12fff32 	blx	r2
   15c3c:	e3a00000 	mov	r0, #0
   15c40:	e28dd00c 	add	sp, sp, #12
   15c44:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   15c48:	e30618d8 	movw	r1, #26840	@ 0x68d8
   15c4c:	e3401001 	movt	r1, #1
   15c50:	e3060374 	movw	r0, #25460	@ 0x6374
   15c54:	e3400001 	movt	r0, #1
   15c58:	e3a02087 	mov	r2, #135	@ 0x87
   15c5c:	ebfff135 	bl	12138 <assertion_failed>

00015c60 <__aeabi_uldivmod>:
   15c60:	b953      	cbnz	r3, 15c78 <__aeabi_uldivmod+0x18>
   15c62:	b94a      	cbnz	r2, 15c78 <__aeabi_uldivmod+0x18>
   15c64:	2900      	cmp	r1, #0
   15c66:	bf08      	it	eq
   15c68:	2800      	cmpeq	r0, #0
   15c6a:	bf1c      	itt	ne
   15c6c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
   15c70:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   15c74:	f000 b9b8 	b.w	15fe8 <__aeabi_idiv0>
   15c78:	f1ad 0c08 	sub.w	ip, sp, #8
   15c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   15c80:	f000 f806 	bl	15c90 <__udivmoddi4>
   15c84:	f8dd e004 	ldr.w	lr, [sp, #4]
   15c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15c8c:	b004      	add	sp, #16
   15c8e:	4770      	bx	lr

00015c90 <__udivmoddi4>:
   15c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c94:	460e      	mov	r6, r1
   15c96:	4604      	mov	r4, r0
   15c98:	b083      	sub	sp, #12
   15c9a:	460f      	mov	r7, r1
   15c9c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
   15c9e:	2b00      	cmp	r3, #0
   15ca0:	d158      	bne.n	15d54 <__udivmoddi4+0xc4>
   15ca2:	4694      	mov	ip, r2
   15ca4:	fab2 f382 	clz	r3, r2
   15ca8:	428a      	cmp	r2, r1
   15caa:	d970      	bls.n	15d8e <__udivmoddi4+0xfe>
   15cac:	b143      	cbz	r3, 15cc0 <__udivmoddi4+0x30>
   15cae:	fa02 fc03 	lsl.w	ip, r2, r3
   15cb2:	f1c3 0220 	rsb	r2, r3, #32
   15cb6:	409f      	lsls	r7, r3
   15cb8:	fa20 f202 	lsr.w	r2, r0, r2
   15cbc:	4317      	orrs	r7, r2
   15cbe:	409c      	lsls	r4, r3
   15cc0:	ea4f 461c 	mov.w	r6, ip, lsr #16
   15cc4:	fa1f fe8c 	uxth.w	lr, ip
   15cc8:	0c22      	lsrs	r2, r4, #16
   15cca:	fbb7 f1f6 	udiv	r1, r7, r6
   15cce:	fb06 7711 	mls	r7, r6, r1, r7
   15cd2:	fb01 f00e 	mul.w	r0, r1, lr
   15cd6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   15cda:	4290      	cmp	r0, r2
   15cdc:	d910      	bls.n	15d00 <__udivmoddi4+0x70>
   15cde:	eb1c 0202 	adds.w	r2, ip, r2
   15ce2:	f04f 0701 	mov.w	r7, #1
   15ce6:	bf28      	it	cs
   15ce8:	2700      	movcs	r7, #0
   15cea:	4290      	cmp	r0, r2
   15cec:	f007 0701 	and.w	r7, r7, #1
   15cf0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
   15cf4:	bf98      	it	ls
   15cf6:	2700      	movls	r7, #0
   15cf8:	2f00      	cmp	r7, #0
   15cfa:	f040 8169 	bne.w	15fd0 <__udivmoddi4+0x340>
   15cfe:	4641      	mov	r1, r8
   15d00:	1a12      	subs	r2, r2, r0
   15d02:	b2a4      	uxth	r4, r4
   15d04:	fbb2 f0f6 	udiv	r0, r2, r6
   15d08:	fb06 2210 	mls	r2, r6, r0, r2
   15d0c:	fb00 fe0e 	mul.w	lr, r0, lr
   15d10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   15d14:	45a6      	cmp	lr, r4
   15d16:	d910      	bls.n	15d3a <__udivmoddi4+0xaa>
   15d18:	eb1c 0404 	adds.w	r4, ip, r4
   15d1c:	f04f 0201 	mov.w	r2, #1
   15d20:	bf28      	it	cs
   15d22:	2200      	movcs	r2, #0
   15d24:	45a6      	cmp	lr, r4
   15d26:	f002 0201 	and.w	r2, r2, #1
   15d2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
   15d2e:	bf98      	it	ls
   15d30:	2200      	movls	r2, #0
   15d32:	2a00      	cmp	r2, #0
   15d34:	f040 814f 	bne.w	15fd6 <__udivmoddi4+0x346>
   15d38:	4630      	mov	r0, r6
   15d3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   15d3e:	eba4 040e 	sub.w	r4, r4, lr
   15d42:	2100      	movs	r1, #0
   15d44:	b11d      	cbz	r5, 15d4e <__udivmoddi4+0xbe>
   15d46:	40dc      	lsrs	r4, r3
   15d48:	2300      	movs	r3, #0
   15d4a:	e9c5 4300 	strd	r4, r3, [r5]
   15d4e:	b003      	add	sp, #12
   15d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d54:	428b      	cmp	r3, r1
   15d56:	d905      	bls.n	15d64 <__udivmoddi4+0xd4>
   15d58:	b10d      	cbz	r5, 15d5e <__udivmoddi4+0xce>
   15d5a:	e9c5 0100 	strd	r0, r1, [r5]
   15d5e:	2100      	movs	r1, #0
   15d60:	4608      	mov	r0, r1
   15d62:	e7f4      	b.n	15d4e <__udivmoddi4+0xbe>
   15d64:	fab3 f183 	clz	r1, r3
   15d68:	2900      	cmp	r1, #0
   15d6a:	d15a      	bne.n	15e22 <__udivmoddi4+0x192>
   15d6c:	42b3      	cmp	r3, r6
   15d6e:	bf28      	it	cs
   15d70:	4282      	cmpcs	r2, r0
   15d72:	bf88      	it	hi
   15d74:	4608      	movhi	r0, r1
   15d76:	d805      	bhi.n	15d84 <__udivmoddi4+0xf4>
   15d78:	1aa6      	subs	r6, r4, r2
   15d7a:	eb67 0203 	sbc.w	r2, r7, r3
   15d7e:	2001      	movs	r0, #1
   15d80:	4617      	mov	r7, r2
   15d82:	4634      	mov	r4, r6
   15d84:	2d00      	cmp	r5, #0
   15d86:	d0e2      	beq.n	15d4e <__udivmoddi4+0xbe>
   15d88:	e9c5 4700 	strd	r4, r7, [r5]
   15d8c:	e7df      	b.n	15d4e <__udivmoddi4+0xbe>
   15d8e:	2b00      	cmp	r3, #0
   15d90:	f040 80bf 	bne.w	15f12 <__udivmoddi4+0x282>
   15d94:	1a8a      	subs	r2, r1, r2
   15d96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   15d9a:	fa1f fa8c 	uxth.w	sl, ip
   15d9e:	2101      	movs	r1, #1
   15da0:	fbb2 f6fe 	udiv	r6, r2, lr
   15da4:	fb0e 2016 	mls	r0, lr, r6, r2
   15da8:	0c22      	lsrs	r2, r4, #16
   15daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   15dae:	fb0a f006 	mul.w	r0, sl, r6
   15db2:	4290      	cmp	r0, r2
   15db4:	d912      	bls.n	15ddc <__udivmoddi4+0x14c>
   15db6:	eb1c 0202 	adds.w	r2, ip, r2
   15dba:	f04f 0701 	mov.w	r7, #1
   15dbe:	bf38      	it	cc
   15dc0:	2700      	movcc	r7, #0
   15dc2:	4290      	cmp	r0, r2
   15dc4:	f087 0801 	eor.w	r8, r7, #1
   15dc8:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
   15dcc:	f008 0701 	and.w	r7, r8, #1
   15dd0:	bf98      	it	ls
   15dd2:	2700      	movls	r7, #0
   15dd4:	2f00      	cmp	r7, #0
   15dd6:	f040 8104 	bne.w	15fe2 <__udivmoddi4+0x352>
   15dda:	464e      	mov	r6, r9
   15ddc:	1a12      	subs	r2, r2, r0
   15dde:	b2a4      	uxth	r4, r4
   15de0:	fbb2 f0fe 	udiv	r0, r2, lr
   15de4:	fb0e 2210 	mls	r2, lr, r0, r2
   15de8:	fb00 f70a 	mul.w	r7, r0, sl
   15dec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   15df0:	42a7      	cmp	r7, r4
   15df2:	d912      	bls.n	15e1a <__udivmoddi4+0x18a>
   15df4:	eb1c 0404 	adds.w	r4, ip, r4
   15df8:	f04f 0201 	mov.w	r2, #1
   15dfc:	bf38      	it	cc
   15dfe:	2200      	movcc	r2, #0
   15e00:	42a7      	cmp	r7, r4
   15e02:	f082 0201 	eor.w	r2, r2, #1
   15e06:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
   15e0a:	f002 0201 	and.w	r2, r2, #1
   15e0e:	bf98      	it	ls
   15e10:	2200      	movls	r2, #0
   15e12:	2a00      	cmp	r2, #0
   15e14:	f040 80e2 	bne.w	15fdc <__udivmoddi4+0x34c>
   15e18:	4670      	mov	r0, lr
   15e1a:	1be4      	subs	r4, r4, r7
   15e1c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   15e20:	e790      	b.n	15d44 <__udivmoddi4+0xb4>
   15e22:	f1c1 0720 	rsb	r7, r1, #32
   15e26:	408b      	lsls	r3, r1
   15e28:	fa06 f401 	lsl.w	r4, r6, r1
   15e2c:	fa22 fe07 	lsr.w	lr, r2, r7
   15e30:	ea4e 0e03 	orr.w	lr, lr, r3
   15e34:	40fe      	lsrs	r6, r7
   15e36:	fa20 fc07 	lsr.w	ip, r0, r7
   15e3a:	ea4f 491e 	mov.w	r9, lr, lsr #16
   15e3e:	fa00 f801 	lsl.w	r8, r0, r1
   15e42:	ea4c 0c04 	orr.w	ip, ip, r4
   15e46:	fa1f f48e 	uxth.w	r4, lr
   15e4a:	fa02 f301 	lsl.w	r3, r2, r1
   15e4e:	9301      	str	r3, [sp, #4]
   15e50:	fbb6 f0f9 	udiv	r0, r6, r9
   15e54:	ea4f 431c 	mov.w	r3, ip, lsr #16
   15e58:	fb09 6610 	mls	r6, r9, r0, r6
   15e5c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15e60:	fb00 f604 	mul.w	r6, r0, r4
   15e64:	429e      	cmp	r6, r3
   15e66:	d912      	bls.n	15e8e <__udivmoddi4+0x1fe>
   15e68:	eb1e 0303 	adds.w	r3, lr, r3
   15e6c:	f04f 0201 	mov.w	r2, #1
   15e70:	bf38      	it	cc
   15e72:	2200      	movcc	r2, #0
   15e74:	429e      	cmp	r6, r3
   15e76:	f082 0a01 	eor.w	sl, r2, #1
   15e7a:	f100 3bff 	add.w	fp, r0, #4294967295	@ 0xffffffff
   15e7e:	f00a 0201 	and.w	r2, sl, #1
   15e82:	bf98      	it	ls
   15e84:	2200      	movls	r2, #0
   15e86:	2a00      	cmp	r2, #0
   15e88:	f040 8099 	bne.w	15fbe <__udivmoddi4+0x32e>
   15e8c:	4658      	mov	r0, fp
   15e8e:	1b9b      	subs	r3, r3, r6
   15e90:	fa1f fc8c 	uxth.w	ip, ip
   15e94:	fbb3 f6f9 	udiv	r6, r3, r9
   15e98:	fb09 3316 	mls	r3, r9, r6, r3
   15e9c:	fb06 f404 	mul.w	r4, r6, r4
   15ea0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   15ea4:	429c      	cmp	r4, r3
   15ea6:	d911      	bls.n	15ecc <__udivmoddi4+0x23c>
   15ea8:	eb1e 0303 	adds.w	r3, lr, r3
   15eac:	f04f 0201 	mov.w	r2, #1
   15eb0:	bf38      	it	cc
   15eb2:	2200      	movcc	r2, #0
   15eb4:	429c      	cmp	r4, r3
   15eb6:	f082 0c01 	eor.w	ip, r2, #1
   15eba:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
   15ebe:	f00c 0201 	and.w	r2, ip, #1
   15ec2:	bf98      	it	ls
   15ec4:	2200      	movls	r2, #0
   15ec6:	2a00      	cmp	r2, #0
   15ec8:	d17f      	bne.n	15fca <__udivmoddi4+0x33a>
   15eca:	464e      	mov	r6, r9
   15ecc:	1b1c      	subs	r4, r3, r4
   15ece:	9b01      	ldr	r3, [sp, #4]
   15ed0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   15ed4:	fba0 9303 	umull	r9, r3, r0, r3
   15ed8:	46cc      	mov	ip, r9
   15eda:	461e      	mov	r6, r3
   15edc:	429c      	cmp	r4, r3
   15ede:	d363      	bcc.n	15fa8 <__udivmoddi4+0x318>
   15ee0:	f04f 0201 	mov.w	r2, #1
   15ee4:	bf18      	it	ne
   15ee6:	2200      	movne	r2, #0
   15ee8:	45c8      	cmp	r8, r9
   15eea:	f002 0201 	and.w	r2, r2, #1
   15eee:	bf28      	it	cs
   15ef0:	2200      	movcs	r2, #0
   15ef2:	2a00      	cmp	r2, #0
   15ef4:	d158      	bne.n	15fa8 <__udivmoddi4+0x318>
   15ef6:	b155      	cbz	r5, 15f0e <__udivmoddi4+0x27e>
   15ef8:	ebb8 020c 	subs.w	r2, r8, ip
   15efc:	eb64 0406 	sbc.w	r4, r4, r6
   15f00:	fa04 f307 	lsl.w	r3, r4, r7
   15f04:	40ca      	lsrs	r2, r1
   15f06:	4313      	orrs	r3, r2
   15f08:	40cc      	lsrs	r4, r1
   15f0a:	e9c5 3400 	strd	r3, r4, [r5]
   15f0e:	2100      	movs	r1, #0
   15f10:	e71d      	b.n	15d4e <__udivmoddi4+0xbe>
   15f12:	fa02 fc03 	lsl.w	ip, r2, r3
   15f16:	f1c3 0220 	rsb	r2, r3, #32
   15f1a:	4099      	lsls	r1, r3
   15f1c:	40d6      	lsrs	r6, r2
   15f1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   15f22:	fa20 f202 	lsr.w	r2, r0, r2
   15f26:	fa1f fa8c 	uxth.w	sl, ip
   15f2a:	430a      	orrs	r2, r1
   15f2c:	409c      	lsls	r4, r3
   15f2e:	fbb6 f0fe 	udiv	r0, r6, lr
   15f32:	0c11      	lsrs	r1, r2, #16
   15f34:	fb0e 6610 	mls	r6, lr, r0, r6
   15f38:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
   15f3c:	fb00 f60a 	mul.w	r6, r0, sl
   15f40:	428e      	cmp	r6, r1
   15f42:	d910      	bls.n	15f66 <__udivmoddi4+0x2d6>
   15f44:	eb1c 0101 	adds.w	r1, ip, r1
   15f48:	f04f 0701 	mov.w	r7, #1
   15f4c:	bf38      	it	cc
   15f4e:	2700      	movcc	r7, #0
   15f50:	428e      	cmp	r6, r1
   15f52:	f087 0801 	eor.w	r8, r7, #1
   15f56:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
   15f5a:	f008 0701 	and.w	r7, r8, #1
   15f5e:	bf98      	it	ls
   15f60:	2700      	movls	r7, #0
   15f62:	bb4f      	cbnz	r7, 15fb8 <__udivmoddi4+0x328>
   15f64:	4648      	mov	r0, r9
   15f66:	1b89      	subs	r1, r1, r6
   15f68:	b292      	uxth	r2, r2
   15f6a:	fbb1 f6fe 	udiv	r6, r1, lr
   15f6e:	fb0e 1116 	mls	r1, lr, r6, r1
   15f72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   15f76:	fb06 f10a 	mul.w	r1, r6, sl
   15f7a:	4291      	cmp	r1, r2
   15f7c:	d910      	bls.n	15fa0 <__udivmoddi4+0x310>
   15f7e:	eb1c 0202 	adds.w	r2, ip, r2
   15f82:	f04f 0701 	mov.w	r7, #1
   15f86:	bf38      	it	cc
   15f88:	2700      	movcc	r7, #0
   15f8a:	4291      	cmp	r1, r2
   15f8c:	f087 0801 	eor.w	r8, r7, #1
   15f90:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
   15f94:	f008 0701 	and.w	r7, r8, #1
   15f98:	bf98      	it	ls
   15f9a:	2700      	movls	r7, #0
   15f9c:	b997      	cbnz	r7, 15fc4 <__udivmoddi4+0x334>
   15f9e:	464e      	mov	r6, r9
   15fa0:	1a52      	subs	r2, r2, r1
   15fa2:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
   15fa6:	e6fb      	b.n	15da0 <__udivmoddi4+0x110>
   15fa8:	9a01      	ldr	r2, [sp, #4]
   15faa:	3801      	subs	r0, #1
   15fac:	ebb9 0c02 	subs.w	ip, r9, r2
   15fb0:	eb63 030e 	sbc.w	r3, r3, lr
   15fb4:	461e      	mov	r6, r3
   15fb6:	e79e      	b.n	15ef6 <__udivmoddi4+0x266>
   15fb8:	3802      	subs	r0, #2
   15fba:	4461      	add	r1, ip
   15fbc:	e7d3      	b.n	15f66 <__udivmoddi4+0x2d6>
   15fbe:	3802      	subs	r0, #2
   15fc0:	4473      	add	r3, lr
   15fc2:	e764      	b.n	15e8e <__udivmoddi4+0x1fe>
   15fc4:	3e02      	subs	r6, #2
   15fc6:	4462      	add	r2, ip
   15fc8:	e7ea      	b.n	15fa0 <__udivmoddi4+0x310>
   15fca:	3e02      	subs	r6, #2
   15fcc:	4473      	add	r3, lr
   15fce:	e77d      	b.n	15ecc <__udivmoddi4+0x23c>
   15fd0:	3902      	subs	r1, #2
   15fd2:	4462      	add	r2, ip
   15fd4:	e694      	b.n	15d00 <__udivmoddi4+0x70>
   15fd6:	4464      	add	r4, ip
   15fd8:	3802      	subs	r0, #2
   15fda:	e6ae      	b.n	15d3a <__udivmoddi4+0xaa>
   15fdc:	4464      	add	r4, ip
   15fde:	3802      	subs	r0, #2
   15fe0:	e71b      	b.n	15e1a <__udivmoddi4+0x18a>
   15fe2:	3e02      	subs	r6, #2
   15fe4:	4462      	add	r2, ip
   15fe6:	e6f9      	b.n	15ddc <__udivmoddi4+0x14c>

00015fe8 <__aeabi_idiv0>:
   15fe8:	4770      	bx	lr
   15fea:	bf00      	nop
